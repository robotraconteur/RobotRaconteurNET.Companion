//This file is automatically generated. DO NOT EDIT!
using System;
using RobotRaconteur;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;

#pragma warning disable 0108

namespace com.robotraconteur.action
{
public static class com__robotraconteur__actionConstants 
{
}
    public enum ActionStatusCode
    {
    error = -3,
    failed = -2,
    cancelled = -1,
    unknown = 0,
    queued = 1,
    running = 2,
    complete = 3
    };
}
namespace com.robotraconteur.action
{
public class com__robotraconteur__actionFactory : ServiceFactory
{
    public override string DefString()
{
    const string s="service com.robotraconteur.action\n\nstdver 0.10\n\nenum ActionStatusCode\nerror = -3,\nfailed = -2,\ncancelled = -1,\nunknown = 0,\nqueued,\nrunning,\ncomplete\nend\n\n";
    return s;
    }
    public override string GetServiceName() {return "com.robotraconteur.action";}
    public com__robotraconteur__actionFactory()
{
    }
    public override IStructureStub FindStructureStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public override IPodStub FindPodStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override INamedArrayStub FindNamedArrayStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override ServiceStub CreateStub(WrappedServiceStub innerstub) {
    string objecttype=innerstub.RR_objecttype.GetServiceDefinition().Name + "." + innerstub.RR_objecttype.Name;    string objshort;
    if (CompareNamespace(objecttype, out objshort)) {
    switch (objshort) {
    default:
    break;
    }
    } else {
    string ext_service_type=RobotRaconteurNode.SplitQualifiedName(objecttype).Item1;
    return RobotRaconteurNode.s.GetServiceType(ext_service_type).CreateStub(innerstub);
    }
    throw new ServiceException("Could not create stub");
    }
    public override ServiceSkel CreateSkel(object obj) {
    string objtype = RobotRaconteurNode.GetTypeString(ServiceSkelUtil.FindParentInterface(obj.GetType()));
    string objshort;
    if (CompareNamespace(objtype, out objshort)) {
    switch(objshort) {
    default:
    break;
    }
    } else {
    string ext_service_type=RobotRaconteurNode.SplitQualifiedName(objtype).Item1;
    return RobotRaconteurNode.s.GetServiceFactory(ext_service_type).CreateSkel(obj);
    }
    throw new ServiceException("Could not create skel");
    }
    public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp){
    if (rr_exp==null) return rr_exp;
    string rr_type=rr_exp.Error;
    if (!rr_type.Contains(".")) return rr_exp;
    string rr_stype;
    if (CompareNamespace(rr_type, out rr_stype)) {
    } else {
    return RobotRaconteurNode.s.DownCastException(rr_exp); 
    }
    return rr_exp;
    }
}

public static class RRExtensions{
}
}
namespace com.robotraconteur.actuator
{
public class ActuatorState
{
    public com.robotraconteur.datetime.TimeSpec3 ts;
    public ulong seqno;
    public uint actuator_state_flags;
    public double[] actuator_command;
}

public class ActuatorInfo
{
    public com.robotraconteur.device.DeviceInfo device_info;
    public ActuatorTypeCode actuator_type;
    public List<com.robotraconteur.units.SIUnit> command_units;
    public com.robotraconteur.datatype.DataType command_data_type;
    public double[] command_resolution;
    public bool analog_output;
    public List<com.robotraconteur.param.ParameterInfo> parameter_info;
    public Dictionary<string,object> extended;
}

[RobotRaconteurServiceObjectInterface()]
public interface Actuator : com.robotraconteur.device.Device
{
    com.robotraconteur.device.DeviceInfo device_info { get; 	}
    ActuatorInfo actuator_info { get; 	}
    ActuatorMode actuator_mode { get;  set; 	}
    object getf_param(string param_name);
    void setf_param(string param_name, object value_);
    Wire<double[]> actuator_command{ get; set; }
    Wire<ActuatorState> actuator_state{ get; set; }
}

public static class com__robotraconteur__actuatorConstants 
{
}
    public enum ActuatorTypeCode
    {
    unknown = 0,
    generic = 1,
    position = 2,
    velocity = 3,
    acceleration = 4,
    effort = 5,
    motor_position = 6,
    motor_velocity = 7,
    motor_acceleration = 8,
    motor_effort = 9,
    solenoid = 10,
    voice_coil = 11,
    piezoelectric = 12,
    pneumatic_pressure = 13,
    vacuum_pressure = 14,
    heater_power = 15,
    chiller_power = 16,
    valve = 17,
    conveyor = 18,
    voltage = 19,
    current = 20,
    pneumatic_cylinder = 21,
    hydraulic_cylinder = 22
    };
    public enum ActuatorMode
    {
    error = -2,
    disabled = -1,
    halt = 0,
    reduced_performance = 1,
    normal = 2
    };
    public enum ActuatorStateFlags
    {
    unknown = 0,
    ready = 0x1,
    streaming = 0x2,
    warning = 0x4,
    error = 0x8,
    fatal_error = 0x10,
    e_stop = 0x20,
    homed = 0x40,
    homing_required = 0x80,
    communication_failure = 0x100,
    valid_command = 0x200,
    enabled = 0x400
    };
}
namespace com.robotraconteur.actuator
{
public class com__robotraconteur__actuatorFactory : ServiceFactory
{
    public override string DefString()
{
    const string s="service com.robotraconteur.actuator\n\nstdver 0.10\n\nimport com.robotraconteur.device\nimport com.robotraconteur.param\nimport com.robotraconteur.units\nimport com.robotraconteur.datatype\nimport com.robotraconteur.datetime\n\nusing com.robotraconteur.device.DeviceInfo\nusing com.robotraconteur.device.Device\nusing com.robotraconteur.param.ParameterInfo\nusing com.robotraconteur.units.SIUnit\nusing com.robotraconteur.datatype.DataType\nusing com.robotraconteur.datetime.TimeSpec3\n\nenum ActuatorTypeCode\nunknown = 0,\ngeneric,\nposition,\nvelocity,\nacceleration,\neffort,\nmotor_position,\nmotor_velocity,\nmotor_acceleration,\nmotor_effort,\nsolenoid,\nvoice_coil,\npiezoelectric,\npneumatic_pressure,\nvacuum_pressure,\nheater_power,\nchiller_power,\nvalve,\nconveyor,\nvoltage,\ncurrent,\npneumatic_cylinder,\nhydraulic_cylinder\nend\n\nenum ActuatorMode\nerror = -2,\ndisabled = -1,\nhalt = 0,\nreduced_performance = 1,\nnormal = 2\nend\n\nenum ActuatorStateFlags\nunknown = 0,\nready = 0x1,\nstreaming = 0x2,\nwarning = 0x4,\nerror = 0x8,\nfatal_error = 0x10,\ne_stop = 0x20,\nhomed = 0x40,\nhoming_required = 0x80,\ncommunication_failure = 0x100,\nvalid_command = 0x200,\nenabled = 0x400\nend\n\nstruct ActuatorState\nfield TimeSpec3 ts\nfield uint64 seqno\nfield uint32 actuator_state_flags\nfield double[] actuator_command\nend\n\nstruct ActuatorInfo\nfield DeviceInfo device_info\nfield ActuatorTypeCode actuator_type\nfield SIUnit{list} command_units\nfield DataType command_data_type\nfield double[] command_resolution\nfield bool analog_output\nfield ParameterInfo{list} parameter_info\nfield varvalue{string} extended\nend\n\nobject Actuator\nimplements Device\nproperty DeviceInfo device_info [readonly,nolock]\nproperty ActuatorInfo actuator_info [readonly,nolock]\nproperty ActuatorMode actuator_mode [nolockread]\nwire double[] actuator_command [writeonly]\nwire ActuatorState actuator_state [readonly,nolock]\nfunction varvalue getf_param(string param_name)\nfunction void setf_param(string param_name, varvalue value)\nend\n\n";
    return s;
    }
    public override string GetServiceName() {return "com.robotraconteur.actuator";}
    public ActuatorState_stub ActuatorState_stubentry;
    public ActuatorInfo_stub ActuatorInfo_stubentry;
    public com__robotraconteur__actuatorFactory()
{
    ActuatorState_stubentry=new ActuatorState_stub(this);
    ActuatorInfo_stubentry=new ActuatorInfo_stub(this);
    }
    public override IStructureStub FindStructureStub(string objecttype)
    {
    if (objecttype=="ActuatorState")    return ActuatorState_stubentry;
    if (objecttype=="ActuatorInfo")    return ActuatorInfo_stubentry;
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public override IPodStub FindPodStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override INamedArrayStub FindNamedArrayStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override ServiceStub CreateStub(WrappedServiceStub innerstub) {
    string objecttype=innerstub.RR_objecttype.GetServiceDefinition().Name + "." + innerstub.RR_objecttype.Name;    string objshort;
    if (CompareNamespace(objecttype, out objshort)) {
    switch (objshort) {
    case "Actuator":
    return new Actuator_stub(innerstub);
    default:
    break;
    }
    } else {
    string ext_service_type=RobotRaconteurNode.SplitQualifiedName(objecttype).Item1;
    return RobotRaconteurNode.s.GetServiceType(ext_service_type).CreateStub(innerstub);
    }
    throw new ServiceException("Could not create stub");
    }
    public override ServiceSkel CreateSkel(object obj) {
    string objtype = RobotRaconteurNode.GetTypeString(ServiceSkelUtil.FindParentInterface(obj.GetType()));
    string objshort;
    if (CompareNamespace(objtype, out objshort)) {
    switch(objshort) {
    case "Actuator":
    return new Actuator_skel((Actuator)obj);
    default:
    break;
    }
    } else {
    string ext_service_type=RobotRaconteurNode.SplitQualifiedName(objtype).Item1;
    return RobotRaconteurNode.s.GetServiceFactory(ext_service_type).CreateSkel(obj);
    }
    throw new ServiceException("Could not create skel");
    }
    public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp){
    if (rr_exp==null) return rr_exp;
    string rr_type=rr_exp.Error;
    if (!rr_type.Contains(".")) return rr_exp;
    string rr_stype;
    if (CompareNamespace(rr_type, out rr_stype)) {
    } else {
    return RobotRaconteurNode.s.DownCastException(rr_exp); 
    }
    return rr_exp;
    }
}

public class ActuatorState_stub : IStructureStub {
    public ActuatorState_stub(com__robotraconteur__actuatorFactory d) {def=d;}
    private com__robotraconteur__actuatorFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    ActuatorState s = (ActuatorState)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.datetime.TimeSpec3>("ts",ref s.ts));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<ulong>("seqno",s.seqno));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<uint>("actuator_state_flags",s.actuator_state_flags));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackArray<double>("actuator_command",s.actuator_command));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.actuator.ActuatorState",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    ActuatorState s=new ActuatorState();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.ts =MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.datetime.TimeSpec3>(MessageElement.FindElement(mm,"ts"));
    s.seqno =(MessageElementUtil.UnpackScalar<ulong>(MessageElement.FindElement(mm,"seqno")));
    s.actuator_state_flags =(MessageElementUtil.UnpackScalar<uint>(MessageElement.FindElement(mm,"actuator_state_flags")));
    s.actuator_command =MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(mm,"actuator_command"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class ActuatorInfo_stub : IStructureStub {
    public ActuatorInfo_stub(com__robotraconteur__actuatorFactory d) {def=d;}
    private com__robotraconteur__actuatorFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    ActuatorInfo s = (ActuatorInfo)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("device_info",s.device_info));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackEnum<ActuatorTypeCode>("actuator_type",s.actuator_type));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackListType<com.robotraconteur.units.SIUnit>("command_units",s.command_units));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("command_data_type",s.command_data_type));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackArray<double>("command_resolution",s.command_resolution));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<bool>("analog_output",s.analog_output));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackListType<com.robotraconteur.param.ParameterInfo>("parameter_info",s.parameter_info));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackMapType<string,object>("extended",s.extended));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.actuator.ActuatorInfo",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    ActuatorInfo s=new ActuatorInfo();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.device_info =MessageElementUtil.UnpackStructure<com.robotraconteur.device.DeviceInfo>(MessageElement.FindElement(mm,"device_info"));
    s.actuator_type =MessageElementUtil.UnpackEnum<ActuatorTypeCode>(MessageElement.FindElement(mm,"actuator_type"));
    s.command_units =MessageElementUtil.UnpackList<com.robotraconteur.units.SIUnit>(MessageElement.FindElement(mm,"command_units"));
    s.command_data_type =MessageElementUtil.UnpackStructure<com.robotraconteur.datatype.DataType>(MessageElement.FindElement(mm,"command_data_type"));
    s.command_resolution =MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(mm,"command_resolution"));
    s.analog_output =(MessageElementUtil.UnpackScalar<bool>(MessageElement.FindElement(mm,"analog_output")));
    s.parameter_info =MessageElementUtil.UnpackList<com.robotraconteur.param.ParameterInfo>(MessageElement.FindElement(mm,"parameter_info"));
    s.extended =MessageElementUtil.UnpackMap<string,object>(MessageElement.FindElement(mm,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public interface async_Actuator : com.robotraconteur.device.async_Device
{
    Task<com.robotraconteur.device.DeviceInfo> async_get_device_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<ActuatorInfo> async_get_actuator_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<ActuatorMode> async_get_actuator_mode(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_actuator_mode(ActuatorMode value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<object> async_getf_param(string param_name,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_setf_param(string param_name, object value_,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
}
public class Actuator_stub : ServiceStub , Actuator, async_Actuator{
    private Wire<double[]> rr_actuator_command;
    private Wire<ActuatorState> rr_actuator_state;
    public Actuator_stub(WrappedServiceStub innerstub) : base(innerstub) {
    rr_actuator_command=new Wire<double[]>(innerstub.GetWire("actuator_command"));
    rr_actuator_state=new Wire<ActuatorState>(innerstub.GetWire("actuator_state"));
    }
    public com.robotraconteur.device.DeviceInfo device_info {
    get {
    return MessageElementUtil.UnpackStructure<com.robotraconteur.device.DeviceInfo>(rr_innerstub.PropertyGet("device_info"));
    }
    }
    public ActuatorInfo actuator_info {
    get {
    return MessageElementUtil.UnpackStructure<ActuatorInfo>(rr_innerstub.PropertyGet("actuator_info"));
    }
    }
    public ActuatorMode actuator_mode {
    get {
    return MessageElementUtil.UnpackEnum<ActuatorMode>(rr_innerstub.PropertyGet("actuator_mode"));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackEnum<ActuatorMode>("value",value))
    {
    rr_innerstub.PropertySet("actuator_mode", m);
    }
    }
    }
    public object getf_param(string param_name) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("param_name",param_name));
    using(MessageElement rr_me=rr_innerstub.FunctionCall("getf_param",rr_param))
    {
    return MessageElementUtil.UnpackVarType(rr_me);
    }
    }
    }
    public void setf_param(string param_name, object value_) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("param_name",param_name));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackVarType("value",value_));
    using(MessageElement rr_me=rr_innerstub.FunctionCall("setf_param",rr_param))
    {
    }
    }
    }
    public override void DispatchEvent(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    }
    public Wire<double[]> actuator_command {
    get { return rr_actuator_command;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<ActuatorState> actuator_state {
    get { return rr_actuator_state;  }
    set { throw new InvalidOperationException();}
    }
    public override MessageElement CallbackCall(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public virtual async Task<com.robotraconteur.device.DeviceInfo> async_get_device_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("device_info",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<com.robotraconteur.device.DeviceInfo>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<ActuatorInfo> async_get_actuator_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("actuator_info",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<ActuatorInfo>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<ActuatorMode> async_get_actuator_mode(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("actuator_mode",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackEnum<ActuatorMode>(rr_value);
    return rr_ret;
    } }
    public virtual async Task async_set_actuator_mode(ActuatorMode value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackEnum<ActuatorMode>("value",value))
    {
    await rr_async_PropertySet("actuator_mode",mm,rr_timeout);
    }
    }
    public virtual async Task<object> async_getf_param(string param_name,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("param_name",param_name));
    using(var rr_return = await rr_async_FunctionCall("getf_param",rr_param,rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackVarType(rr_return);
    return rr_ret;
    } } }
    public virtual async Task async_setf_param(string param_name, object value_,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("param_name",param_name));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackVarType("value",value_));
    using(var rr_return = await rr_async_FunctionCall("setf_param",rr_param,rr_timeout)) {
    } } }
}
public class Actuator_skel : ServiceSkel {
    protected Actuator obj;
    protected async_Actuator async_obj;
    public Actuator_skel(object o) : base(o)    {
    obj=(Actuator)o;
    async_obj = o as async_Actuator;
    }
    public override void ReleaseCastObject() { 
    obj=null;
    async_obj=null;
    base.ReleaseCastObject();
    }
    public override MessageElement CallGetProperty(string membername, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    case "device_info":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_device_info().ContinueWith(t => async_adapter.EndTask<com.robotraconteur.device.DeviceInfo>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    com.robotraconteur.device.DeviceInfo ret=obj.device_info;
    return MessageElementUtil.PackStructure("return",ret);
    }
    case "actuator_info":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_actuator_info().ContinueWith(t => async_adapter.EndTask<ActuatorInfo>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    ActuatorInfo ret=obj.actuator_info;
    return MessageElementUtil.PackStructure("return",ret);
    }
    case "actuator_mode":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_actuator_mode().ContinueWith(t => async_adapter.EndTask<ActuatorMode>(t,async_ret => MessageElementUtil.PackEnum<ActuatorMode>("return",async_ret)));
    return null;
    }
    ActuatorMode ret=obj.actuator_mode;
    return MessageElementUtil.PackEnum<ActuatorMode>("return",ret);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void CallSetProperty(string membername, MessageElement m, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    case "actuator_mode":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_actuator_mode(MessageElementUtil.UnpackEnum<ActuatorMode>(m)).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.actuator_mode=MessageElementUtil.UnpackEnum<ActuatorMode>(m);
    return;
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override MessageElement CallFunction(string rr_membername, vectorptr_messageelement rr_m, WrappedServiceSkelAsyncAdapter rr_async_adapter) {
    switch (rr_membername) {
    case "getf_param":
    {
    string param_name=MessageElementUtil.UnpackString(vectorptr_messageelement_util.FindElement(rr_m,"param_name"));
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_getf_param(param_name).ContinueWith(t => rr_async_adapter.EndTask<object>(t,async_ret => MessageElementUtil.PackVarType("return",async_ret)));
    return null;
    }
    object rr_ret=this.obj.getf_param(param_name);
    return MessageElementUtil.PackVarType("return",rr_ret);
    }
    case "setf_param":
    {
    string param_name=MessageElementUtil.UnpackString(vectorptr_messageelement_util.FindElement(rr_m,"param_name"));
    object value_=MessageElementUtil.UnpackVarType(vectorptr_messageelement_util.FindElement(rr_m,"value"));
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_setf_param(param_name, value_).ContinueWith(t => rr_async_adapter.EndTask(t,new MessageElement("return",(int)0)));
    return null;
    }
    this.obj.setf_param(param_name, value_);
    return new MessageElement("return",(int)0);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override object GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(Actuator)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(Actuator)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void InitPipeServers(object rrobj1) {
    obj=(Actuator)rrobj1;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(Actuator)rrobj1;
    }
    public override void InitWireServers(object rrobj1) {
    obj=(Actuator)rrobj1;
    obj.actuator_command=new Wire<double[]>(innerskel.GetWire("actuator_command"));
    obj.actuator_state=new Wire<ActuatorState>(innerskel.GetWire("actuator_state"));
    }
    public override WrappedArrayMemoryDirector GetArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedMultiDimArrayMemoryDirector GetMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodArrayMemoryDirector GetPodArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodMultiDimArrayMemoryDirector GetPodMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedArrayMemoryDirector GetNamedArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedMultiDimArrayMemoryDirector GetNamedMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override string RRType { get { return "com.robotraconteur.actuator.Actuator"; } }
}
public class Actuator_default_impl : Actuator{
    protected WireUnicastReceiver<double[]> rrvar_actuator_command;
    protected WireBroadcaster<ActuatorState> rrvar_actuator_state;
    public virtual com.robotraconteur.device.DeviceInfo device_info {get; set;} = default(com.robotraconteur.device.DeviceInfo);
    public virtual ActuatorInfo actuator_info {get; set;} = default(ActuatorInfo);
    public virtual ActuatorMode actuator_mode {get; set;} = default(ActuatorMode);
    public virtual object getf_param(string param_name) {
    throw new NotImplementedException();    }
    public virtual void setf_param(string param_name, object value_) {
    throw new NotImplementedException();    }
    public virtual Wire<double[]> actuator_command {
    get { return rrvar_actuator_command.Wire;  }
    set {
    if (rrvar_actuator_command!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_actuator_command= new WireUnicastReceiver<double[]>(value);
    }
    }
    public virtual Wire<ActuatorState> actuator_state {
    get { return rrvar_actuator_state.Wire;  }
    set {
    if (rrvar_actuator_state!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_actuator_state= new WireBroadcaster<ActuatorState>(value);
    }
    }
}
public static class RRExtensions{
}
}
namespace com.robotraconteur.bignum
{
public class BigNum
{
    public byte[] data;
}

public class UnsignedBigNum
{
    public byte[] data;
}

public class BigFloat
{
    public BigNum num;
    public BigNum den;
    public BigNum radix;
}

}
namespace com.robotraconteur.bignum
{
public class com__robotraconteur__bignumFactory : ServiceFactory
{
    public override string DefString()
{
    const string s="service com.robotraconteur.bignum\n\nstdver 0.10\n\n# Signed arbitrary precision number, little endian\nstruct BigNum\nfield uint8[] data\nend\n\n# Unsigned arbitrary precision number, little endian\nstruct UnsignedBigNum\nfield uint8[] data\nend\n\n# Arbitrary precision floating point number\nstruct BigFloat\nfield BigNum num\nfield BigNum den\nfield BigNum radix\nend\n\n";
    return s;
    }
    public override string GetServiceName() {return "com.robotraconteur.bignum";}
    public BigNum_stub BigNum_stubentry;
    public UnsignedBigNum_stub UnsignedBigNum_stubentry;
    public BigFloat_stub BigFloat_stubentry;
    public com__robotraconteur__bignumFactory()
{
    BigNum_stubentry=new BigNum_stub(this);
    UnsignedBigNum_stubentry=new UnsignedBigNum_stub(this);
    BigFloat_stubentry=new BigFloat_stub(this);
    }
    public override IStructureStub FindStructureStub(string objecttype)
    {
    if (objecttype=="BigNum")    return BigNum_stubentry;
    if (objecttype=="UnsignedBigNum")    return UnsignedBigNum_stubentry;
    if (objecttype=="BigFloat")    return BigFloat_stubentry;
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public override IPodStub FindPodStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override INamedArrayStub FindNamedArrayStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override ServiceStub CreateStub(WrappedServiceStub innerstub) {
    string objecttype=innerstub.RR_objecttype.GetServiceDefinition().Name + "." + innerstub.RR_objecttype.Name;    string objshort;
    if (CompareNamespace(objecttype, out objshort)) {
    switch (objshort) {
    default:
    break;
    }
    } else {
    string ext_service_type=RobotRaconteurNode.SplitQualifiedName(objecttype).Item1;
    return RobotRaconteurNode.s.GetServiceType(ext_service_type).CreateStub(innerstub);
    }
    throw new ServiceException("Could not create stub");
    }
    public override ServiceSkel CreateSkel(object obj) {
    string objtype = RobotRaconteurNode.GetTypeString(ServiceSkelUtil.FindParentInterface(obj.GetType()));
    string objshort;
    if (CompareNamespace(objtype, out objshort)) {
    switch(objshort) {
    default:
    break;
    }
    } else {
    string ext_service_type=RobotRaconteurNode.SplitQualifiedName(objtype).Item1;
    return RobotRaconteurNode.s.GetServiceFactory(ext_service_type).CreateSkel(obj);
    }
    throw new ServiceException("Could not create skel");
    }
    public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp){
    if (rr_exp==null) return rr_exp;
    string rr_type=rr_exp.Error;
    if (!rr_type.Contains(".")) return rr_exp;
    string rr_stype;
    if (CompareNamespace(rr_type, out rr_stype)) {
    } else {
    return RobotRaconteurNode.s.DownCastException(rr_exp); 
    }
    return rr_exp;
    }
}

public class BigNum_stub : IStructureStub {
    public BigNum_stub(com__robotraconteur__bignumFactory d) {def=d;}
    private com__robotraconteur__bignumFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    BigNum s = (BigNum)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackArray<byte>("data",s.data));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.bignum.BigNum",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    BigNum s=new BigNum();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.data =MessageElementUtil.UnpackArray<byte>(MessageElement.FindElement(mm,"data"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class UnsignedBigNum_stub : IStructureStub {
    public UnsignedBigNum_stub(com__robotraconteur__bignumFactory d) {def=d;}
    private com__robotraconteur__bignumFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    UnsignedBigNum s = (UnsignedBigNum)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackArray<byte>("data",s.data));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.bignum.UnsignedBigNum",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    UnsignedBigNum s=new UnsignedBigNum();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.data =MessageElementUtil.UnpackArray<byte>(MessageElement.FindElement(mm,"data"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class BigFloat_stub : IStructureStub {
    public BigFloat_stub(com__robotraconteur__bignumFactory d) {def=d;}
    private com__robotraconteur__bignumFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    BigFloat s = (BigFloat)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("num",s.num));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("den",s.den));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("radix",s.radix));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.bignum.BigFloat",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    BigFloat s=new BigFloat();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.num =MessageElementUtil.UnpackStructure<BigNum>(MessageElement.FindElement(mm,"num"));
    s.den =MessageElementUtil.UnpackStructure<BigNum>(MessageElement.FindElement(mm,"den"));
    s.radix =MessageElementUtil.UnpackStructure<BigNum>(MessageElement.FindElement(mm,"radix"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public static class RRExtensions{
}
}
namespace com.robotraconteur.color
{
[NamedArrayElementTypeAndCount(typeof(double), 4)]
public struct ColorRGBA
{
    public double r;
    public double g;
    public double b;
    public double a;
    public double[] GetNumericArray()
    {
    var a=new ArraySegment<double>(new double[4]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<double> rr_a)
    {
    if(rr_a.Count < 4) throw new ArgumentException("ArraySegment invalid length");
    rr_a.Array[rr_a.Offset + 0] = r;
    rr_a.Array[rr_a.Offset + 1] = g;
    rr_a.Array[rr_a.Offset + 2] = b;
    rr_a.Array[rr_a.Offset + 3] = a;
    }
    public void AssignFromNumericArray(ref ArraySegment<double> rr_a)
    {
    if(rr_a.Count < 4) throw new ArgumentException("ArraySegment invalid length");
    r = rr_a.Array[rr_a.Offset + 0];
    g = rr_a.Array[rr_a.Offset + 1];
    b = rr_a.Array[rr_a.Offset + 2];
    a = rr_a.Array[rr_a.Offset + 3];
    }
}

[NamedArrayElementTypeAndCount(typeof(float), 4)]
public struct ColorRGBAf
{
    public float r;
    public float g;
    public float b;
    public float a;
    public float[] GetNumericArray()
    {
    var a=new ArraySegment<float>(new float[4]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<float> rr_a)
    {
    if(rr_a.Count < 4) throw new ArgumentException("ArraySegment invalid length");
    rr_a.Array[rr_a.Offset + 0] = r;
    rr_a.Array[rr_a.Offset + 1] = g;
    rr_a.Array[rr_a.Offset + 2] = b;
    rr_a.Array[rr_a.Offset + 3] = a;
    }
    public void AssignFromNumericArray(ref ArraySegment<float> rr_a)
    {
    if(rr_a.Count < 4) throw new ArgumentException("ArraySegment invalid length");
    r = rr_a.Array[rr_a.Offset + 0];
    g = rr_a.Array[rr_a.Offset + 1];
    b = rr_a.Array[rr_a.Offset + 2];
    a = rr_a.Array[rr_a.Offset + 3];
    }
}

[NamedArrayElementTypeAndCount(typeof(byte), 4)]
public struct ColorRGBAu
{
    public byte r;
    public byte g;
    public byte b;
    public byte a;
    public byte[] GetNumericArray()
    {
    var a=new ArraySegment<byte>(new byte[4]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<byte> rr_a)
    {
    if(rr_a.Count < 4) throw new ArgumentException("ArraySegment invalid length");
    rr_a.Array[rr_a.Offset + 0] = r;
    rr_a.Array[rr_a.Offset + 1] = g;
    rr_a.Array[rr_a.Offset + 2] = b;
    rr_a.Array[rr_a.Offset + 3] = a;
    }
    public void AssignFromNumericArray(ref ArraySegment<byte> rr_a)
    {
    if(rr_a.Count < 4) throw new ArgumentException("ArraySegment invalid length");
    r = rr_a.Array[rr_a.Offset + 0];
    g = rr_a.Array[rr_a.Offset + 1];
    b = rr_a.Array[rr_a.Offset + 2];
    a = rr_a.Array[rr_a.Offset + 3];
    }
}

[NamedArrayElementTypeAndCount(typeof(ushort), 4)]
public struct ColorRGBAh
{
    public ushort r;
    public ushort g;
    public ushort b;
    public ushort a;
    public ushort[] GetNumericArray()
    {
    var a=new ArraySegment<ushort>(new ushort[4]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<ushort> rr_a)
    {
    if(rr_a.Count < 4) throw new ArgumentException("ArraySegment invalid length");
    rr_a.Array[rr_a.Offset + 0] = r;
    rr_a.Array[rr_a.Offset + 1] = g;
    rr_a.Array[rr_a.Offset + 2] = b;
    rr_a.Array[rr_a.Offset + 3] = a;
    }
    public void AssignFromNumericArray(ref ArraySegment<ushort> rr_a)
    {
    if(rr_a.Count < 4) throw new ArgumentException("ArraySegment invalid length");
    r = rr_a.Array[rr_a.Offset + 0];
    g = rr_a.Array[rr_a.Offset + 1];
    b = rr_a.Array[rr_a.Offset + 2];
    a = rr_a.Array[rr_a.Offset + 3];
    }
}

[NamedArrayElementTypeAndCount(typeof(double), 3)]
public struct ColorRGB
{
    public double r;
    public double g;
    public double b;
    public double[] GetNumericArray()
    {
    var a=new ArraySegment<double>(new double[3]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<double> rr_a)
    {
    if(rr_a.Count < 3) throw new ArgumentException("ArraySegment invalid length");
    rr_a.Array[rr_a.Offset + 0] = r;
    rr_a.Array[rr_a.Offset + 1] = g;
    rr_a.Array[rr_a.Offset + 2] = b;
    }
    public void AssignFromNumericArray(ref ArraySegment<double> rr_a)
    {
    if(rr_a.Count < 3) throw new ArgumentException("ArraySegment invalid length");
    r = rr_a.Array[rr_a.Offset + 0];
    g = rr_a.Array[rr_a.Offset + 1];
    b = rr_a.Array[rr_a.Offset + 2];
    }
}

[NamedArrayElementTypeAndCount(typeof(float), 3)]
public struct ColorRGBf
{
    public float r;
    public float g;
    public float b;
    public float[] GetNumericArray()
    {
    var a=new ArraySegment<float>(new float[3]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<float> rr_a)
    {
    if(rr_a.Count < 3) throw new ArgumentException("ArraySegment invalid length");
    rr_a.Array[rr_a.Offset + 0] = r;
    rr_a.Array[rr_a.Offset + 1] = g;
    rr_a.Array[rr_a.Offset + 2] = b;
    }
    public void AssignFromNumericArray(ref ArraySegment<float> rr_a)
    {
    if(rr_a.Count < 3) throw new ArgumentException("ArraySegment invalid length");
    r = rr_a.Array[rr_a.Offset + 0];
    g = rr_a.Array[rr_a.Offset + 1];
    b = rr_a.Array[rr_a.Offset + 2];
    }
}

[NamedArrayElementTypeAndCount(typeof(byte), 3)]
public struct ColorRGBu
{
    public byte r;
    public byte g;
    public byte b;
    public byte[] GetNumericArray()
    {
    var a=new ArraySegment<byte>(new byte[3]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<byte> rr_a)
    {
    if(rr_a.Count < 3) throw new ArgumentException("ArraySegment invalid length");
    rr_a.Array[rr_a.Offset + 0] = r;
    rr_a.Array[rr_a.Offset + 1] = g;
    rr_a.Array[rr_a.Offset + 2] = b;
    }
    public void AssignFromNumericArray(ref ArraySegment<byte> rr_a)
    {
    if(rr_a.Count < 3) throw new ArgumentException("ArraySegment invalid length");
    r = rr_a.Array[rr_a.Offset + 0];
    g = rr_a.Array[rr_a.Offset + 1];
    b = rr_a.Array[rr_a.Offset + 2];
    }
}

[NamedArrayElementTypeAndCount(typeof(ushort), 3)]
public struct ColorRGBh
{
    public ushort r;
    public ushort g;
    public ushort b;
    public ushort[] GetNumericArray()
    {
    var a=new ArraySegment<ushort>(new ushort[3]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<ushort> rr_a)
    {
    if(rr_a.Count < 3) throw new ArgumentException("ArraySegment invalid length");
    rr_a.Array[rr_a.Offset + 0] = r;
    rr_a.Array[rr_a.Offset + 1] = g;
    rr_a.Array[rr_a.Offset + 2] = b;
    }
    public void AssignFromNumericArray(ref ArraySegment<ushort> rr_a)
    {
    if(rr_a.Count < 3) throw new ArgumentException("ArraySegment invalid length");
    r = rr_a.Array[rr_a.Offset + 0];
    g = rr_a.Array[rr_a.Offset + 1];
    b = rr_a.Array[rr_a.Offset + 2];
    }
}

}
namespace com.robotraconteur.color
{
public class com__robotraconteur__colorFactory : ServiceFactory
{
    public override string DefString()
{
    const string s="service com.robotraconteur.color\n\nstdver 0.10\n\nnamedarray ColorRGBA\nfield double r\nfield double g\nfield double b\nfield double a\nend\n\nnamedarray ColorRGBAf\nfield single r\nfield single g\nfield single b\nfield single a\nend\n\nnamedarray ColorRGBAu\nfield uint8 r\nfield uint8 g\nfield uint8 b\nfield uint8 a\nend\n\nnamedarray ColorRGBAh\nfield uint16 r\nfield uint16 g\nfield uint16 b\nfield uint16 a\nend\n\nnamedarray ColorRGB\nfield double r\nfield double g\nfield double b\nend\n\nnamedarray ColorRGBf\nfield single r\nfield single g\nfield single b\nend\n\nnamedarray ColorRGBu\nfield uint8 r\nfield uint8 g\nfield uint8 b\nend\n\nnamedarray ColorRGBh\nfield uint16 r\nfield uint16 g\nfield uint16 b\nend\n\n";
    return s;
    }
    public override string GetServiceName() {return "com.robotraconteur.color";}
    public ColorRGBA_stub ColorRGBA_stubentry;
    public ColorRGBAf_stub ColorRGBAf_stubentry;
    public ColorRGBAu_stub ColorRGBAu_stubentry;
    public ColorRGBAh_stub ColorRGBAh_stubentry;
    public ColorRGB_stub ColorRGB_stubentry;
    public ColorRGBf_stub ColorRGBf_stubentry;
    public ColorRGBu_stub ColorRGBu_stubentry;
    public ColorRGBh_stub ColorRGBh_stubentry;
    public com__robotraconteur__colorFactory()
{
    ColorRGBA_stubentry=new ColorRGBA_stub();
    ColorRGBAf_stubentry=new ColorRGBAf_stub();
    ColorRGBAu_stubentry=new ColorRGBAu_stub();
    ColorRGBAh_stubentry=new ColorRGBAh_stub();
    ColorRGB_stubentry=new ColorRGB_stub();
    ColorRGBf_stubentry=new ColorRGBf_stub();
    ColorRGBu_stubentry=new ColorRGBu_stub();
    ColorRGBh_stubentry=new ColorRGBh_stub();
    }
    public override IStructureStub FindStructureStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public override IPodStub FindPodStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override INamedArrayStub FindNamedArrayStub(string objecttype)
    {
    if (objecttype=="ColorRGBA")    return ColorRGBA_stubentry;
    if (objecttype=="ColorRGBAf")    return ColorRGBAf_stubentry;
    if (objecttype=="ColorRGBAu")    return ColorRGBAu_stubentry;
    if (objecttype=="ColorRGBAh")    return ColorRGBAh_stubentry;
    if (objecttype=="ColorRGB")    return ColorRGB_stubentry;
    if (objecttype=="ColorRGBf")    return ColorRGBf_stubentry;
    if (objecttype=="ColorRGBu")    return ColorRGBu_stubentry;
    if (objecttype=="ColorRGBh")    return ColorRGBh_stubentry;
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override ServiceStub CreateStub(WrappedServiceStub innerstub) {
    string objecttype=innerstub.RR_objecttype.GetServiceDefinition().Name + "." + innerstub.RR_objecttype.Name;    string objshort;
    if (CompareNamespace(objecttype, out objshort)) {
    switch (objshort) {
    default:
    break;
    }
    } else {
    string ext_service_type=RobotRaconteurNode.SplitQualifiedName(objecttype).Item1;
    return RobotRaconteurNode.s.GetServiceType(ext_service_type).CreateStub(innerstub);
    }
    throw new ServiceException("Could not create stub");
    }
    public override ServiceSkel CreateSkel(object obj) {
    string objtype = RobotRaconteurNode.GetTypeString(ServiceSkelUtil.FindParentInterface(obj.GetType()));
    string objshort;
    if (CompareNamespace(objtype, out objshort)) {
    switch(objshort) {
    default:
    break;
    }
    } else {
    string ext_service_type=RobotRaconteurNode.SplitQualifiedName(objtype).Item1;
    return RobotRaconteurNode.s.GetServiceFactory(ext_service_type).CreateSkel(obj);
    }
    throw new ServiceException("Could not create skel");
    }
    public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp){
    if (rr_exp==null) return rr_exp;
    string rr_type=rr_exp.Error;
    if (!rr_type.Contains(".")) return rr_exp;
    string rr_stype;
    if (CompareNamespace(rr_type, out rr_stype)) {
    } else {
    return RobotRaconteurNode.s.DownCastException(rr_exp); 
    }
    return rr_exp;
    }
}

public class ColorRGBA_stub : NamedArrayStub<ColorRGBA,double> {
    public override double[] GetNumericArrayFromNamedArrayStruct(ref ColorRGBA s) {
    return s.GetNumericArray();
    }
    public override ColorRGBA GetNamedArrayStructFromNumericArray(double[] m) {
    if (m.Length != 4) throw new DataTypeException("Invalid namedarray array");
    var s = new ColorRGBA();
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override double[] GetNumericArrayFromNamedArray(ColorRGBA[] s) {
    return s.GetNumericArray();
    }
    public override ColorRGBA[] GetNamedArrayFromNumericArray(double[] m) {
    if (m.Length % 4 != 0) throw new DataTypeException("Invalid namedarray array");
    ColorRGBA[] s = new ColorRGBA[m.Length / 4];
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.color.ColorRGBA"; } }}

public class ColorRGBAf_stub : NamedArrayStub<ColorRGBAf,float> {
    public override float[] GetNumericArrayFromNamedArrayStruct(ref ColorRGBAf s) {
    return s.GetNumericArray();
    }
    public override ColorRGBAf GetNamedArrayStructFromNumericArray(float[] m) {
    if (m.Length != 4) throw new DataTypeException("Invalid namedarray array");
    var s = new ColorRGBAf();
    var a = new ArraySegment<float>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override float[] GetNumericArrayFromNamedArray(ColorRGBAf[] s) {
    return s.GetNumericArray();
    }
    public override ColorRGBAf[] GetNamedArrayFromNumericArray(float[] m) {
    if (m.Length % 4 != 0) throw new DataTypeException("Invalid namedarray array");
    ColorRGBAf[] s = new ColorRGBAf[m.Length / 4];
    var a = new ArraySegment<float>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.color.ColorRGBAf"; } }}

public class ColorRGBAu_stub : NamedArrayStub<ColorRGBAu,byte> {
    public override byte[] GetNumericArrayFromNamedArrayStruct(ref ColorRGBAu s) {
    return s.GetNumericArray();
    }
    public override ColorRGBAu GetNamedArrayStructFromNumericArray(byte[] m) {
    if (m.Length != 4) throw new DataTypeException("Invalid namedarray array");
    var s = new ColorRGBAu();
    var a = new ArraySegment<byte>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override byte[] GetNumericArrayFromNamedArray(ColorRGBAu[] s) {
    return s.GetNumericArray();
    }
    public override ColorRGBAu[] GetNamedArrayFromNumericArray(byte[] m) {
    if (m.Length % 4 != 0) throw new DataTypeException("Invalid namedarray array");
    ColorRGBAu[] s = new ColorRGBAu[m.Length / 4];
    var a = new ArraySegment<byte>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.color.ColorRGBAu"; } }}

public class ColorRGBAh_stub : NamedArrayStub<ColorRGBAh,ushort> {
    public override ushort[] GetNumericArrayFromNamedArrayStruct(ref ColorRGBAh s) {
    return s.GetNumericArray();
    }
    public override ColorRGBAh GetNamedArrayStructFromNumericArray(ushort[] m) {
    if (m.Length != 4) throw new DataTypeException("Invalid namedarray array");
    var s = new ColorRGBAh();
    var a = new ArraySegment<ushort>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override ushort[] GetNumericArrayFromNamedArray(ColorRGBAh[] s) {
    return s.GetNumericArray();
    }
    public override ColorRGBAh[] GetNamedArrayFromNumericArray(ushort[] m) {
    if (m.Length % 4 != 0) throw new DataTypeException("Invalid namedarray array");
    ColorRGBAh[] s = new ColorRGBAh[m.Length / 4];
    var a = new ArraySegment<ushort>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.color.ColorRGBAh"; } }}

public class ColorRGB_stub : NamedArrayStub<ColorRGB,double> {
    public override double[] GetNumericArrayFromNamedArrayStruct(ref ColorRGB s) {
    return s.GetNumericArray();
    }
    public override ColorRGB GetNamedArrayStructFromNumericArray(double[] m) {
    if (m.Length != 3) throw new DataTypeException("Invalid namedarray array");
    var s = new ColorRGB();
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override double[] GetNumericArrayFromNamedArray(ColorRGB[] s) {
    return s.GetNumericArray();
    }
    public override ColorRGB[] GetNamedArrayFromNumericArray(double[] m) {
    if (m.Length % 3 != 0) throw new DataTypeException("Invalid namedarray array");
    ColorRGB[] s = new ColorRGB[m.Length / 3];
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.color.ColorRGB"; } }}

public class ColorRGBf_stub : NamedArrayStub<ColorRGBf,float> {
    public override float[] GetNumericArrayFromNamedArrayStruct(ref ColorRGBf s) {
    return s.GetNumericArray();
    }
    public override ColorRGBf GetNamedArrayStructFromNumericArray(float[] m) {
    if (m.Length != 3) throw new DataTypeException("Invalid namedarray array");
    var s = new ColorRGBf();
    var a = new ArraySegment<float>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override float[] GetNumericArrayFromNamedArray(ColorRGBf[] s) {
    return s.GetNumericArray();
    }
    public override ColorRGBf[] GetNamedArrayFromNumericArray(float[] m) {
    if (m.Length % 3 != 0) throw new DataTypeException("Invalid namedarray array");
    ColorRGBf[] s = new ColorRGBf[m.Length / 3];
    var a = new ArraySegment<float>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.color.ColorRGBf"; } }}

public class ColorRGBu_stub : NamedArrayStub<ColorRGBu,byte> {
    public override byte[] GetNumericArrayFromNamedArrayStruct(ref ColorRGBu s) {
    return s.GetNumericArray();
    }
    public override ColorRGBu GetNamedArrayStructFromNumericArray(byte[] m) {
    if (m.Length != 3) throw new DataTypeException("Invalid namedarray array");
    var s = new ColorRGBu();
    var a = new ArraySegment<byte>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override byte[] GetNumericArrayFromNamedArray(ColorRGBu[] s) {
    return s.GetNumericArray();
    }
    public override ColorRGBu[] GetNamedArrayFromNumericArray(byte[] m) {
    if (m.Length % 3 != 0) throw new DataTypeException("Invalid namedarray array");
    ColorRGBu[] s = new ColorRGBu[m.Length / 3];
    var a = new ArraySegment<byte>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.color.ColorRGBu"; } }}

public class ColorRGBh_stub : NamedArrayStub<ColorRGBh,ushort> {
    public override ushort[] GetNumericArrayFromNamedArrayStruct(ref ColorRGBh s) {
    return s.GetNumericArray();
    }
    public override ColorRGBh GetNamedArrayStructFromNumericArray(ushort[] m) {
    if (m.Length != 3) throw new DataTypeException("Invalid namedarray array");
    var s = new ColorRGBh();
    var a = new ArraySegment<ushort>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override ushort[] GetNumericArrayFromNamedArray(ColorRGBh[] s) {
    return s.GetNumericArray();
    }
    public override ColorRGBh[] GetNamedArrayFromNumericArray(ushort[] m) {
    if (m.Length % 3 != 0) throw new DataTypeException("Invalid namedarray array");
    ColorRGBh[] s = new ColorRGBh[m.Length / 3];
    var a = new ArraySegment<ushort>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.color.ColorRGBh"; } }}

public static class RRExtensions{
    public static double[] GetNumericArray(this ColorRGBA[] s)
    {
    var a=new ArraySegment<double>(new double[4 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this ColorRGBA[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 4 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 4*i,4);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this ColorRGBA[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 4 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 4*i,4);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static float[] GetNumericArray(this ColorRGBAf[] s)
    {
    var a=new ArraySegment<float>(new float[4 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this ColorRGBAf[] s, ref ArraySegment<float> a)
    {
    if(a.Count < 4 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<float>(a.Array, a.Offset + 4*i,4);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this ColorRGBAf[] s, ref ArraySegment<float> a)
    {
    if(a.Count < 4 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<float>(a.Array, a.Offset + 4*i,4);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static byte[] GetNumericArray(this ColorRGBAu[] s)
    {
    var a=new ArraySegment<byte>(new byte[4 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this ColorRGBAu[] s, ref ArraySegment<byte> a)
    {
    if(a.Count < 4 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<byte>(a.Array, a.Offset + 4*i,4);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this ColorRGBAu[] s, ref ArraySegment<byte> a)
    {
    if(a.Count < 4 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<byte>(a.Array, a.Offset + 4*i,4);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static ushort[] GetNumericArray(this ColorRGBAh[] s)
    {
    var a=new ArraySegment<ushort>(new ushort[4 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this ColorRGBAh[] s, ref ArraySegment<ushort> a)
    {
    if(a.Count < 4 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<ushort>(a.Array, a.Offset + 4*i,4);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this ColorRGBAh[] s, ref ArraySegment<ushort> a)
    {
    if(a.Count < 4 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<ushort>(a.Array, a.Offset + 4*i,4);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static double[] GetNumericArray(this ColorRGB[] s)
    {
    var a=new ArraySegment<double>(new double[3 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this ColorRGB[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 3 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 3*i,3);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this ColorRGB[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 3 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 3*i,3);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static float[] GetNumericArray(this ColorRGBf[] s)
    {
    var a=new ArraySegment<float>(new float[3 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this ColorRGBf[] s, ref ArraySegment<float> a)
    {
    if(a.Count < 3 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<float>(a.Array, a.Offset + 3*i,3);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this ColorRGBf[] s, ref ArraySegment<float> a)
    {
    if(a.Count < 3 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<float>(a.Array, a.Offset + 3*i,3);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static byte[] GetNumericArray(this ColorRGBu[] s)
    {
    var a=new ArraySegment<byte>(new byte[3 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this ColorRGBu[] s, ref ArraySegment<byte> a)
    {
    if(a.Count < 3 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<byte>(a.Array, a.Offset + 3*i,3);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this ColorRGBu[] s, ref ArraySegment<byte> a)
    {
    if(a.Count < 3 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<byte>(a.Array, a.Offset + 3*i,3);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static ushort[] GetNumericArray(this ColorRGBh[] s)
    {
    var a=new ArraySegment<ushort>(new ushort[3 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this ColorRGBh[] s, ref ArraySegment<ushort> a)
    {
    if(a.Count < 3 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<ushort>(a.Array, a.Offset + 3*i,3);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this ColorRGBh[] s, ref ArraySegment<ushort> a)
    {
    if(a.Count < 3 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<ushort>(a.Array, a.Offset + 3*i,3);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
}
}
namespace com.robotraconteur.datatype
{
public class DataType
{
    public string name;
    public DataTypeCode type_code;
    public string type_string;
    public ArrayTypeCode array_type_code;
    public bool array_var_len;
    public uint[] array_len;
    public ContainerTypeCode container_type_code;
}

public static class com__robotraconteur__datatypeConstants 
{
}
    public enum DataTypeCode
    {
    void_c = 0,
    double_c = 1,
    single_c = 2,
    int8_c = 3,
    uint8_c = 4,
    int16_c = 5,
    uint16_c = 6,
    int32_c = 7,
    uint32_c = 8,
    int64_c = 9,
    uint64_c = 10,
    string_c = 11,
    cdouble_c = 12,
    csingle_c = 13,
    bool_c = 14,
    structure_c = 101,
    vector_c = 102,
    dictionary_c = 103,
    object_c = 104,
    varvalue_c = 105,
    varobject_c = 106,
    list_c = 108,
    pod_c = 109,
    pod_array_c = 110,
    pod_multidimarray_c = 111,
    enum_c = 112,
    namedtype_c = 113,
    namedarray_c = 114,
    namedarray_array_c = 115,
    namedarray_multidimarray_c = 116,
    multidimarray_c = 117
    };
    public enum ArrayTypeCode
    {
    none_c = 0,
    array_c = 1,
    multidimarray_c = 2
    };
    public enum ContainerTypeCode
    {
    none_c = 0,
    list_c = 1,
    map_int32_c = 2,
    map_string_c = 3,
    generator_c = 4
    };
}
namespace com.robotraconteur.datatype
{
public class com__robotraconteur__datatypeFactory : ServiceFactory
{
    public override string DefString()
{
    const string s="service com.robotraconteur.datatype\n\nstdver 0.10\n\nenum DataTypeCode\nvoid_c = 0,\ndouble_c,\nsingle_c,\nint8_c,\nuint8_c,\nint16_c,\nuint16_c,\nint32_c,\nuint32_c,\nint64_c,\nuint64_c,\nstring_c,\ncdouble_c,\ncsingle_c,\nbool_c,\nstructure_c = 101,\nvector_c,\ndictionary_c,\nobject_c,\nvarvalue_c,\nvarobject_c,\nlist_c = 108,\npod_c,\npod_array_c,\npod_multidimarray_c,\nenum_c,\nnamedtype_c,\nnamedarray_c,\nnamedarray_array_c,\nnamedarray_multidimarray_c,\nmultidimarray_c\nend\n\nenum ArrayTypeCode\nnone_c = 0,\narray_c,\nmultidimarray_c\nend\n\nenum ContainerTypeCode\nnone_c = 0,\nlist_c,\nmap_int32_c,\nmap_string_c,\ngenerator_c\nend\n\nstruct DataType\nfield string name\nfield DataTypeCode type_code\nfield string type_string\nfield ArrayTypeCode array_type_code\nfield bool array_var_len\nfield uint32[] array_len\nfield ContainerTypeCode container_type_code\nend\n\n";
    return s;
    }
    public override string GetServiceName() {return "com.robotraconteur.datatype";}
    public DataType_stub DataType_stubentry;
    public com__robotraconteur__datatypeFactory()
{
    DataType_stubentry=new DataType_stub(this);
    }
    public override IStructureStub FindStructureStub(string objecttype)
    {
    if (objecttype=="DataType")    return DataType_stubentry;
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public override IPodStub FindPodStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override INamedArrayStub FindNamedArrayStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override ServiceStub CreateStub(WrappedServiceStub innerstub) {
    string objecttype=innerstub.RR_objecttype.GetServiceDefinition().Name + "." + innerstub.RR_objecttype.Name;    string objshort;
    if (CompareNamespace(objecttype, out objshort)) {
    switch (objshort) {
    default:
    break;
    }
    } else {
    string ext_service_type=RobotRaconteurNode.SplitQualifiedName(objecttype).Item1;
    return RobotRaconteurNode.s.GetServiceType(ext_service_type).CreateStub(innerstub);
    }
    throw new ServiceException("Could not create stub");
    }
    public override ServiceSkel CreateSkel(object obj) {
    string objtype = RobotRaconteurNode.GetTypeString(ServiceSkelUtil.FindParentInterface(obj.GetType()));
    string objshort;
    if (CompareNamespace(objtype, out objshort)) {
    switch(objshort) {
    default:
    break;
    }
    } else {
    string ext_service_type=RobotRaconteurNode.SplitQualifiedName(objtype).Item1;
    return RobotRaconteurNode.s.GetServiceFactory(ext_service_type).CreateSkel(obj);
    }
    throw new ServiceException("Could not create skel");
    }
    public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp){
    if (rr_exp==null) return rr_exp;
    string rr_type=rr_exp.Error;
    if (!rr_type.Contains(".")) return rr_exp;
    string rr_stype;
    if (CompareNamespace(rr_type, out rr_stype)) {
    } else {
    return RobotRaconteurNode.s.DownCastException(rr_exp); 
    }
    return rr_exp;
    }
}

public class DataType_stub : IStructureStub {
    public DataType_stub(com__robotraconteur__datatypeFactory d) {def=d;}
    private com__robotraconteur__datatypeFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    DataType s = (DataType)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackString("name",s.name));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackEnum<DataTypeCode>("type_code",s.type_code));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackString("type_string",s.type_string));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackEnum<ArrayTypeCode>("array_type_code",s.array_type_code));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<bool>("array_var_len",s.array_var_len));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackArray<uint>("array_len",s.array_len));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackEnum<ContainerTypeCode>("container_type_code",s.container_type_code));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.datatype.DataType",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    DataType s=new DataType();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.name =MessageElementUtil.UnpackString(MessageElement.FindElement(mm,"name"));
    s.type_code =MessageElementUtil.UnpackEnum<DataTypeCode>(MessageElement.FindElement(mm,"type_code"));
    s.type_string =MessageElementUtil.UnpackString(MessageElement.FindElement(mm,"type_string"));
    s.array_type_code =MessageElementUtil.UnpackEnum<ArrayTypeCode>(MessageElement.FindElement(mm,"array_type_code"));
    s.array_var_len =(MessageElementUtil.UnpackScalar<bool>(MessageElement.FindElement(mm,"array_var_len")));
    s.array_len =MessageElementUtil.UnpackArray<uint>(MessageElement.FindElement(mm,"array_len"));
    s.container_type_code =MessageElementUtil.UnpackEnum<ContainerTypeCode>(MessageElement.FindElement(mm,"container_type_code"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public static class RRExtensions{
}
}
namespace com.robotraconteur.datetime.clock
{
public class ClockDeviceInfo
{
    public com.robotraconteur.device.DeviceInfo device_info;
    public com.robotraconteur.datetime.ClockTypeCode clock_type;
    public int timezone_utc_offset_seconds;
    public string timezone_name;
    public Dictionary<string,object> extended;
}

[RobotRaconteurServiceObjectInterface()]
public interface Clock : com.robotraconteur.device.Device, com.robotraconteur.device.clock.DeviceClock
{
    com.robotraconteur.device.DeviceInfo device_info { get; 	}
    ClockDeviceInfo clock_info { get; 	}
    Wire<com.robotraconteur.datetime.DateTimeUTC> time_utc{ get; set; }
    Wire<com.robotraconteur.datetime.DateTimeLocal> time_local{ get; set; }
    Wire<com.robotraconteur.device.clock.DeviceTime> device_clock_now{ get; set; }
}

}
namespace com.robotraconteur.datetime.clock
{
public class com__robotraconteur__datetime__clockFactory : ServiceFactory
{
    public override string DefString()
{
    const string s="service com.robotraconteur.datetime.clock\n\nstdver 0.10\n\nimport com.robotraconteur.datetime\nimport com.robotraconteur.device\nimport com.robotraconteur.device.clock\n\nusing com.robotraconteur.datetime.DateTimeUTC\nusing com.robotraconteur.datetime.DateTimeLocal\nusing com.robotraconteur.datetime.ClockTypeCode\nusing com.robotraconteur.device.DeviceInfo\nusing com.robotraconteur.device.Device\nusing com.robotraconteur.device.clock.DeviceClock\nusing com.robotraconteur.device.clock.DeviceTime\n\nstruct ClockDeviceInfo\nfield DeviceInfo device_info\nfield ClockTypeCode clock_type\nfield int32 timezone_utc_offset_seconds\nfield string timezone_name\nfield varvalue{string} extended\nend\n\nobject Clock\nimplements Device\nimplements DeviceClock\nproperty DeviceInfo device_info [readonly,nolock]\nproperty ClockDeviceInfo clock_info [readonly,nolock]\nwire DateTimeUTC time_utc [readonly]\nwire DateTimeLocal time_local [readonly]\n# Optional device clock\nwire DeviceTime device_clock_now [readonly,nolock]\nend\n\n";
    return s;
    }
    public override string GetServiceName() {return "com.robotraconteur.datetime.clock";}
    public ClockDeviceInfo_stub ClockDeviceInfo_stubentry;
    public com__robotraconteur__datetime__clockFactory()
{
    ClockDeviceInfo_stubentry=new ClockDeviceInfo_stub(this);
    }
    public override IStructureStub FindStructureStub(string objecttype)
    {
    if (objecttype=="ClockDeviceInfo")    return ClockDeviceInfo_stubentry;
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public override IPodStub FindPodStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override INamedArrayStub FindNamedArrayStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override ServiceStub CreateStub(WrappedServiceStub innerstub) {
    string objecttype=innerstub.RR_objecttype.GetServiceDefinition().Name + "." + innerstub.RR_objecttype.Name;    string objshort;
    if (CompareNamespace(objecttype, out objshort)) {
    switch (objshort) {
    case "Clock":
    return new Clock_stub(innerstub);
    default:
    break;
    }
    } else {
    string ext_service_type=RobotRaconteurNode.SplitQualifiedName(objecttype).Item1;
    return RobotRaconteurNode.s.GetServiceType(ext_service_type).CreateStub(innerstub);
    }
    throw new ServiceException("Could not create stub");
    }
    public override ServiceSkel CreateSkel(object obj) {
    string objtype = RobotRaconteurNode.GetTypeString(ServiceSkelUtil.FindParentInterface(obj.GetType()));
    string objshort;
    if (CompareNamespace(objtype, out objshort)) {
    switch(objshort) {
    case "Clock":
    return new Clock_skel((Clock)obj);
    default:
    break;
    }
    } else {
    string ext_service_type=RobotRaconteurNode.SplitQualifiedName(objtype).Item1;
    return RobotRaconteurNode.s.GetServiceFactory(ext_service_type).CreateSkel(obj);
    }
    throw new ServiceException("Could not create skel");
    }
    public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp){
    if (rr_exp==null) return rr_exp;
    string rr_type=rr_exp.Error;
    if (!rr_type.Contains(".")) return rr_exp;
    string rr_stype;
    if (CompareNamespace(rr_type, out rr_stype)) {
    } else {
    return RobotRaconteurNode.s.DownCastException(rr_exp); 
    }
    return rr_exp;
    }
}

public class ClockDeviceInfo_stub : IStructureStub {
    public ClockDeviceInfo_stub(com__robotraconteur__datetime__clockFactory d) {def=d;}
    private com__robotraconteur__datetime__clockFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    ClockDeviceInfo s = (ClockDeviceInfo)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("device_info",s.device_info));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackEnum<com.robotraconteur.datetime.ClockTypeCode>("clock_type",s.clock_type));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<int>("timezone_utc_offset_seconds",s.timezone_utc_offset_seconds));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackString("timezone_name",s.timezone_name));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackMapType<string,object>("extended",s.extended));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.datetime.clock.ClockDeviceInfo",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    ClockDeviceInfo s=new ClockDeviceInfo();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.device_info =MessageElementUtil.UnpackStructure<com.robotraconteur.device.DeviceInfo>(MessageElement.FindElement(mm,"device_info"));
    s.clock_type =MessageElementUtil.UnpackEnum<com.robotraconteur.datetime.ClockTypeCode>(MessageElement.FindElement(mm,"clock_type"));
    s.timezone_utc_offset_seconds =(MessageElementUtil.UnpackScalar<int>(MessageElement.FindElement(mm,"timezone_utc_offset_seconds")));
    s.timezone_name =MessageElementUtil.UnpackString(MessageElement.FindElement(mm,"timezone_name"));
    s.extended =MessageElementUtil.UnpackMap<string,object>(MessageElement.FindElement(mm,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public interface async_Clock : com.robotraconteur.device.async_Device, com.robotraconteur.device.clock.async_DeviceClock
{
    Task<com.robotraconteur.device.DeviceInfo> async_get_device_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<ClockDeviceInfo> async_get_clock_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
}
public class Clock_stub : ServiceStub , Clock, async_Clock{
    private Wire<com.robotraconteur.datetime.DateTimeUTC> rr_time_utc;
    private Wire<com.robotraconteur.datetime.DateTimeLocal> rr_time_local;
    private Wire<com.robotraconteur.device.clock.DeviceTime> rr_device_clock_now;
    public Clock_stub(WrappedServiceStub innerstub) : base(innerstub) {
    rr_time_utc=new Wire<com.robotraconteur.datetime.DateTimeUTC>(innerstub.GetWire("time_utc"));
    rr_time_local=new Wire<com.robotraconteur.datetime.DateTimeLocal>(innerstub.GetWire("time_local"));
    rr_device_clock_now=new Wire<com.robotraconteur.device.clock.DeviceTime>(innerstub.GetWire("device_clock_now"));
    }
    public com.robotraconteur.device.DeviceInfo device_info {
    get {
    return MessageElementUtil.UnpackStructure<com.robotraconteur.device.DeviceInfo>(rr_innerstub.PropertyGet("device_info"));
    }
    }
    public ClockDeviceInfo clock_info {
    get {
    return MessageElementUtil.UnpackStructure<ClockDeviceInfo>(rr_innerstub.PropertyGet("clock_info"));
    }
    }
    public override void DispatchEvent(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    }
    public Wire<com.robotraconteur.datetime.DateTimeUTC> time_utc {
    get { return rr_time_utc;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<com.robotraconteur.datetime.DateTimeLocal> time_local {
    get { return rr_time_local;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<com.robotraconteur.device.clock.DeviceTime> device_clock_now {
    get { return rr_device_clock_now;  }
    set { throw new InvalidOperationException();}
    }
    public override MessageElement CallbackCall(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public virtual async Task<com.robotraconteur.device.DeviceInfo> async_get_device_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("device_info",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<com.robotraconteur.device.DeviceInfo>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<ClockDeviceInfo> async_get_clock_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("clock_info",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<ClockDeviceInfo>(rr_value);
    return rr_ret;
    } }
}
public class Clock_skel : ServiceSkel {
    protected Clock obj;
    protected async_Clock async_obj;
    public Clock_skel(object o) : base(o)    {
    obj=(Clock)o;
    async_obj = o as async_Clock;
    }
    public override void ReleaseCastObject() { 
    obj=null;
    async_obj=null;
    base.ReleaseCastObject();
    }
    public override MessageElement CallGetProperty(string membername, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    case "device_info":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_device_info().ContinueWith(t => async_adapter.EndTask<com.robotraconteur.device.DeviceInfo>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    com.robotraconteur.device.DeviceInfo ret=obj.device_info;
    return MessageElementUtil.PackStructure("return",ret);
    }
    case "clock_info":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_clock_info().ContinueWith(t => async_adapter.EndTask<ClockDeviceInfo>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    ClockDeviceInfo ret=obj.clock_info;
    return MessageElementUtil.PackStructure("return",ret);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void CallSetProperty(string membername, MessageElement m, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override MessageElement CallFunction(string rr_membername, vectorptr_messageelement rr_m, WrappedServiceSkelAsyncAdapter rr_async_adapter) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override object GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(Clock)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(Clock)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void InitPipeServers(object rrobj1) {
    obj=(Clock)rrobj1;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(Clock)rrobj1;
    }
    public override void InitWireServers(object rrobj1) {
    obj=(Clock)rrobj1;
    obj.time_utc=new Wire<com.robotraconteur.datetime.DateTimeUTC>(innerskel.GetWire("time_utc"));
    obj.time_local=new Wire<com.robotraconteur.datetime.DateTimeLocal>(innerskel.GetWire("time_local"));
    obj.device_clock_now=new Wire<com.robotraconteur.device.clock.DeviceTime>(innerskel.GetWire("device_clock_now"));
    }
    public override WrappedArrayMemoryDirector GetArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedMultiDimArrayMemoryDirector GetMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodArrayMemoryDirector GetPodArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodMultiDimArrayMemoryDirector GetPodMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedArrayMemoryDirector GetNamedArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedMultiDimArrayMemoryDirector GetNamedMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override string RRType { get { return "com.robotraconteur.datetime.clock.Clock"; } }
}
public class Clock_default_impl : Clock{
    protected WireBroadcaster<com.robotraconteur.datetime.DateTimeUTC> rrvar_time_utc;
    protected WireBroadcaster<com.robotraconteur.datetime.DateTimeLocal> rrvar_time_local;
    protected WireBroadcaster<com.robotraconteur.device.clock.DeviceTime> rrvar_device_clock_now;
    public virtual com.robotraconteur.device.DeviceInfo device_info {get; set;} = default(com.robotraconteur.device.DeviceInfo);
    public virtual ClockDeviceInfo clock_info {get; set;} = default(ClockDeviceInfo);
    public virtual Wire<com.robotraconteur.datetime.DateTimeUTC> time_utc {
    get { return rrvar_time_utc.Wire;  }
    set {
    if (rrvar_time_utc!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_time_utc= new WireBroadcaster<com.robotraconteur.datetime.DateTimeUTC>(value);
    }
    }
    public virtual Wire<com.robotraconteur.datetime.DateTimeLocal> time_local {
    get { return rrvar_time_local.Wire;  }
    set {
    if (rrvar_time_local!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_time_local= new WireBroadcaster<com.robotraconteur.datetime.DateTimeLocal>(value);
    }
    }
    public virtual Wire<com.robotraconteur.device.clock.DeviceTime> device_clock_now {
    get { return rrvar_device_clock_now.Wire;  }
    set {
    if (rrvar_device_clock_now!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_device_clock_now= new WireBroadcaster<com.robotraconteur.device.clock.DeviceTime>(value);
    }
    }
}
public static class RRExtensions{
}
}
namespace com.robotraconteur.datetime
{
public class DateTimeLocal
{
    public ClockInfo clock_info;
    public long seconds;
    public int nanoseconds;
    public int utc_offset_seconds;
    public string timezone_name;
}

[NamedArrayElementTypeAndCount(typeof(long), 1)]
public struct TimeSpec3
{
    public long microseconds;
    public long[] GetNumericArray()
    {
    var a=new ArraySegment<long>(new long[1]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<long> rr_a)
    {
    if(rr_a.Count < 1) throw new ArgumentException("ArraySegment invalid length");
    rr_a.Array[rr_a.Offset + 0] = microseconds;
    }
    public void AssignFromNumericArray(ref ArraySegment<long> rr_a)
    {
    if(rr_a.Count < 1) throw new ArgumentException("ArraySegment invalid length");
    microseconds = rr_a.Array[rr_a.Offset + 0];
    }
}

public struct ClockInfo
{
    public uint clock_type;
    public com.robotraconteur.uuid.UUID clock_uuid;
    public long offset_microseconds;
}

public struct DateTimeUTC
{
    public ClockInfo clock_info;
    public long seconds;
    public int nanoseconds;
}

public struct Duration
{
    public ClockInfo clock_info;
    public long seconds;
    public int nanoseconds;
}

public struct TimeSpec2
{
    public ClockInfo clock_info;
    public long seconds;
    public int nanoseconds;
}

public static class com__robotraconteur__datetimeConstants 
{
    public const string EPOCH_ISO8601="1970-01-01T00:00:00Z";
}
    public enum ClockTypeCode
    {
    unknown = 0,
    default_ = 1,
    system_rtc_clock = 2,
    system_ntp_clock = 3,
    system_ptp_clock = 4,
    system_arb_clock = 5,
    system_gps_clock = 6,
    system_tai_clock = 7,
    system_other_clock = 8,
    sim_clock_realtime = 9,
    sim_clock_scaled = 10,
    node_default = 11,
    node_rtc_clock = 12,
    node_ntp_clock = 13,
    node_ptp_clock = 14,
    node_arb_clock = 15,
    node_gps_clock = 16,
    node_tai_clock = 17,
    node_other_clock = 18,
    aux_0 = 0x1000,
    aux_1 = 0x1001,
    aux_2 = 0x1002,
    aux_3 = 0x1003,
    aux_4 = 0x1004,
    aux_5 = 0x1005,
    aux_6 = 0x1006,
    aux_7 = 0x1007
    };
}
namespace com.robotraconteur.datetime
{
public class com__robotraconteur__datetimeFactory : ServiceFactory
{
    public override string DefString()
{
    const string s="service com.robotraconteur.datetime\n\nstdver 0.10\n\nimport com.robotraconteur.uuid\nusing com.robotraconteur.uuid.UUID\n\nconstant string EPOCH_ISO8601 \"1970-01-01T00:00:00Z\"\n\nenum ClockTypeCode\nunknown = 0,\ndefault,\nsystem_rtc_clock,\nsystem_ntp_clock,\nsystem_ptp_clock,\nsystem_arb_clock,\nsystem_gps_clock,\nsystem_tai_clock,\nsystem_other_clock,\nsim_clock_realtime,\nsim_clock_scaled,\nnode_default,\nnode_rtc_clock,\nnode_ntp_clock,\nnode_ptp_clock,\nnode_arb_clock,\nnode_gps_clock,\nnode_tai_clock,\nnode_other_clock,\naux_0 = 0x1000,\naux_1,\naux_2,\naux_3,\naux_4,\naux_5,\naux_6,\naux_7\nend\n\npod ClockInfo\nfield uint32 clock_type\nfield UUID clock_uuid\n# Offset from TAI time\nfield int64 offset_microseconds\nend\n\npod DateTimeUTC\nfield ClockInfo clock_info\nfield int64 seconds\nfield int32 nanoseconds\nend\n\nstruct DateTimeLocal\nfield ClockInfo clock_info\nfield int64 seconds\nfield int32 nanoseconds\nfield int32 utc_offset_seconds\nfield string timezone_name\nend\n\npod Duration\nfield ClockInfo clock_info\nfield int64 seconds\nfield int32 nanoseconds\nend\n\n# TimeSpec2 in Node Clock\npod TimeSpec2\nfield ClockInfo clock_info\nfield int64 seconds\nfield int32 nanoseconds\nend\n\n# Compact TimeSpec3 in Node Clock\nnamedarray TimeSpec3\nfield int64 microseconds\nend\n\n";
    return s;
    }
    public override string GetServiceName() {return "com.robotraconteur.datetime";}
    public DateTimeLocal_stub DateTimeLocal_stubentry;
    public ClockInfo_stub ClockInfo_stubentry;
    public DateTimeUTC_stub DateTimeUTC_stubentry;
    public Duration_stub Duration_stubentry;
    public TimeSpec2_stub TimeSpec2_stubentry;
    public TimeSpec3_stub TimeSpec3_stubentry;
    public com__robotraconteur__datetimeFactory()
{
    DateTimeLocal_stubentry=new DateTimeLocal_stub(this);
    ClockInfo_stubentry=new ClockInfo_stub(this);
    DateTimeUTC_stubentry=new DateTimeUTC_stub(this);
    Duration_stubentry=new Duration_stub(this);
    TimeSpec2_stubentry=new TimeSpec2_stub(this);
    TimeSpec3_stubentry=new TimeSpec3_stub();
    }
    public override IStructureStub FindStructureStub(string objecttype)
    {
    if (objecttype=="DateTimeLocal")    return DateTimeLocal_stubentry;
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public override IPodStub FindPodStub(string objecttype)
    {
    if (objecttype=="ClockInfo")    return ClockInfo_stubentry;
    if (objecttype=="DateTimeUTC")    return DateTimeUTC_stubentry;
    if (objecttype=="Duration")    return Duration_stubentry;
    if (objecttype=="TimeSpec2")    return TimeSpec2_stubentry;
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override INamedArrayStub FindNamedArrayStub(string objecttype)
    {
    if (objecttype=="TimeSpec3")    return TimeSpec3_stubentry;
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override ServiceStub CreateStub(WrappedServiceStub innerstub) {
    string objecttype=innerstub.RR_objecttype.GetServiceDefinition().Name + "." + innerstub.RR_objecttype.Name;    string objshort;
    if (CompareNamespace(objecttype, out objshort)) {
    switch (objshort) {
    default:
    break;
    }
    } else {
    string ext_service_type=RobotRaconteurNode.SplitQualifiedName(objecttype).Item1;
    return RobotRaconteurNode.s.GetServiceType(ext_service_type).CreateStub(innerstub);
    }
    throw new ServiceException("Could not create stub");
    }
    public override ServiceSkel CreateSkel(object obj) {
    string objtype = RobotRaconteurNode.GetTypeString(ServiceSkelUtil.FindParentInterface(obj.GetType()));
    string objshort;
    if (CompareNamespace(objtype, out objshort)) {
    switch(objshort) {
    default:
    break;
    }
    } else {
    string ext_service_type=RobotRaconteurNode.SplitQualifiedName(objtype).Item1;
    return RobotRaconteurNode.s.GetServiceFactory(ext_service_type).CreateSkel(obj);
    }
    throw new ServiceException("Could not create skel");
    }
    public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp){
    if (rr_exp==null) return rr_exp;
    string rr_type=rr_exp.Error;
    if (!rr_type.Contains(".")) return rr_exp;
    string rr_stype;
    if (CompareNamespace(rr_type, out rr_stype)) {
    } else {
    return RobotRaconteurNode.s.DownCastException(rr_exp); 
    }
    return rr_exp;
    }
}

public class DateTimeLocal_stub : IStructureStub {
    public DateTimeLocal_stub(com__robotraconteur__datetimeFactory d) {def=d;}
    private com__robotraconteur__datetimeFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    DateTimeLocal s = (DateTimeLocal)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackPodToArray<ClockInfo>("clock_info",ref s.clock_info));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<long>("seconds",s.seconds));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<int>("nanoseconds",s.nanoseconds));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<int>("utc_offset_seconds",s.utc_offset_seconds));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackString("timezone_name",s.timezone_name));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.datetime.DateTimeLocal",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    DateTimeLocal s=new DateTimeLocal();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.clock_info =MessageElementUtil.UnpackPodFromArray<ClockInfo>(MessageElement.FindElement(mm,"clock_info"));
    s.seconds =(MessageElementUtil.UnpackScalar<long>(MessageElement.FindElement(mm,"seconds")));
    s.nanoseconds =(MessageElementUtil.UnpackScalar<int>(MessageElement.FindElement(mm,"nanoseconds")));
    s.utc_offset_seconds =(MessageElementUtil.UnpackScalar<int>(MessageElement.FindElement(mm,"utc_offset_seconds")));
    s.timezone_name =MessageElementUtil.UnpackString(MessageElement.FindElement(mm,"timezone_name"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class ClockInfo_stub : PodStub<ClockInfo> {
    public ClockInfo_stub(com__robotraconteur__datetimeFactory d) {def=d;}
    private com__robotraconteur__datetimeFactory def;
    public override MessageElementNestedElementList PackPod(ref ClockInfo s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    ClockInfo s = (ClockInfo)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<uint>("clock_type",s.clock_type));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.uuid.UUID>("clock_uuid",ref s.clock_uuid));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<long>("offset_microseconds",s.offset_microseconds));
    return new MessageElementNestedElementList(DataTypes.pod_t,"",m);
    }
    }
    public override ClockInfo UnpackPod(MessageElementNestedElementList m) {
    if (m == null ) throw new NullReferenceException("Pod must not be null");
    using(vectorptr_messageelement mm=m.Elements)
    {
    ClockInfo s = new ClockInfo();
    s.clock_type =(MessageElementUtil.UnpackScalar<uint>(MessageElement.FindElement(mm,"clock_type")));
    s.clock_uuid =MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.uuid.UUID>(MessageElement.FindElement(mm,"clock_uuid"));
    s.offset_microseconds =(MessageElementUtil.UnpackScalar<long>(MessageElement.FindElement(mm,"offset_microseconds")));
    return s;
    }
    }
    public override string TypeName { get { return "com.robotraconteur.datetime.ClockInfo"; } }}

public class DateTimeUTC_stub : PodStub<DateTimeUTC> {
    public DateTimeUTC_stub(com__robotraconteur__datetimeFactory d) {def=d;}
    private com__robotraconteur__datetimeFactory def;
    public override MessageElementNestedElementList PackPod(ref DateTimeUTC s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    DateTimeUTC s = (DateTimeUTC)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackPodToArray<ClockInfo>("clock_info",ref s.clock_info));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<long>("seconds",s.seconds));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<int>("nanoseconds",s.nanoseconds));
    return new MessageElementNestedElementList(DataTypes.pod_t,"",m);
    }
    }
    public override DateTimeUTC UnpackPod(MessageElementNestedElementList m) {
    if (m == null ) throw new NullReferenceException("Pod must not be null");
    using(vectorptr_messageelement mm=m.Elements)
    {
    DateTimeUTC s = new DateTimeUTC();
    s.clock_info =MessageElementUtil.UnpackPodFromArray<ClockInfo>(MessageElement.FindElement(mm,"clock_info"));
    s.seconds =(MessageElementUtil.UnpackScalar<long>(MessageElement.FindElement(mm,"seconds")));
    s.nanoseconds =(MessageElementUtil.UnpackScalar<int>(MessageElement.FindElement(mm,"nanoseconds")));
    return s;
    }
    }
    public override string TypeName { get { return "com.robotraconteur.datetime.DateTimeUTC"; } }}

public class Duration_stub : PodStub<Duration> {
    public Duration_stub(com__robotraconteur__datetimeFactory d) {def=d;}
    private com__robotraconteur__datetimeFactory def;
    public override MessageElementNestedElementList PackPod(ref Duration s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    Duration s = (Duration)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackPodToArray<ClockInfo>("clock_info",ref s.clock_info));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<long>("seconds",s.seconds));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<int>("nanoseconds",s.nanoseconds));
    return new MessageElementNestedElementList(DataTypes.pod_t,"",m);
    }
    }
    public override Duration UnpackPod(MessageElementNestedElementList m) {
    if (m == null ) throw new NullReferenceException("Pod must not be null");
    using(vectorptr_messageelement mm=m.Elements)
    {
    Duration s = new Duration();
    s.clock_info =MessageElementUtil.UnpackPodFromArray<ClockInfo>(MessageElement.FindElement(mm,"clock_info"));
    s.seconds =(MessageElementUtil.UnpackScalar<long>(MessageElement.FindElement(mm,"seconds")));
    s.nanoseconds =(MessageElementUtil.UnpackScalar<int>(MessageElement.FindElement(mm,"nanoseconds")));
    return s;
    }
    }
    public override string TypeName { get { return "com.robotraconteur.datetime.Duration"; } }}

public class TimeSpec2_stub : PodStub<TimeSpec2> {
    public TimeSpec2_stub(com__robotraconteur__datetimeFactory d) {def=d;}
    private com__robotraconteur__datetimeFactory def;
    public override MessageElementNestedElementList PackPod(ref TimeSpec2 s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    TimeSpec2 s = (TimeSpec2)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackPodToArray<ClockInfo>("clock_info",ref s.clock_info));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<long>("seconds",s.seconds));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<int>("nanoseconds",s.nanoseconds));
    return new MessageElementNestedElementList(DataTypes.pod_t,"",m);
    }
    }
    public override TimeSpec2 UnpackPod(MessageElementNestedElementList m) {
    if (m == null ) throw new NullReferenceException("Pod must not be null");
    using(vectorptr_messageelement mm=m.Elements)
    {
    TimeSpec2 s = new TimeSpec2();
    s.clock_info =MessageElementUtil.UnpackPodFromArray<ClockInfo>(MessageElement.FindElement(mm,"clock_info"));
    s.seconds =(MessageElementUtil.UnpackScalar<long>(MessageElement.FindElement(mm,"seconds")));
    s.nanoseconds =(MessageElementUtil.UnpackScalar<int>(MessageElement.FindElement(mm,"nanoseconds")));
    return s;
    }
    }
    public override string TypeName { get { return "com.robotraconteur.datetime.TimeSpec2"; } }}

public class TimeSpec3_stub : NamedArrayStub<TimeSpec3,long> {
    public override long[] GetNumericArrayFromNamedArrayStruct(ref TimeSpec3 s) {
    return s.GetNumericArray();
    }
    public override TimeSpec3 GetNamedArrayStructFromNumericArray(long[] m) {
    if (m.Length != 1) throw new DataTypeException("Invalid namedarray array");
    var s = new TimeSpec3();
    var a = new ArraySegment<long>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override long[] GetNumericArrayFromNamedArray(TimeSpec3[] s) {
    return s.GetNumericArray();
    }
    public override TimeSpec3[] GetNamedArrayFromNumericArray(long[] m) {
    if (m.Length % 1 != 0) throw new DataTypeException("Invalid namedarray array");
    TimeSpec3[] s = new TimeSpec3[m.Length / 1];
    var a = new ArraySegment<long>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.datetime.TimeSpec3"; } }}

public static class RRExtensions{
    public static long[] GetNumericArray(this TimeSpec3[] s)
    {
    var a=new ArraySegment<long>(new long[1 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this TimeSpec3[] s, ref ArraySegment<long> a)
    {
    if(a.Count < 1 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<long>(a.Array, a.Offset + 1*i,1);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this TimeSpec3[] s, ref ArraySegment<long> a)
    {
    if(a.Count < 1 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<long>(a.Array, a.Offset + 1*i,1);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
}
}
namespace com.robotraconteur.device.clock
{
public struct DeviceTime
{
    public com.robotraconteur.datetime.TimeSpec2 device_ts;
    public com.robotraconteur.datetime.DateTimeUTC device_utc;
    public ulong device_seqno;
}

[RobotRaconteurServiceObjectInterface()]
public interface DeviceClock
{
    Wire<DeviceTime> device_clock_now{ get; set; }
}

}
namespace com.robotraconteur.device.clock
{
public class com__robotraconteur__device__clockFactory : ServiceFactory
{
    public override string DefString()
{
    const string s="service com.robotraconteur.device.clock\n\nstdver 0.10\n\nimport com.robotraconteur.datetime\n\nusing com.robotraconteur.datetime.TimeSpec2\nusing com.robotraconteur.datetime.DateTimeUTC\n\npod DeviceTime\nfield TimeSpec2 device_ts\nfield DateTimeUTC device_utc\nfield uint64 device_seqno\nend\n\nobject DeviceClock\nwire DeviceTime device_clock_now [readonly,nolock]\nend\n\n";
    return s;
    }
    public override string GetServiceName() {return "com.robotraconteur.device.clock";}
    public DeviceTime_stub DeviceTime_stubentry;
    public com__robotraconteur__device__clockFactory()
{
    DeviceTime_stubentry=new DeviceTime_stub(this);
    }
    public override IStructureStub FindStructureStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public override IPodStub FindPodStub(string objecttype)
    {
    if (objecttype=="DeviceTime")    return DeviceTime_stubentry;
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override INamedArrayStub FindNamedArrayStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override ServiceStub CreateStub(WrappedServiceStub innerstub) {
    string objecttype=innerstub.RR_objecttype.GetServiceDefinition().Name + "." + innerstub.RR_objecttype.Name;    string objshort;
    if (CompareNamespace(objecttype, out objshort)) {
    switch (objshort) {
    case "DeviceClock":
    return new DeviceClock_stub(innerstub);
    default:
    break;
    }
    } else {
    string ext_service_type=RobotRaconteurNode.SplitQualifiedName(objecttype).Item1;
    return RobotRaconteurNode.s.GetServiceType(ext_service_type).CreateStub(innerstub);
    }
    throw new ServiceException("Could not create stub");
    }
    public override ServiceSkel CreateSkel(object obj) {
    string objtype = RobotRaconteurNode.GetTypeString(ServiceSkelUtil.FindParentInterface(obj.GetType()));
    string objshort;
    if (CompareNamespace(objtype, out objshort)) {
    switch(objshort) {
    case "DeviceClock":
    return new DeviceClock_skel((DeviceClock)obj);
    default:
    break;
    }
    } else {
    string ext_service_type=RobotRaconteurNode.SplitQualifiedName(objtype).Item1;
    return RobotRaconteurNode.s.GetServiceFactory(ext_service_type).CreateSkel(obj);
    }
    throw new ServiceException("Could not create skel");
    }
    public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp){
    if (rr_exp==null) return rr_exp;
    string rr_type=rr_exp.Error;
    if (!rr_type.Contains(".")) return rr_exp;
    string rr_stype;
    if (CompareNamespace(rr_type, out rr_stype)) {
    } else {
    return RobotRaconteurNode.s.DownCastException(rr_exp); 
    }
    return rr_exp;
    }
}

public class DeviceTime_stub : PodStub<DeviceTime> {
    public DeviceTime_stub(com__robotraconteur__device__clockFactory d) {def=d;}
    private com__robotraconteur__device__clockFactory def;
    public override MessageElementNestedElementList PackPod(ref DeviceTime s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    DeviceTime s = (DeviceTime)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.TimeSpec2>("device_ts",ref s.device_ts));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.DateTimeUTC>("device_utc",ref s.device_utc));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<ulong>("device_seqno",s.device_seqno));
    return new MessageElementNestedElementList(DataTypes.pod_t,"",m);
    }
    }
    public override DeviceTime UnpackPod(MessageElementNestedElementList m) {
    if (m == null ) throw new NullReferenceException("Pod must not be null");
    using(vectorptr_messageelement mm=m.Elements)
    {
    DeviceTime s = new DeviceTime();
    s.device_ts =MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.TimeSpec2>(MessageElement.FindElement(mm,"device_ts"));
    s.device_utc =MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.DateTimeUTC>(MessageElement.FindElement(mm,"device_utc"));
    s.device_seqno =(MessageElementUtil.UnpackScalar<ulong>(MessageElement.FindElement(mm,"device_seqno")));
    return s;
    }
    }
    public override string TypeName { get { return "com.robotraconteur.device.clock.DeviceTime"; } }}

public interface async_DeviceClock
{
}
public class DeviceClock_stub : ServiceStub , DeviceClock, async_DeviceClock{
    private Wire<DeviceTime> rr_device_clock_now;
    public DeviceClock_stub(WrappedServiceStub innerstub) : base(innerstub) {
    rr_device_clock_now=new Wire<DeviceTime>(innerstub.GetWire("device_clock_now"));
    }
    public override void DispatchEvent(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    }
    public Wire<DeviceTime> device_clock_now {
    get { return rr_device_clock_now;  }
    set { throw new InvalidOperationException();}
    }
    public override MessageElement CallbackCall(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
}
public class DeviceClock_skel : ServiceSkel {
    protected DeviceClock obj;
    protected async_DeviceClock async_obj;
    public DeviceClock_skel(object o) : base(o)    {
    obj=(DeviceClock)o;
    async_obj = o as async_DeviceClock;
    }
    public override void ReleaseCastObject() { 
    obj=null;
    async_obj=null;
    base.ReleaseCastObject();
    }
    public override MessageElement CallGetProperty(string membername, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void CallSetProperty(string membername, MessageElement m, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override MessageElement CallFunction(string rr_membername, vectorptr_messageelement rr_m, WrappedServiceSkelAsyncAdapter rr_async_adapter) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override object GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(DeviceClock)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(DeviceClock)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void InitPipeServers(object rrobj1) {
    obj=(DeviceClock)rrobj1;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(DeviceClock)rrobj1;
    }
    public override void InitWireServers(object rrobj1) {
    obj=(DeviceClock)rrobj1;
    obj.device_clock_now=new Wire<DeviceTime>(innerskel.GetWire("device_clock_now"));
    }
    public override WrappedArrayMemoryDirector GetArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedMultiDimArrayMemoryDirector GetMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodArrayMemoryDirector GetPodArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodMultiDimArrayMemoryDirector GetPodMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedArrayMemoryDirector GetNamedArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedMultiDimArrayMemoryDirector GetNamedMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override string RRType { get { return "com.robotraconteur.device.clock.DeviceClock"; } }
}
public class DeviceClock_default_impl : DeviceClock{
    protected WireBroadcaster<DeviceTime> rrvar_device_clock_now;
    public virtual Wire<DeviceTime> device_clock_now {
    get { return rrvar_device_clock_now.Wire;  }
    set {
    if (rrvar_device_clock_now!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_device_clock_now= new WireBroadcaster<DeviceTime>(value);
    }
    }
}
public static class RRExtensions{
}
}
namespace com.robotraconteur.device.isoch
{
public class IsochInfo
{
    public double update_rate;
    public com.robotraconteur.datetime.TimeSpec2 isoch_epoch;
    public uint max_downsample;
}

[RobotRaconteurServiceObjectInterface()]
public interface IsochDevice
{
    IsochInfo isoch_info { get; 	}
    uint isoch_downsample { get;  set; 	}
}

}
namespace com.robotraconteur.device.isoch
{
public class com__robotraconteur__device__isochFactory : ServiceFactory
{
    public override string DefString()
{
    const string s="service com.robotraconteur.device.isoch\n\nstdver 0.10\n\nimport com.robotraconteur.datetime\n\nusing com.robotraconteur.datetime.TimeSpec2\n\nstruct IsochInfo\nfield double update_rate\nfield TimeSpec2 isoch_epoch\nfield uint32 max_downsample\nend\n\nobject IsochDevice\nproperty IsochInfo isoch_info [readonly,nolock]\nproperty uint32 isoch_downsample [perclient]\nend\n\n";
    return s;
    }
    public override string GetServiceName() {return "com.robotraconteur.device.isoch";}
    public IsochInfo_stub IsochInfo_stubentry;
    public com__robotraconteur__device__isochFactory()
{
    IsochInfo_stubentry=new IsochInfo_stub(this);
    }
    public override IStructureStub FindStructureStub(string objecttype)
    {
    if (objecttype=="IsochInfo")    return IsochInfo_stubentry;
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public override IPodStub FindPodStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override INamedArrayStub FindNamedArrayStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override ServiceStub CreateStub(WrappedServiceStub innerstub) {
    string objecttype=innerstub.RR_objecttype.GetServiceDefinition().Name + "." + innerstub.RR_objecttype.Name;    string objshort;
    if (CompareNamespace(objecttype, out objshort)) {
    switch (objshort) {
    case "IsochDevice":
    return new IsochDevice_stub(innerstub);
    default:
    break;
    }
    } else {
    string ext_service_type=RobotRaconteurNode.SplitQualifiedName(objecttype).Item1;
    return RobotRaconteurNode.s.GetServiceType(ext_service_type).CreateStub(innerstub);
    }
    throw new ServiceException("Could not create stub");
    }
    public override ServiceSkel CreateSkel(object obj) {
    string objtype = RobotRaconteurNode.GetTypeString(ServiceSkelUtil.FindParentInterface(obj.GetType()));
    string objshort;
    if (CompareNamespace(objtype, out objshort)) {
    switch(objshort) {
    case "IsochDevice":
    return new IsochDevice_skel((IsochDevice)obj);
    default:
    break;
    }
    } else {
    string ext_service_type=RobotRaconteurNode.SplitQualifiedName(objtype).Item1;
    return RobotRaconteurNode.s.GetServiceFactory(ext_service_type).CreateSkel(obj);
    }
    throw new ServiceException("Could not create skel");
    }
    public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp){
    if (rr_exp==null) return rr_exp;
    string rr_type=rr_exp.Error;
    if (!rr_type.Contains(".")) return rr_exp;
    string rr_stype;
    if (CompareNamespace(rr_type, out rr_stype)) {
    } else {
    return RobotRaconteurNode.s.DownCastException(rr_exp); 
    }
    return rr_exp;
    }
}

public class IsochInfo_stub : IStructureStub {
    public IsochInfo_stub(com__robotraconteur__device__isochFactory d) {def=d;}
    private com__robotraconteur__device__isochFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    IsochInfo s = (IsochInfo)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<double>("update_rate",s.update_rate));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.TimeSpec2>("isoch_epoch",ref s.isoch_epoch));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<uint>("max_downsample",s.max_downsample));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.device.isoch.IsochInfo",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    IsochInfo s=new IsochInfo();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.update_rate =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(mm,"update_rate")));
    s.isoch_epoch =MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.TimeSpec2>(MessageElement.FindElement(mm,"isoch_epoch"));
    s.max_downsample =(MessageElementUtil.UnpackScalar<uint>(MessageElement.FindElement(mm,"max_downsample")));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public interface async_IsochDevice
{
    Task<IsochInfo> async_get_isoch_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<uint> async_get_isoch_downsample(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_isoch_downsample(uint value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
}
public class IsochDevice_stub : ServiceStub , IsochDevice, async_IsochDevice{
    public IsochDevice_stub(WrappedServiceStub innerstub) : base(innerstub) {
    }
    public IsochInfo isoch_info {
    get {
    return MessageElementUtil.UnpackStructure<IsochInfo>(rr_innerstub.PropertyGet("isoch_info"));
    }
    }
    public uint isoch_downsample {
    get {
    return (MessageElementUtil.UnpackScalar<uint>(rr_innerstub.PropertyGet("isoch_downsample")));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackScalar<uint>("value",value))
    {
    rr_innerstub.PropertySet("isoch_downsample", m);
    }
    }
    }
    public override void DispatchEvent(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    }
    public override MessageElement CallbackCall(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public virtual async Task<IsochInfo> async_get_isoch_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("isoch_info",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<IsochInfo>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<uint> async_get_isoch_downsample(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("isoch_downsample",rr_timeout)) {
    var rr_ret=(MessageElementUtil.UnpackScalar<uint>(rr_value));
    return rr_ret;
    } }
    public virtual async Task async_set_isoch_downsample(uint value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackScalar<uint>("value",value))
    {
    await rr_async_PropertySet("isoch_downsample",mm,rr_timeout);
    }
    }
}
public class IsochDevice_skel : ServiceSkel {
    protected IsochDevice obj;
    protected async_IsochDevice async_obj;
    public IsochDevice_skel(object o) : base(o)    {
    obj=(IsochDevice)o;
    async_obj = o as async_IsochDevice;
    }
    public override void ReleaseCastObject() { 
    obj=null;
    async_obj=null;
    base.ReleaseCastObject();
    }
    public override MessageElement CallGetProperty(string membername, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    case "isoch_info":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_isoch_info().ContinueWith(t => async_adapter.EndTask<IsochInfo>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    IsochInfo ret=obj.isoch_info;
    return MessageElementUtil.PackStructure("return",ret);
    }
    case "isoch_downsample":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_isoch_downsample().ContinueWith(t => async_adapter.EndTask<uint>(t,async_ret => MessageElementUtil.PackScalar<uint>("return",async_ret)));
    return null;
    }
    uint ret=obj.isoch_downsample;
    return MessageElementUtil.PackScalar<uint>("return",ret);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void CallSetProperty(string membername, MessageElement m, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    case "isoch_downsample":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_isoch_downsample((MessageElementUtil.UnpackScalar<uint>(m))).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.isoch_downsample=(MessageElementUtil.UnpackScalar<uint>(m));
    return;
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override MessageElement CallFunction(string rr_membername, vectorptr_messageelement rr_m, WrappedServiceSkelAsyncAdapter rr_async_adapter) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override object GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(IsochDevice)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(IsochDevice)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void InitPipeServers(object rrobj1) {
    obj=(IsochDevice)rrobj1;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(IsochDevice)rrobj1;
    }
    public override void InitWireServers(object rrobj1) {
    obj=(IsochDevice)rrobj1;
    }
    public override WrappedArrayMemoryDirector GetArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedMultiDimArrayMemoryDirector GetMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodArrayMemoryDirector GetPodArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodMultiDimArrayMemoryDirector GetPodMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedArrayMemoryDirector GetNamedArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedMultiDimArrayMemoryDirector GetNamedMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override string RRType { get { return "com.robotraconteur.device.isoch.IsochDevice"; } }
}
public class IsochDevice_default_impl : IsochDevice{
    public virtual IsochInfo isoch_info {get; set;} = default(IsochInfo);
    public virtual uint isoch_downsample {get; set;} = default(uint);
}
public static class RRExtensions{
}
}
namespace com.robotraconteur.device
{
public class DeviceOption
{
    public com.robotraconteur.identifier.Identifier option_identifier;
    public List<DeviceSubOption> suboptions;
}

public class DeviceSubOption
{
    public string suboption_name;
    public double suboption_level;
    public Dictionary<string,object> extended;
}

public class DeviceCapability
{
    public com.robotraconteur.identifier.Identifier capability_identifier;
    public List<DeviceSubCapability> subcapabilities;
}

public class DeviceSubCapability
{
    public string subcapability_name;
    public double subcapability_level;
    public Dictionary<string,object> extended;
}

public class DeviceClass
{
    public com.robotraconteur.identifier.Identifier class_identifier;
    public List<string> subclasses;
}

public class DeviceInfo
{
    public com.robotraconteur.identifier.Identifier device;
    public com.robotraconteur.identifier.Identifier parent_device;
    public com.robotraconteur.identifier.Identifier manufacturer;
    public com.robotraconteur.identifier.Identifier model;
    public List<DeviceOption> options;
    public List<DeviceCapability> capabilities;
    public string serial_number;
    public List<DeviceClass> device_classes;
    public string user_description;
    public com.robotraconteur.resource.ResourceIdentifier description_resource;
    public List<string> implemented_types;
    public com.robotraconteur.geometry.NamedPose device_origin_pose;
    public Dictionary<string,com.robotraconteur.identifier.Identifier> associated_devices;
    public Dictionary<string,object> extended;
}

[RobotRaconteurServiceObjectInterface()]
public interface Device
{
    DeviceInfo device_info { get; 	}
}

[RobotRaconteurServiceObjectInterface()]
public interface BillboardDevice : Device
{
    DeviceInfo device_info { get; 	}
}

}
namespace com.robotraconteur.device
{
public class com__robotraconteur__deviceFactory : ServiceFactory
{
    public override string DefString()
{
    const string s="service com.robotraconteur.device\n\nstdver 0.10\n\nimport com.robotraconteur.identifier\nimport com.robotraconteur.resource\nimport com.robotraconteur.geometry\n\nusing com.robotraconteur.identifier.Identifier\nusing com.robotraconteur.resource.ResourceIdentifier\nusing com.robotraconteur.geometry.NamedPose\n\nstruct DeviceOption\nfield Identifier option_identifier\nfield DeviceSubOption{list} suboptions\nend\n\nstruct DeviceSubOption\nfield string suboption_name\nfield double suboption_level\nfield varvalue{string} extended\nend\n\nstruct DeviceCapability\nfield Identifier capability_identifier\nfield DeviceSubCapability{list} subcapabilities\nend\n\nstruct DeviceSubCapability\nfield string subcapability_name\nfield double subcapability_level\nfield varvalue{string} extended\nend\n\nstruct DeviceClass\nfield Identifier class_identifier\nfield string{list} subclasses\nend\n\nstruct DeviceInfo\nfield Identifier device\nfield Identifier parent_device\nfield Identifier manufacturer\nfield Identifier model\nfield DeviceOption{list} options\nfield DeviceCapability{list} capabilities\nfield string serial_number\nfield DeviceClass{list} device_classes\nfield string user_description\nfield ResourceIdentifier description_resource\nfield string{list} implemented_types\nfield NamedPose device_origin_pose\nfield Identifier{string} associated_devices\nfield varvalue{string} extended\nend\n\nobject Device\nproperty DeviceInfo device_info [readonly,nolock]\nend\n\nobject BillboardDevice\nimplements Device\nproperty DeviceInfo device_info [readonly,nolock]\nend\n\n";
    return s;
    }
    public override string GetServiceName() {return "com.robotraconteur.device";}
    public DeviceOption_stub DeviceOption_stubentry;
    public DeviceSubOption_stub DeviceSubOption_stubentry;
    public DeviceCapability_stub DeviceCapability_stubentry;
    public DeviceSubCapability_stub DeviceSubCapability_stubentry;
    public DeviceClass_stub DeviceClass_stubentry;
    public DeviceInfo_stub DeviceInfo_stubentry;
    public com__robotraconteur__deviceFactory()
{
    DeviceOption_stubentry=new DeviceOption_stub(this);
    DeviceSubOption_stubentry=new DeviceSubOption_stub(this);
    DeviceCapability_stubentry=new DeviceCapability_stub(this);
    DeviceSubCapability_stubentry=new DeviceSubCapability_stub(this);
    DeviceClass_stubentry=new DeviceClass_stub(this);
    DeviceInfo_stubentry=new DeviceInfo_stub(this);
    }
    public override IStructureStub FindStructureStub(string objecttype)
    {
    if (objecttype=="DeviceOption")    return DeviceOption_stubentry;
    if (objecttype=="DeviceSubOption")    return DeviceSubOption_stubentry;
    if (objecttype=="DeviceCapability")    return DeviceCapability_stubentry;
    if (objecttype=="DeviceSubCapability")    return DeviceSubCapability_stubentry;
    if (objecttype=="DeviceClass")    return DeviceClass_stubentry;
    if (objecttype=="DeviceInfo")    return DeviceInfo_stubentry;
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public override IPodStub FindPodStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override INamedArrayStub FindNamedArrayStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override ServiceStub CreateStub(WrappedServiceStub innerstub) {
    string objecttype=innerstub.RR_objecttype.GetServiceDefinition().Name + "." + innerstub.RR_objecttype.Name;    string objshort;
    if (CompareNamespace(objecttype, out objshort)) {
    switch (objshort) {
    case "Device":
    return new Device_stub(innerstub);
    case "BillboardDevice":
    return new BillboardDevice_stub(innerstub);
    default:
    break;
    }
    } else {
    string ext_service_type=RobotRaconteurNode.SplitQualifiedName(objecttype).Item1;
    return RobotRaconteurNode.s.GetServiceType(ext_service_type).CreateStub(innerstub);
    }
    throw new ServiceException("Could not create stub");
    }
    public override ServiceSkel CreateSkel(object obj) {
    string objtype = RobotRaconteurNode.GetTypeString(ServiceSkelUtil.FindParentInterface(obj.GetType()));
    string objshort;
    if (CompareNamespace(objtype, out objshort)) {
    switch(objshort) {
    case "Device":
    return new Device_skel((Device)obj);
    case "BillboardDevice":
    return new BillboardDevice_skel((BillboardDevice)obj);
    default:
    break;
    }
    } else {
    string ext_service_type=RobotRaconteurNode.SplitQualifiedName(objtype).Item1;
    return RobotRaconteurNode.s.GetServiceFactory(ext_service_type).CreateSkel(obj);
    }
    throw new ServiceException("Could not create skel");
    }
    public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp){
    if (rr_exp==null) return rr_exp;
    string rr_type=rr_exp.Error;
    if (!rr_type.Contains(".")) return rr_exp;
    string rr_stype;
    if (CompareNamespace(rr_type, out rr_stype)) {
    } else {
    return RobotRaconteurNode.s.DownCastException(rr_exp); 
    }
    return rr_exp;
    }
}

public class DeviceOption_stub : IStructureStub {
    public DeviceOption_stub(com__robotraconteur__deviceFactory d) {def=d;}
    private com__robotraconteur__deviceFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    DeviceOption s = (DeviceOption)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("option_identifier",s.option_identifier));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackListType<DeviceSubOption>("suboptions",s.suboptions));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.device.DeviceOption",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    DeviceOption s=new DeviceOption();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.option_identifier =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(MessageElement.FindElement(mm,"option_identifier"));
    s.suboptions =MessageElementUtil.UnpackList<DeviceSubOption>(MessageElement.FindElement(mm,"suboptions"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class DeviceSubOption_stub : IStructureStub {
    public DeviceSubOption_stub(com__robotraconteur__deviceFactory d) {def=d;}
    private com__robotraconteur__deviceFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    DeviceSubOption s = (DeviceSubOption)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackString("suboption_name",s.suboption_name));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<double>("suboption_level",s.suboption_level));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackMapType<string,object>("extended",s.extended));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.device.DeviceSubOption",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    DeviceSubOption s=new DeviceSubOption();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.suboption_name =MessageElementUtil.UnpackString(MessageElement.FindElement(mm,"suboption_name"));
    s.suboption_level =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(mm,"suboption_level")));
    s.extended =MessageElementUtil.UnpackMap<string,object>(MessageElement.FindElement(mm,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class DeviceCapability_stub : IStructureStub {
    public DeviceCapability_stub(com__robotraconteur__deviceFactory d) {def=d;}
    private com__robotraconteur__deviceFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    DeviceCapability s = (DeviceCapability)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("capability_identifier",s.capability_identifier));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackListType<DeviceSubCapability>("subcapabilities",s.subcapabilities));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.device.DeviceCapability",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    DeviceCapability s=new DeviceCapability();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.capability_identifier =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(MessageElement.FindElement(mm,"capability_identifier"));
    s.subcapabilities =MessageElementUtil.UnpackList<DeviceSubCapability>(MessageElement.FindElement(mm,"subcapabilities"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class DeviceSubCapability_stub : IStructureStub {
    public DeviceSubCapability_stub(com__robotraconteur__deviceFactory d) {def=d;}
    private com__robotraconteur__deviceFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    DeviceSubCapability s = (DeviceSubCapability)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackString("subcapability_name",s.subcapability_name));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<double>("subcapability_level",s.subcapability_level));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackMapType<string,object>("extended",s.extended));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.device.DeviceSubCapability",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    DeviceSubCapability s=new DeviceSubCapability();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.subcapability_name =MessageElementUtil.UnpackString(MessageElement.FindElement(mm,"subcapability_name"));
    s.subcapability_level =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(mm,"subcapability_level")));
    s.extended =MessageElementUtil.UnpackMap<string,object>(MessageElement.FindElement(mm,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class DeviceClass_stub : IStructureStub {
    public DeviceClass_stub(com__robotraconteur__deviceFactory d) {def=d;}
    private com__robotraconteur__deviceFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    DeviceClass s = (DeviceClass)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("class_identifier",s.class_identifier));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackListType<string>("subclasses",s.subclasses));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.device.DeviceClass",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    DeviceClass s=new DeviceClass();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.class_identifier =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(MessageElement.FindElement(mm,"class_identifier"));
    s.subclasses =MessageElementUtil.UnpackList<string>(MessageElement.FindElement(mm,"subclasses"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class DeviceInfo_stub : IStructureStub {
    public DeviceInfo_stub(com__robotraconteur__deviceFactory d) {def=d;}
    private com__robotraconteur__deviceFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    DeviceInfo s = (DeviceInfo)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("device",s.device));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("parent_device",s.parent_device));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("manufacturer",s.manufacturer));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("model",s.model));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackListType<DeviceOption>("options",s.options));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackListType<DeviceCapability>("capabilities",s.capabilities));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackString("serial_number",s.serial_number));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackListType<DeviceClass>("device_classes",s.device_classes));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackString("user_description",s.user_description));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("description_resource",s.description_resource));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackListType<string>("implemented_types",s.implemented_types));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("device_origin_pose",s.device_origin_pose));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackMapType<string,com.robotraconteur.identifier.Identifier>("associated_devices",s.associated_devices));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackMapType<string,object>("extended",s.extended));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.device.DeviceInfo",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    DeviceInfo s=new DeviceInfo();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.device =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(MessageElement.FindElement(mm,"device"));
    s.parent_device =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(MessageElement.FindElement(mm,"parent_device"));
    s.manufacturer =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(MessageElement.FindElement(mm,"manufacturer"));
    s.model =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(MessageElement.FindElement(mm,"model"));
    s.options =MessageElementUtil.UnpackList<DeviceOption>(MessageElement.FindElement(mm,"options"));
    s.capabilities =MessageElementUtil.UnpackList<DeviceCapability>(MessageElement.FindElement(mm,"capabilities"));
    s.serial_number =MessageElementUtil.UnpackString(MessageElement.FindElement(mm,"serial_number"));
    s.device_classes =MessageElementUtil.UnpackList<DeviceClass>(MessageElement.FindElement(mm,"device_classes"));
    s.user_description =MessageElementUtil.UnpackString(MessageElement.FindElement(mm,"user_description"));
    s.description_resource =MessageElementUtil.UnpackStructure<com.robotraconteur.resource.ResourceIdentifier>(MessageElement.FindElement(mm,"description_resource"));
    s.implemented_types =MessageElementUtil.UnpackList<string>(MessageElement.FindElement(mm,"implemented_types"));
    s.device_origin_pose =MessageElementUtil.UnpackStructure<com.robotraconteur.geometry.NamedPose>(MessageElement.FindElement(mm,"device_origin_pose"));
    s.associated_devices =MessageElementUtil.UnpackMap<string,com.robotraconteur.identifier.Identifier>(MessageElement.FindElement(mm,"associated_devices"));
    s.extended =MessageElementUtil.UnpackMap<string,object>(MessageElement.FindElement(mm,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public interface async_Device
{
    Task<DeviceInfo> async_get_device_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
}
public class Device_stub : ServiceStub , Device, async_Device{
    public Device_stub(WrappedServiceStub innerstub) : base(innerstub) {
    }
    public DeviceInfo device_info {
    get {
    return MessageElementUtil.UnpackStructure<DeviceInfo>(rr_innerstub.PropertyGet("device_info"));
    }
    }
    public override void DispatchEvent(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    }
    public override MessageElement CallbackCall(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public virtual async Task<DeviceInfo> async_get_device_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("device_info",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<DeviceInfo>(rr_value);
    return rr_ret;
    } }
}
public interface async_BillboardDevice : async_Device
{
    Task<DeviceInfo> async_get_device_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
}
public class BillboardDevice_stub : ServiceStub , BillboardDevice, async_BillboardDevice{
    public BillboardDevice_stub(WrappedServiceStub innerstub) : base(innerstub) {
    }
    public DeviceInfo device_info {
    get {
    return MessageElementUtil.UnpackStructure<DeviceInfo>(rr_innerstub.PropertyGet("device_info"));
    }
    }
    public override void DispatchEvent(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    }
    public override MessageElement CallbackCall(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public virtual async Task<DeviceInfo> async_get_device_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("device_info",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<DeviceInfo>(rr_value);
    return rr_ret;
    } }
}
public class Device_skel : ServiceSkel {
    protected Device obj;
    protected async_Device async_obj;
    public Device_skel(object o) : base(o)    {
    obj=(Device)o;
    async_obj = o as async_Device;
    }
    public override void ReleaseCastObject() { 
    obj=null;
    async_obj=null;
    base.ReleaseCastObject();
    }
    public override MessageElement CallGetProperty(string membername, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    case "device_info":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_device_info().ContinueWith(t => async_adapter.EndTask<DeviceInfo>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    DeviceInfo ret=obj.device_info;
    return MessageElementUtil.PackStructure("return",ret);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void CallSetProperty(string membername, MessageElement m, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override MessageElement CallFunction(string rr_membername, vectorptr_messageelement rr_m, WrappedServiceSkelAsyncAdapter rr_async_adapter) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override object GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(Device)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(Device)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void InitPipeServers(object rrobj1) {
    obj=(Device)rrobj1;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(Device)rrobj1;
    }
    public override void InitWireServers(object rrobj1) {
    obj=(Device)rrobj1;
    }
    public override WrappedArrayMemoryDirector GetArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedMultiDimArrayMemoryDirector GetMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodArrayMemoryDirector GetPodArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodMultiDimArrayMemoryDirector GetPodMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedArrayMemoryDirector GetNamedArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedMultiDimArrayMemoryDirector GetNamedMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override string RRType { get { return "com.robotraconteur.device.Device"; } }
}
public class BillboardDevice_skel : ServiceSkel {
    protected BillboardDevice obj;
    protected async_BillboardDevice async_obj;
    public BillboardDevice_skel(object o) : base(o)    {
    obj=(BillboardDevice)o;
    async_obj = o as async_BillboardDevice;
    }
    public override void ReleaseCastObject() { 
    obj=null;
    async_obj=null;
    base.ReleaseCastObject();
    }
    public override MessageElement CallGetProperty(string membername, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    case "device_info":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_device_info().ContinueWith(t => async_adapter.EndTask<DeviceInfo>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    DeviceInfo ret=obj.device_info;
    return MessageElementUtil.PackStructure("return",ret);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void CallSetProperty(string membername, MessageElement m, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override MessageElement CallFunction(string rr_membername, vectorptr_messageelement rr_m, WrappedServiceSkelAsyncAdapter rr_async_adapter) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override object GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(BillboardDevice)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(BillboardDevice)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void InitPipeServers(object rrobj1) {
    obj=(BillboardDevice)rrobj1;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(BillboardDevice)rrobj1;
    }
    public override void InitWireServers(object rrobj1) {
    obj=(BillboardDevice)rrobj1;
    }
    public override WrappedArrayMemoryDirector GetArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedMultiDimArrayMemoryDirector GetMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodArrayMemoryDirector GetPodArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodMultiDimArrayMemoryDirector GetPodMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedArrayMemoryDirector GetNamedArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedMultiDimArrayMemoryDirector GetNamedMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override string RRType { get { return "com.robotraconteur.device.BillboardDevice"; } }
}
public class Device_default_impl : Device{
    public virtual DeviceInfo device_info {get; set;} = default(DeviceInfo);
}
public class BillboardDevice_default_impl : BillboardDevice{
    public virtual DeviceInfo device_info {get; set;} = default(DeviceInfo);
}
public static class RRExtensions{
}
}
namespace com.robotraconteur.eventlog
{
public class EventLogType
{
    public com.robotraconteur.identifier.Identifier event_category;
    public string event_type;
}

public class EventLogMessageHeader
{
    public EventLogType type;
    public EventLogLevel level;
    public com.robotraconteur.identifier.Identifier source_device;
    public string source_component;
    public string source_object;
    public ulong message_number;
    public com.robotraconteur.datetime.DateTimeUTC timestamp;
}

public class EventLogMessage
{
    public EventLogMessageHeader header;
    public string title;
    public string message;
    public Dictionary<string,object> extended;
}

public class EventLogInfo
{
    public com.robotraconteur.device.DeviceInfo device_info;
    public com.robotraconteur.identifier.Identifier logged_device;
    public ulong min_message_number;
    public ulong max_message_number;
    public Dictionary<string,object> extended;
}

[RobotRaconteurServiceObjectInterface()]
public interface EventLog
{
    EventLogInfo eventlog_info { get; 	}
    List<EventLogMessage> getf_eventlog_messages(ulong start, ulong count);
}

[RobotRaconteurServiceObjectInterface()]
public interface EventLogDevice : EventLog, com.robotraconteur.device.Device
{
    com.robotraconteur.device.DeviceInfo device_info { get; 	}
    EventLogInfo eventlog_info { get; 	}
    List<EventLogMessage> getf_eventlog_messages(ulong start, ulong count);
    void eventlog_clear_messages(ulong offset, ulong count);
    void eventlog_clear_all_messages();
    Pipe<EventLogMessage> eventlog_message_stream{ get; set; }
}

public static class com__robotraconteur__eventlogConstants 
{
}
    public enum EventLogLevel
    {
    undefined = 0,
    trace = 1,
    debug = 2,
    info = 3,
    warning = 4,
    error = 5,
    safety_violation_error = 6,
    fatal_error = 7,
    emergency_error = 8,
    catastrophic_error = 9
    };
}
namespace com.robotraconteur.eventlog
{
public class com__robotraconteur__eventlogFactory : ServiceFactory
{
    public override string DefString()
{
    const string s="service com.robotraconteur.eventlog\n\nstdver 0.10\n\nimport com.robotraconteur.identifier\nimport com.robotraconteur.datetime\nimport com.robotraconteur.device\n\nusing com.robotraconteur.identifier.Identifier\nusing com.robotraconteur.datetime.DateTimeUTC\nusing com.robotraconteur.device.DeviceInfo\nusing com.robotraconteur.device.Device\n\nenum EventLogLevel\nundefined = 0,\ntrace = 1,\ndebug,\ninfo,\nwarning,\nerror,\nsafety_violation_error,\nfatal_error,\nemergency_error,\ncatastrophic_error\nend\n\nstruct EventLogType\nfield Identifier event_category\nfield string event_type\nend\n\nstruct EventLogMessageHeader\nfield EventLogType type\nfield EventLogLevel level\nfield Identifier source_device\nfield string source_component\nfield string source_object\nfield uint64 message_number\nfield DateTimeUTC timestamp\nend\n\nstruct EventLogMessage\nfield EventLogMessageHeader header\nfield string title\nfield string message\nfield varvalue{string} extended\nend\n\nstruct EventLogInfo\nfield DeviceInfo device_info\nfield Identifier logged_device\nfield uint64 min_message_number\nfield uint64 max_message_number\nfield varvalue{string} extended\nend\n\nobject EventLog\nproperty EventLogInfo eventlog_info [readonly,nolock]\nfunction EventLogMessage{list} getf_eventlog_messages(uint64 start, uint64 count)\nend\n\nobject EventLogDevice\nimplements EventLog\nimplements Device\nproperty DeviceInfo device_info [readonly,nolock]\nproperty EventLogInfo eventlog_info [readonly,nolock]\nfunction EventLogMessage{list} getf_eventlog_messages(uint64 start, uint64 count)\npipe EventLogMessage eventlog_message_stream [readonly]\nfunction void eventlog_clear_messages(uint64 offset, uint64 count)\nfunction void eventlog_clear_all_messages()\nend\n\n";
    return s;
    }
    public override string GetServiceName() {return "com.robotraconteur.eventlog";}
    public EventLogType_stub EventLogType_stubentry;
    public EventLogMessageHeader_stub EventLogMessageHeader_stubentry;
    public EventLogMessage_stub EventLogMessage_stubentry;
    public EventLogInfo_stub EventLogInfo_stubentry;
    public com__robotraconteur__eventlogFactory()
{
    EventLogType_stubentry=new EventLogType_stub(this);
    EventLogMessageHeader_stubentry=new EventLogMessageHeader_stub(this);
    EventLogMessage_stubentry=new EventLogMessage_stub(this);
    EventLogInfo_stubentry=new EventLogInfo_stub(this);
    }
    public override IStructureStub FindStructureStub(string objecttype)
    {
    if (objecttype=="EventLogType")    return EventLogType_stubentry;
    if (objecttype=="EventLogMessageHeader")    return EventLogMessageHeader_stubentry;
    if (objecttype=="EventLogMessage")    return EventLogMessage_stubentry;
    if (objecttype=="EventLogInfo")    return EventLogInfo_stubentry;
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public override IPodStub FindPodStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override INamedArrayStub FindNamedArrayStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override ServiceStub CreateStub(WrappedServiceStub innerstub) {
    string objecttype=innerstub.RR_objecttype.GetServiceDefinition().Name + "." + innerstub.RR_objecttype.Name;    string objshort;
    if (CompareNamespace(objecttype, out objshort)) {
    switch (objshort) {
    case "EventLog":
    return new EventLog_stub(innerstub);
    case "EventLogDevice":
    return new EventLogDevice_stub(innerstub);
    default:
    break;
    }
    } else {
    string ext_service_type=RobotRaconteurNode.SplitQualifiedName(objecttype).Item1;
    return RobotRaconteurNode.s.GetServiceType(ext_service_type).CreateStub(innerstub);
    }
    throw new ServiceException("Could not create stub");
    }
    public override ServiceSkel CreateSkel(object obj) {
    string objtype = RobotRaconteurNode.GetTypeString(ServiceSkelUtil.FindParentInterface(obj.GetType()));
    string objshort;
    if (CompareNamespace(objtype, out objshort)) {
    switch(objshort) {
    case "EventLog":
    return new EventLog_skel((EventLog)obj);
    case "EventLogDevice":
    return new EventLogDevice_skel((EventLogDevice)obj);
    default:
    break;
    }
    } else {
    string ext_service_type=RobotRaconteurNode.SplitQualifiedName(objtype).Item1;
    return RobotRaconteurNode.s.GetServiceFactory(ext_service_type).CreateSkel(obj);
    }
    throw new ServiceException("Could not create skel");
    }
    public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp){
    if (rr_exp==null) return rr_exp;
    string rr_type=rr_exp.Error;
    if (!rr_type.Contains(".")) return rr_exp;
    string rr_stype;
    if (CompareNamespace(rr_type, out rr_stype)) {
    } else {
    return RobotRaconteurNode.s.DownCastException(rr_exp); 
    }
    return rr_exp;
    }
}

public class EventLogType_stub : IStructureStub {
    public EventLogType_stub(com__robotraconteur__eventlogFactory d) {def=d;}
    private com__robotraconteur__eventlogFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    EventLogType s = (EventLogType)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("event_category",s.event_category));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackString("event_type",s.event_type));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.eventlog.EventLogType",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    EventLogType s=new EventLogType();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.event_category =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(MessageElement.FindElement(mm,"event_category"));
    s.event_type =MessageElementUtil.UnpackString(MessageElement.FindElement(mm,"event_type"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class EventLogMessageHeader_stub : IStructureStub {
    public EventLogMessageHeader_stub(com__robotraconteur__eventlogFactory d) {def=d;}
    private com__robotraconteur__eventlogFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    EventLogMessageHeader s = (EventLogMessageHeader)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("type",s.type));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackEnum<EventLogLevel>("level",s.level));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("source_device",s.source_device));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackString("source_component",s.source_component));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackString("source_object",s.source_object));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<ulong>("message_number",s.message_number));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.DateTimeUTC>("timestamp",ref s.timestamp));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.eventlog.EventLogMessageHeader",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    EventLogMessageHeader s=new EventLogMessageHeader();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.type =MessageElementUtil.UnpackStructure<EventLogType>(MessageElement.FindElement(mm,"type"));
    s.level =MessageElementUtil.UnpackEnum<EventLogLevel>(MessageElement.FindElement(mm,"level"));
    s.source_device =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(MessageElement.FindElement(mm,"source_device"));
    s.source_component =MessageElementUtil.UnpackString(MessageElement.FindElement(mm,"source_component"));
    s.source_object =MessageElementUtil.UnpackString(MessageElement.FindElement(mm,"source_object"));
    s.message_number =(MessageElementUtil.UnpackScalar<ulong>(MessageElement.FindElement(mm,"message_number")));
    s.timestamp =MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.DateTimeUTC>(MessageElement.FindElement(mm,"timestamp"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class EventLogMessage_stub : IStructureStub {
    public EventLogMessage_stub(com__robotraconteur__eventlogFactory d) {def=d;}
    private com__robotraconteur__eventlogFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    EventLogMessage s = (EventLogMessage)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("header",s.header));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackString("title",s.title));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackString("message",s.message));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackMapType<string,object>("extended",s.extended));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.eventlog.EventLogMessage",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    EventLogMessage s=new EventLogMessage();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.header =MessageElementUtil.UnpackStructure<EventLogMessageHeader>(MessageElement.FindElement(mm,"header"));
    s.title =MessageElementUtil.UnpackString(MessageElement.FindElement(mm,"title"));
    s.message =MessageElementUtil.UnpackString(MessageElement.FindElement(mm,"message"));
    s.extended =MessageElementUtil.UnpackMap<string,object>(MessageElement.FindElement(mm,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class EventLogInfo_stub : IStructureStub {
    public EventLogInfo_stub(com__robotraconteur__eventlogFactory d) {def=d;}
    private com__robotraconteur__eventlogFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    EventLogInfo s = (EventLogInfo)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("device_info",s.device_info));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("logged_device",s.logged_device));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<ulong>("min_message_number",s.min_message_number));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<ulong>("max_message_number",s.max_message_number));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackMapType<string,object>("extended",s.extended));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.eventlog.EventLogInfo",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    EventLogInfo s=new EventLogInfo();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.device_info =MessageElementUtil.UnpackStructure<com.robotraconteur.device.DeviceInfo>(MessageElement.FindElement(mm,"device_info"));
    s.logged_device =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(MessageElement.FindElement(mm,"logged_device"));
    s.min_message_number =(MessageElementUtil.UnpackScalar<ulong>(MessageElement.FindElement(mm,"min_message_number")));
    s.max_message_number =(MessageElementUtil.UnpackScalar<ulong>(MessageElement.FindElement(mm,"max_message_number")));
    s.extended =MessageElementUtil.UnpackMap<string,object>(MessageElement.FindElement(mm,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public interface async_EventLog
{
    Task<EventLogInfo> async_get_eventlog_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<List<EventLogMessage>> async_getf_eventlog_messages(ulong start, ulong count,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
}
public class EventLog_stub : ServiceStub , EventLog, async_EventLog{
    public EventLog_stub(WrappedServiceStub innerstub) : base(innerstub) {
    }
    public EventLogInfo eventlog_info {
    get {
    return MessageElementUtil.UnpackStructure<EventLogInfo>(rr_innerstub.PropertyGet("eventlog_info"));
    }
    }
    public List<EventLogMessage> getf_eventlog_messages(ulong start, ulong count) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackScalar<ulong>("start",start));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackScalar<ulong>("count",count));
    using(MessageElement rr_me=rr_innerstub.FunctionCall("getf_eventlog_messages",rr_param))
    {
    return MessageElementUtil.UnpackList<EventLogMessage>(rr_me);
    }
    }
    }
    public override void DispatchEvent(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    }
    public override MessageElement CallbackCall(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public virtual async Task<EventLogInfo> async_get_eventlog_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("eventlog_info",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<EventLogInfo>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<List<EventLogMessage>> async_getf_eventlog_messages(ulong start, ulong count,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackScalar<ulong>("start",start));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackScalar<ulong>("count",count));
    using(var rr_return = await rr_async_FunctionCall("getf_eventlog_messages",rr_param,rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackList<EventLogMessage>(rr_return);
    return rr_ret;
    } } }
}
public interface async_EventLogDevice : async_EventLog, com.robotraconteur.device.async_Device
{
    Task<com.robotraconteur.device.DeviceInfo> async_get_device_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<EventLogInfo> async_get_eventlog_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<List<EventLogMessage>> async_getf_eventlog_messages(ulong start, ulong count,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_eventlog_clear_messages(ulong offset, ulong count,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_eventlog_clear_all_messages(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
}
public class EventLogDevice_stub : ServiceStub , EventLogDevice, async_EventLogDevice{
    private Pipe<EventLogMessage> rr_eventlog_message_stream;
    public EventLogDevice_stub(WrappedServiceStub innerstub) : base(innerstub) {
    rr_eventlog_message_stream=new Pipe<EventLogMessage>(innerstub.GetPipe("eventlog_message_stream"));
    }
    public com.robotraconteur.device.DeviceInfo device_info {
    get {
    return MessageElementUtil.UnpackStructure<com.robotraconteur.device.DeviceInfo>(rr_innerstub.PropertyGet("device_info"));
    }
    }
    public EventLogInfo eventlog_info {
    get {
    return MessageElementUtil.UnpackStructure<EventLogInfo>(rr_innerstub.PropertyGet("eventlog_info"));
    }
    }
    public List<EventLogMessage> getf_eventlog_messages(ulong start, ulong count) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackScalar<ulong>("start",start));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackScalar<ulong>("count",count));
    using(MessageElement rr_me=rr_innerstub.FunctionCall("getf_eventlog_messages",rr_param))
    {
    return MessageElementUtil.UnpackList<EventLogMessage>(rr_me);
    }
    }
    }
    public void eventlog_clear_messages(ulong offset, ulong count) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackScalar<ulong>("offset",offset));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackScalar<ulong>("count",count));
    using(MessageElement rr_me=rr_innerstub.FunctionCall("eventlog_clear_messages",rr_param))
    {
    }
    }
    }
    public void eventlog_clear_all_messages() {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    using(MessageElement rr_me=rr_innerstub.FunctionCall("eventlog_clear_all_messages",rr_param))
    {
    }
    }
    }
    public override void DispatchEvent(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    }
    public Pipe<EventLogMessage> eventlog_message_stream {
    get { return rr_eventlog_message_stream;  }
    set { throw new InvalidOperationException();}
    }
    public override MessageElement CallbackCall(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public virtual async Task<com.robotraconteur.device.DeviceInfo> async_get_device_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("device_info",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<com.robotraconteur.device.DeviceInfo>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<EventLogInfo> async_get_eventlog_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("eventlog_info",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<EventLogInfo>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<List<EventLogMessage>> async_getf_eventlog_messages(ulong start, ulong count,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackScalar<ulong>("start",start));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackScalar<ulong>("count",count));
    using(var rr_return = await rr_async_FunctionCall("getf_eventlog_messages",rr_param,rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackList<EventLogMessage>(rr_return);
    return rr_ret;
    } } }
    public virtual async Task async_eventlog_clear_messages(ulong offset, ulong count,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackScalar<ulong>("offset",offset));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackScalar<ulong>("count",count));
    using(var rr_return = await rr_async_FunctionCall("eventlog_clear_messages",rr_param,rr_timeout)) {
    } } }
    public virtual async Task async_eventlog_clear_all_messages(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    using(var rr_return = await rr_async_FunctionCall("eventlog_clear_all_messages",rr_param,rr_timeout)) {
    } } }
}
public class EventLog_skel : ServiceSkel {
    protected EventLog obj;
    protected async_EventLog async_obj;
    public EventLog_skel(object o) : base(o)    {
    obj=(EventLog)o;
    async_obj = o as async_EventLog;
    }
    public override void ReleaseCastObject() { 
    obj=null;
    async_obj=null;
    base.ReleaseCastObject();
    }
    public override MessageElement CallGetProperty(string membername, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    case "eventlog_info":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_eventlog_info().ContinueWith(t => async_adapter.EndTask<EventLogInfo>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    EventLogInfo ret=obj.eventlog_info;
    return MessageElementUtil.PackStructure("return",ret);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void CallSetProperty(string membername, MessageElement m, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override MessageElement CallFunction(string rr_membername, vectorptr_messageelement rr_m, WrappedServiceSkelAsyncAdapter rr_async_adapter) {
    switch (rr_membername) {
    case "getf_eventlog_messages":
    {
    ulong start=(MessageElementUtil.UnpackScalar<ulong>(vectorptr_messageelement_util.FindElement(rr_m,"start")));
    ulong count=(MessageElementUtil.UnpackScalar<ulong>(vectorptr_messageelement_util.FindElement(rr_m,"count")));
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_getf_eventlog_messages(start, count).ContinueWith(t => rr_async_adapter.EndTask<List<EventLogMessage>>(t,async_ret => MessageElementUtil.PackListType<EventLogMessage>("return",async_ret)));
    return null;
    }
    List<EventLogMessage> rr_ret=this.obj.getf_eventlog_messages(start, count);
    return MessageElementUtil.PackListType<EventLogMessage>("return",rr_ret);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override object GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(EventLog)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(EventLog)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void InitPipeServers(object rrobj1) {
    obj=(EventLog)rrobj1;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(EventLog)rrobj1;
    }
    public override void InitWireServers(object rrobj1) {
    obj=(EventLog)rrobj1;
    }
    public override WrappedArrayMemoryDirector GetArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedMultiDimArrayMemoryDirector GetMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodArrayMemoryDirector GetPodArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodMultiDimArrayMemoryDirector GetPodMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedArrayMemoryDirector GetNamedArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedMultiDimArrayMemoryDirector GetNamedMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override string RRType { get { return "com.robotraconteur.eventlog.EventLog"; } }
}
public class EventLogDevice_skel : ServiceSkel {
    protected EventLogDevice obj;
    protected async_EventLogDevice async_obj;
    public EventLogDevice_skel(object o) : base(o)    {
    obj=(EventLogDevice)o;
    async_obj = o as async_EventLogDevice;
    }
    public override void ReleaseCastObject() { 
    obj=null;
    async_obj=null;
    base.ReleaseCastObject();
    }
    public override MessageElement CallGetProperty(string membername, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    case "device_info":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_device_info().ContinueWith(t => async_adapter.EndTask<com.robotraconteur.device.DeviceInfo>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    com.robotraconteur.device.DeviceInfo ret=obj.device_info;
    return MessageElementUtil.PackStructure("return",ret);
    }
    case "eventlog_info":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_eventlog_info().ContinueWith(t => async_adapter.EndTask<EventLogInfo>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    EventLogInfo ret=obj.eventlog_info;
    return MessageElementUtil.PackStructure("return",ret);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void CallSetProperty(string membername, MessageElement m, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override MessageElement CallFunction(string rr_membername, vectorptr_messageelement rr_m, WrappedServiceSkelAsyncAdapter rr_async_adapter) {
    switch (rr_membername) {
    case "getf_eventlog_messages":
    {
    ulong start=(MessageElementUtil.UnpackScalar<ulong>(vectorptr_messageelement_util.FindElement(rr_m,"start")));
    ulong count=(MessageElementUtil.UnpackScalar<ulong>(vectorptr_messageelement_util.FindElement(rr_m,"count")));
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_getf_eventlog_messages(start, count).ContinueWith(t => rr_async_adapter.EndTask<List<EventLogMessage>>(t,async_ret => MessageElementUtil.PackListType<EventLogMessage>("return",async_ret)));
    return null;
    }
    List<EventLogMessage> rr_ret=this.obj.getf_eventlog_messages(start, count);
    return MessageElementUtil.PackListType<EventLogMessage>("return",rr_ret);
    }
    case "eventlog_clear_messages":
    {
    ulong offset=(MessageElementUtil.UnpackScalar<ulong>(vectorptr_messageelement_util.FindElement(rr_m,"offset")));
    ulong count=(MessageElementUtil.UnpackScalar<ulong>(vectorptr_messageelement_util.FindElement(rr_m,"count")));
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_eventlog_clear_messages(offset, count).ContinueWith(t => rr_async_adapter.EndTask(t,new MessageElement("return",(int)0)));
    return null;
    }
    this.obj.eventlog_clear_messages(offset, count);
    return new MessageElement("return",(int)0);
    }
    case "eventlog_clear_all_messages":
    {
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_eventlog_clear_all_messages().ContinueWith(t => rr_async_adapter.EndTask(t,new MessageElement("return",(int)0)));
    return null;
    }
    this.obj.eventlog_clear_all_messages();
    return new MessageElement("return",(int)0);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override object GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(EventLogDevice)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(EventLogDevice)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void InitPipeServers(object rrobj1) {
    obj=(EventLogDevice)rrobj1;
    obj.eventlog_message_stream=new Pipe<EventLogMessage>(innerskel.GetPipe("eventlog_message_stream"));
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(EventLogDevice)rrobj1;
    }
    public override void InitWireServers(object rrobj1) {
    obj=(EventLogDevice)rrobj1;
    }
    public override WrappedArrayMemoryDirector GetArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedMultiDimArrayMemoryDirector GetMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodArrayMemoryDirector GetPodArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodMultiDimArrayMemoryDirector GetPodMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedArrayMemoryDirector GetNamedArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedMultiDimArrayMemoryDirector GetNamedMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override string RRType { get { return "com.robotraconteur.eventlog.EventLogDevice"; } }
}
public class EventLog_default_impl : EventLog{
    public virtual EventLogInfo eventlog_info {get; set;} = default(EventLogInfo);
    public virtual List<EventLogMessage> getf_eventlog_messages(ulong start, ulong count) {
    throw new NotImplementedException();    }
}
public class EventLogDevice_default_impl : EventLogDevice{
    protected PipeBroadcaster<EventLogMessage> rrvar_eventlog_message_stream;
    public virtual com.robotraconteur.device.DeviceInfo device_info {get; set;} = default(com.robotraconteur.device.DeviceInfo);
    public virtual EventLogInfo eventlog_info {get; set;} = default(EventLogInfo);
    public virtual List<EventLogMessage> getf_eventlog_messages(ulong start, ulong count) {
    throw new NotImplementedException();    }
    public virtual void eventlog_clear_messages(ulong offset, ulong count) {
    throw new NotImplementedException();    }
    public virtual void eventlog_clear_all_messages() {
    throw new NotImplementedException();    }
    public virtual Pipe<EventLogMessage> eventlog_message_stream {
    get { return rrvar_eventlog_message_stream.Pipe;  }
    set {
    if (rrvar_eventlog_message_stream!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_eventlog_message_stream= new PipeBroadcaster<EventLogMessage>(value);
    }
    }
}
public static class RRExtensions{
}
}
namespace com.robotraconteur.fiducial
{
public class Fiducial
{
    public com.robotraconteur.identifier.Identifier fiducial_marker_class;
    public string fiducial_marker;
    public com.robotraconteur.geometry.NamedPose fiducial_pose;
    public double fiducial_scale;
    public com.robotraconteur.color.ColorRGBA foreground_color;
    public com.robotraconteur.color.ColorRGBA background_color;
}

public class FiducialInfo
{
    public com.robotraconteur.identifier.Identifier fiducial_marker_class;
    public string fiducial_marker;
    public string fiducial_marker_range;
    public com.robotraconteur.geometry.Size2D default_size;
    public com.robotraconteur.color.ColorRGBA default_foreground_color;
    public com.robotraconteur.color.ColorRGBA default_background_color;
    public com.robotraconteur.image.CompressedImage marker_template;
    public com.robotraconteur.geometry.Point2D marker_template_centroid;
    public Dictionary<string,object> extended;
}

public class RecognizedFiducial
{
    public com.robotraconteur.identifier.Identifier fiducial_marker_class;
    public string fiducial_marker;
    public com.robotraconteur.geometry.NamedPoseWithCovariance pose;
    public double confidence;
    public Dictionary<string,object> extended;
}

public class RecognizedFiducials
{
    public List<RecognizedFiducial> recognized_fiducials;
    public object source_data;
    public Dictionary<string,object> extended;
}

public class FiducialSensorInfo
{
    public com.robotraconteur.device.DeviceInfo device_info;
    public com.robotraconteur.geometry.BoundingBox range;
    public com.robotraconteur.geometry.Vector3 resolution;
    public List<com.robotraconteur.param.ParameterInfo> param_info;
    public List<FiducialInfo> fiducial_info;
    public Dictionary<string,object> extended;
}

public class FiducialSensorData
{
    public com.robotraconteur.sensordata.SensorDataHeader sensor_data;
    public RecognizedFiducials fiducials;
}

[RobotRaconteurServiceObjectInterface()]
public interface FiducialSensor : com.robotraconteur.device.Device, com.robotraconteur.device.clock.DeviceClock, com.robotraconteur.device.isoch.IsochDevice
{
    com.robotraconteur.device.DeviceInfo device_info { get; 	}
    FiducialSensorInfo fiducial_sensor_info { get; 	}
    com.robotraconteur.device.isoch.IsochInfo isoch_info { get; 	}
    uint isoch_downsample { get;  set; 	}
    RecognizedFiducials capture_fiducials();
    object getf_param(string param_name);
    void setf_param(string param_name, object value_);
    Pipe<FiducialSensorData> fiducials_sensor_data{ get; set; }
    Wire<com.robotraconteur.device.clock.DeviceTime> device_clock_now{ get; set; }
}

}
namespace com.robotraconteur.fiducial
{
public class com__robotraconteur__fiducialFactory : ServiceFactory
{
    public override string DefString()
{
    const string s="service com.robotraconteur.fiducial\n\nstdver 0.10\n\nimport com.robotraconteur.identifier\nimport com.robotraconteur.geometry\nimport com.robotraconteur.color\nimport com.robotraconteur.image\nimport com.robotraconteur.device\nimport com.robotraconteur.param\nimport com.robotraconteur.sensordata\nimport com.robotraconteur.device.isoch\nimport com.robotraconteur.device.clock\n\nusing com.robotraconteur.identifier.Identifier\nusing com.robotraconteur.geometry.NamedPose\nusing com.robotraconteur.geometry.NamedPoseWithCovariance\nusing com.robotraconteur.geometry.Point2D\nusing com.robotraconteur.geometry.Size2D\nusing com.robotraconteur.geometry.BoundingBox\nusing com.robotraconteur.geometry.Vector3\nusing com.robotraconteur.color.ColorRGBA\nusing com.robotraconteur.image.CompressedImage\nusing com.robotraconteur.device.Device\nusing com.robotraconteur.device.DeviceInfo\nusing com.robotraconteur.param.ParameterInfo\nusing com.robotraconteur.sensordata.SensorDataHeader\nusing com.robotraconteur.device.isoch.IsochDevice\nusing com.robotraconteur.device.isoch.IsochInfo\nusing com.robotraconteur.device.clock.DeviceClock\nusing com.robotraconteur.device.clock.DeviceTime\n\nstruct Fiducial\nfield Identifier fiducial_marker_class\nfield string fiducial_marker\nfield NamedPose fiducial_pose\nfield double fiducial_scale\nfield ColorRGBA foreground_color\nfield ColorRGBA background_color\nend\n\nstruct FiducialInfo\nfield Identifier fiducial_marker_class\nfield string fiducial_marker\nfield string fiducial_marker_range\nfield Size2D default_size\nfield ColorRGBA default_foreground_color\nfield ColorRGBA default_background_color\nfield CompressedImage marker_template\nfield Point2D marker_template_centroid\nfield varvalue{string} extended\nend\n\nstruct RecognizedFiducial\nfield Identifier fiducial_marker_class\nfield string fiducial_marker\nfield NamedPoseWithCovariance pose\nfield double confidence\nfield varvalue{string} extended\nend\n\nstruct RecognizedFiducials\nfield RecognizedFiducial{list} recognized_fiducials\nfield varvalue source_data\nfield varvalue{string} extended\nend\n\nstruct FiducialSensorInfo\nfield DeviceInfo device_info\nfield BoundingBox range\nfield Vector3 resolution\nfield ParameterInfo{list} param_info\nfield FiducialInfo{list} fiducial_info\nfield varvalue{string} extended\nend\n\nstruct FiducialSensorData\nfield SensorDataHeader sensor_data\nfield RecognizedFiducials fiducials\nend\n\nobject FiducialSensor\nimplements Device\nimplements DeviceClock\nimplements IsochDevice\nproperty DeviceInfo device_info [readonly,nolock]\nproperty FiducialSensorInfo fiducial_sensor_info [readonly,nolock]\nfunction RecognizedFiducials capture_fiducials()\npipe FiducialSensorData fiducials_sensor_data [readonly]\nfunction varvalue getf_param(string param_name)\nfunction void setf_param(string param_name, varvalue value)\nproperty IsochInfo isoch_info [readonly,nolock]\nproperty uint32 isoch_downsample [perclient]\nwire DeviceTime device_clock_now [readonly,nolock]\nend\n\n";
    return s;
    }
    public override string GetServiceName() {return "com.robotraconteur.fiducial";}
    public Fiducial_stub Fiducial_stubentry;
    public FiducialInfo_stub FiducialInfo_stubentry;
    public RecognizedFiducial_stub RecognizedFiducial_stubentry;
    public RecognizedFiducials_stub RecognizedFiducials_stubentry;
    public FiducialSensorInfo_stub FiducialSensorInfo_stubentry;
    public FiducialSensorData_stub FiducialSensorData_stubentry;
    public com__robotraconteur__fiducialFactory()
{
    Fiducial_stubentry=new Fiducial_stub(this);
    FiducialInfo_stubentry=new FiducialInfo_stub(this);
    RecognizedFiducial_stubentry=new RecognizedFiducial_stub(this);
    RecognizedFiducials_stubentry=new RecognizedFiducials_stub(this);
    FiducialSensorInfo_stubentry=new FiducialSensorInfo_stub(this);
    FiducialSensorData_stubentry=new FiducialSensorData_stub(this);
    }
    public override IStructureStub FindStructureStub(string objecttype)
    {
    if (objecttype=="Fiducial")    return Fiducial_stubentry;
    if (objecttype=="FiducialInfo")    return FiducialInfo_stubentry;
    if (objecttype=="RecognizedFiducial")    return RecognizedFiducial_stubentry;
    if (objecttype=="RecognizedFiducials")    return RecognizedFiducials_stubentry;
    if (objecttype=="FiducialSensorInfo")    return FiducialSensorInfo_stubentry;
    if (objecttype=="FiducialSensorData")    return FiducialSensorData_stubentry;
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public override IPodStub FindPodStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override INamedArrayStub FindNamedArrayStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override ServiceStub CreateStub(WrappedServiceStub innerstub) {
    string objecttype=innerstub.RR_objecttype.GetServiceDefinition().Name + "." + innerstub.RR_objecttype.Name;    string objshort;
    if (CompareNamespace(objecttype, out objshort)) {
    switch (objshort) {
    case "FiducialSensor":
    return new FiducialSensor_stub(innerstub);
    default:
    break;
    }
    } else {
    string ext_service_type=RobotRaconteurNode.SplitQualifiedName(objecttype).Item1;
    return RobotRaconteurNode.s.GetServiceType(ext_service_type).CreateStub(innerstub);
    }
    throw new ServiceException("Could not create stub");
    }
    public override ServiceSkel CreateSkel(object obj) {
    string objtype = RobotRaconteurNode.GetTypeString(ServiceSkelUtil.FindParentInterface(obj.GetType()));
    string objshort;
    if (CompareNamespace(objtype, out objshort)) {
    switch(objshort) {
    case "FiducialSensor":
    return new FiducialSensor_skel((FiducialSensor)obj);
    default:
    break;
    }
    } else {
    string ext_service_type=RobotRaconteurNode.SplitQualifiedName(objtype).Item1;
    return RobotRaconteurNode.s.GetServiceFactory(ext_service_type).CreateSkel(obj);
    }
    throw new ServiceException("Could not create skel");
    }
    public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp){
    if (rr_exp==null) return rr_exp;
    string rr_type=rr_exp.Error;
    if (!rr_type.Contains(".")) return rr_exp;
    string rr_stype;
    if (CompareNamespace(rr_type, out rr_stype)) {
    } else {
    return RobotRaconteurNode.s.DownCastException(rr_exp); 
    }
    return rr_exp;
    }
}

public class Fiducial_stub : IStructureStub {
    public Fiducial_stub(com__robotraconteur__fiducialFactory d) {def=d;}
    private com__robotraconteur__fiducialFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    Fiducial s = (Fiducial)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("fiducial_marker_class",s.fiducial_marker_class));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackString("fiducial_marker",s.fiducial_marker));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("fiducial_pose",s.fiducial_pose));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<double>("fiducial_scale",s.fiducial_scale));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.color.ColorRGBA>("foreground_color",ref s.foreground_color));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.color.ColorRGBA>("background_color",ref s.background_color));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.fiducial.Fiducial",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    Fiducial s=new Fiducial();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.fiducial_marker_class =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(MessageElement.FindElement(mm,"fiducial_marker_class"));
    s.fiducial_marker =MessageElementUtil.UnpackString(MessageElement.FindElement(mm,"fiducial_marker"));
    s.fiducial_pose =MessageElementUtil.UnpackStructure<com.robotraconteur.geometry.NamedPose>(MessageElement.FindElement(mm,"fiducial_pose"));
    s.fiducial_scale =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(mm,"fiducial_scale")));
    s.foreground_color =MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.color.ColorRGBA>(MessageElement.FindElement(mm,"foreground_color"));
    s.background_color =MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.color.ColorRGBA>(MessageElement.FindElement(mm,"background_color"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class FiducialInfo_stub : IStructureStub {
    public FiducialInfo_stub(com__robotraconteur__fiducialFactory d) {def=d;}
    private com__robotraconteur__fiducialFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    FiducialInfo s = (FiducialInfo)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("fiducial_marker_class",s.fiducial_marker_class));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackString("fiducial_marker",s.fiducial_marker));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackString("fiducial_marker_range",s.fiducial_marker_range));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Size2D>("default_size",ref s.default_size));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.color.ColorRGBA>("default_foreground_color",ref s.default_foreground_color));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.color.ColorRGBA>("default_background_color",ref s.default_background_color));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("marker_template",s.marker_template));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Point2D>("marker_template_centroid",ref s.marker_template_centroid));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackMapType<string,object>("extended",s.extended));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.fiducial.FiducialInfo",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    FiducialInfo s=new FiducialInfo();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.fiducial_marker_class =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(MessageElement.FindElement(mm,"fiducial_marker_class"));
    s.fiducial_marker =MessageElementUtil.UnpackString(MessageElement.FindElement(mm,"fiducial_marker"));
    s.fiducial_marker_range =MessageElementUtil.UnpackString(MessageElement.FindElement(mm,"fiducial_marker_range"));
    s.default_size =MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.Size2D>(MessageElement.FindElement(mm,"default_size"));
    s.default_foreground_color =MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.color.ColorRGBA>(MessageElement.FindElement(mm,"default_foreground_color"));
    s.default_background_color =MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.color.ColorRGBA>(MessageElement.FindElement(mm,"default_background_color"));
    s.marker_template =MessageElementUtil.UnpackStructure<com.robotraconteur.image.CompressedImage>(MessageElement.FindElement(mm,"marker_template"));
    s.marker_template_centroid =MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.Point2D>(MessageElement.FindElement(mm,"marker_template_centroid"));
    s.extended =MessageElementUtil.UnpackMap<string,object>(MessageElement.FindElement(mm,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class RecognizedFiducial_stub : IStructureStub {
    public RecognizedFiducial_stub(com__robotraconteur__fiducialFactory d) {def=d;}
    private com__robotraconteur__fiducialFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    RecognizedFiducial s = (RecognizedFiducial)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("fiducial_marker_class",s.fiducial_marker_class));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackString("fiducial_marker",s.fiducial_marker));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("pose",s.pose));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<double>("confidence",s.confidence));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackMapType<string,object>("extended",s.extended));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.fiducial.RecognizedFiducial",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    RecognizedFiducial s=new RecognizedFiducial();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.fiducial_marker_class =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(MessageElement.FindElement(mm,"fiducial_marker_class"));
    s.fiducial_marker =MessageElementUtil.UnpackString(MessageElement.FindElement(mm,"fiducial_marker"));
    s.pose =MessageElementUtil.UnpackStructure<com.robotraconteur.geometry.NamedPoseWithCovariance>(MessageElement.FindElement(mm,"pose"));
    s.confidence =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(mm,"confidence")));
    s.extended =MessageElementUtil.UnpackMap<string,object>(MessageElement.FindElement(mm,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class RecognizedFiducials_stub : IStructureStub {
    public RecognizedFiducials_stub(com__robotraconteur__fiducialFactory d) {def=d;}
    private com__robotraconteur__fiducialFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    RecognizedFiducials s = (RecognizedFiducials)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackListType<RecognizedFiducial>("recognized_fiducials",s.recognized_fiducials));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackVarType("source_data",s.source_data));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackMapType<string,object>("extended",s.extended));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.fiducial.RecognizedFiducials",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    RecognizedFiducials s=new RecognizedFiducials();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.recognized_fiducials =MessageElementUtil.UnpackList<RecognizedFiducial>(MessageElement.FindElement(mm,"recognized_fiducials"));
    s.source_data =MessageElementUtil.UnpackVarType(MessageElement.FindElement(mm,"source_data"));
    s.extended =MessageElementUtil.UnpackMap<string,object>(MessageElement.FindElement(mm,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class FiducialSensorInfo_stub : IStructureStub {
    public FiducialSensorInfo_stub(com__robotraconteur__fiducialFactory d) {def=d;}
    private com__robotraconteur__fiducialFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    FiducialSensorInfo s = (FiducialSensorInfo)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("device_info",s.device_info));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("range",s.range));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Vector3>("resolution",ref s.resolution));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackListType<com.robotraconteur.param.ParameterInfo>("param_info",s.param_info));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackListType<FiducialInfo>("fiducial_info",s.fiducial_info));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackMapType<string,object>("extended",s.extended));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.fiducial.FiducialSensorInfo",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    FiducialSensorInfo s=new FiducialSensorInfo();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.device_info =MessageElementUtil.UnpackStructure<com.robotraconteur.device.DeviceInfo>(MessageElement.FindElement(mm,"device_info"));
    s.range =MessageElementUtil.UnpackStructure<com.robotraconteur.geometry.BoundingBox>(MessageElement.FindElement(mm,"range"));
    s.resolution =MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.Vector3>(MessageElement.FindElement(mm,"resolution"));
    s.param_info =MessageElementUtil.UnpackList<com.robotraconteur.param.ParameterInfo>(MessageElement.FindElement(mm,"param_info"));
    s.fiducial_info =MessageElementUtil.UnpackList<FiducialInfo>(MessageElement.FindElement(mm,"fiducial_info"));
    s.extended =MessageElementUtil.UnpackMap<string,object>(MessageElement.FindElement(mm,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class FiducialSensorData_stub : IStructureStub {
    public FiducialSensorData_stub(com__robotraconteur__fiducialFactory d) {def=d;}
    private com__robotraconteur__fiducialFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    FiducialSensorData s = (FiducialSensorData)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("sensor_data",s.sensor_data));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("fiducials",s.fiducials));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.fiducial.FiducialSensorData",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    FiducialSensorData s=new FiducialSensorData();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.sensor_data =MessageElementUtil.UnpackStructure<com.robotraconteur.sensordata.SensorDataHeader>(MessageElement.FindElement(mm,"sensor_data"));
    s.fiducials =MessageElementUtil.UnpackStructure<RecognizedFiducials>(MessageElement.FindElement(mm,"fiducials"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public interface async_FiducialSensor : com.robotraconteur.device.async_Device, com.robotraconteur.device.clock.async_DeviceClock, com.robotraconteur.device.isoch.async_IsochDevice
{
    Task<com.robotraconteur.device.DeviceInfo> async_get_device_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<FiducialSensorInfo> async_get_fiducial_sensor_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<com.robotraconteur.device.isoch.IsochInfo> async_get_isoch_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<uint> async_get_isoch_downsample(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_isoch_downsample(uint value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<RecognizedFiducials> async_capture_fiducials(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<object> async_getf_param(string param_name,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_setf_param(string param_name, object value_,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
}
public class FiducialSensor_stub : ServiceStub , FiducialSensor, async_FiducialSensor{
    private Pipe<FiducialSensorData> rr_fiducials_sensor_data;
    private Wire<com.robotraconteur.device.clock.DeviceTime> rr_device_clock_now;
    public FiducialSensor_stub(WrappedServiceStub innerstub) : base(innerstub) {
    rr_fiducials_sensor_data=new Pipe<FiducialSensorData>(innerstub.GetPipe("fiducials_sensor_data"));
    rr_device_clock_now=new Wire<com.robotraconteur.device.clock.DeviceTime>(innerstub.GetWire("device_clock_now"));
    }
    public com.robotraconteur.device.DeviceInfo device_info {
    get {
    return MessageElementUtil.UnpackStructure<com.robotraconteur.device.DeviceInfo>(rr_innerstub.PropertyGet("device_info"));
    }
    }
    public FiducialSensorInfo fiducial_sensor_info {
    get {
    return MessageElementUtil.UnpackStructure<FiducialSensorInfo>(rr_innerstub.PropertyGet("fiducial_sensor_info"));
    }
    }
    public com.robotraconteur.device.isoch.IsochInfo isoch_info {
    get {
    return MessageElementUtil.UnpackStructure<com.robotraconteur.device.isoch.IsochInfo>(rr_innerstub.PropertyGet("isoch_info"));
    }
    }
    public uint isoch_downsample {
    get {
    return (MessageElementUtil.UnpackScalar<uint>(rr_innerstub.PropertyGet("isoch_downsample")));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackScalar<uint>("value",value))
    {
    rr_innerstub.PropertySet("isoch_downsample", m);
    }
    }
    }
    public RecognizedFiducials capture_fiducials() {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    using(MessageElement rr_me=rr_innerstub.FunctionCall("capture_fiducials",rr_param))
    {
    return MessageElementUtil.UnpackStructure<RecognizedFiducials>(rr_me);
    }
    }
    }
    public object getf_param(string param_name) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("param_name",param_name));
    using(MessageElement rr_me=rr_innerstub.FunctionCall("getf_param",rr_param))
    {
    return MessageElementUtil.UnpackVarType(rr_me);
    }
    }
    }
    public void setf_param(string param_name, object value_) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("param_name",param_name));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackVarType("value",value_));
    using(MessageElement rr_me=rr_innerstub.FunctionCall("setf_param",rr_param))
    {
    }
    }
    }
    public override void DispatchEvent(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    }
    public Pipe<FiducialSensorData> fiducials_sensor_data {
    get { return rr_fiducials_sensor_data;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<com.robotraconteur.device.clock.DeviceTime> device_clock_now {
    get { return rr_device_clock_now;  }
    set { throw new InvalidOperationException();}
    }
    public override MessageElement CallbackCall(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public virtual async Task<com.robotraconteur.device.DeviceInfo> async_get_device_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("device_info",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<com.robotraconteur.device.DeviceInfo>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<FiducialSensorInfo> async_get_fiducial_sensor_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("fiducial_sensor_info",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<FiducialSensorInfo>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<com.robotraconteur.device.isoch.IsochInfo> async_get_isoch_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("isoch_info",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<com.robotraconteur.device.isoch.IsochInfo>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<uint> async_get_isoch_downsample(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("isoch_downsample",rr_timeout)) {
    var rr_ret=(MessageElementUtil.UnpackScalar<uint>(rr_value));
    return rr_ret;
    } }
    public virtual async Task async_set_isoch_downsample(uint value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackScalar<uint>("value",value))
    {
    await rr_async_PropertySet("isoch_downsample",mm,rr_timeout);
    }
    }
    public virtual async Task<RecognizedFiducials> async_capture_fiducials(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    using(var rr_return = await rr_async_FunctionCall("capture_fiducials",rr_param,rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<RecognizedFiducials>(rr_return);
    return rr_ret;
    } } }
    public virtual async Task<object> async_getf_param(string param_name,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("param_name",param_name));
    using(var rr_return = await rr_async_FunctionCall("getf_param",rr_param,rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackVarType(rr_return);
    return rr_ret;
    } } }
    public virtual async Task async_setf_param(string param_name, object value_,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("param_name",param_name));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackVarType("value",value_));
    using(var rr_return = await rr_async_FunctionCall("setf_param",rr_param,rr_timeout)) {
    } } }
}
public class FiducialSensor_skel : ServiceSkel {
    protected FiducialSensor obj;
    protected async_FiducialSensor async_obj;
    public FiducialSensor_skel(object o) : base(o)    {
    obj=(FiducialSensor)o;
    async_obj = o as async_FiducialSensor;
    }
    public override void ReleaseCastObject() { 
    obj=null;
    async_obj=null;
    base.ReleaseCastObject();
    }
    public override MessageElement CallGetProperty(string membername, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    case "device_info":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_device_info().ContinueWith(t => async_adapter.EndTask<com.robotraconteur.device.DeviceInfo>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    com.robotraconteur.device.DeviceInfo ret=obj.device_info;
    return MessageElementUtil.PackStructure("return",ret);
    }
    case "fiducial_sensor_info":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_fiducial_sensor_info().ContinueWith(t => async_adapter.EndTask<FiducialSensorInfo>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    FiducialSensorInfo ret=obj.fiducial_sensor_info;
    return MessageElementUtil.PackStructure("return",ret);
    }
    case "isoch_info":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_isoch_info().ContinueWith(t => async_adapter.EndTask<com.robotraconteur.device.isoch.IsochInfo>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    com.robotraconteur.device.isoch.IsochInfo ret=obj.isoch_info;
    return MessageElementUtil.PackStructure("return",ret);
    }
    case "isoch_downsample":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_isoch_downsample().ContinueWith(t => async_adapter.EndTask<uint>(t,async_ret => MessageElementUtil.PackScalar<uint>("return",async_ret)));
    return null;
    }
    uint ret=obj.isoch_downsample;
    return MessageElementUtil.PackScalar<uint>("return",ret);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void CallSetProperty(string membername, MessageElement m, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    case "isoch_downsample":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_isoch_downsample((MessageElementUtil.UnpackScalar<uint>(m))).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.isoch_downsample=(MessageElementUtil.UnpackScalar<uint>(m));
    return;
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override MessageElement CallFunction(string rr_membername, vectorptr_messageelement rr_m, WrappedServiceSkelAsyncAdapter rr_async_adapter) {
    switch (rr_membername) {
    case "capture_fiducials":
    {
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_capture_fiducials().ContinueWith(t => rr_async_adapter.EndTask<RecognizedFiducials>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    RecognizedFiducials rr_ret=this.obj.capture_fiducials();
    return MessageElementUtil.PackStructure("return",rr_ret);
    }
    case "getf_param":
    {
    string param_name=MessageElementUtil.UnpackString(vectorptr_messageelement_util.FindElement(rr_m,"param_name"));
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_getf_param(param_name).ContinueWith(t => rr_async_adapter.EndTask<object>(t,async_ret => MessageElementUtil.PackVarType("return",async_ret)));
    return null;
    }
    object rr_ret=this.obj.getf_param(param_name);
    return MessageElementUtil.PackVarType("return",rr_ret);
    }
    case "setf_param":
    {
    string param_name=MessageElementUtil.UnpackString(vectorptr_messageelement_util.FindElement(rr_m,"param_name"));
    object value_=MessageElementUtil.UnpackVarType(vectorptr_messageelement_util.FindElement(rr_m,"value"));
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_setf_param(param_name, value_).ContinueWith(t => rr_async_adapter.EndTask(t,new MessageElement("return",(int)0)));
    return null;
    }
    this.obj.setf_param(param_name, value_);
    return new MessageElement("return",(int)0);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override object GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(FiducialSensor)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(FiducialSensor)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void InitPipeServers(object rrobj1) {
    obj=(FiducialSensor)rrobj1;
    obj.fiducials_sensor_data=new Pipe<FiducialSensorData>(innerskel.GetPipe("fiducials_sensor_data"));
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(FiducialSensor)rrobj1;
    }
    public override void InitWireServers(object rrobj1) {
    obj=(FiducialSensor)rrobj1;
    obj.device_clock_now=new Wire<com.robotraconteur.device.clock.DeviceTime>(innerskel.GetWire("device_clock_now"));
    }
    public override WrappedArrayMemoryDirector GetArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedMultiDimArrayMemoryDirector GetMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodArrayMemoryDirector GetPodArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodMultiDimArrayMemoryDirector GetPodMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedArrayMemoryDirector GetNamedArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedMultiDimArrayMemoryDirector GetNamedMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override string RRType { get { return "com.robotraconteur.fiducial.FiducialSensor"; } }
}
public class FiducialSensor_default_impl : FiducialSensor{
    protected PipeBroadcaster<FiducialSensorData> rrvar_fiducials_sensor_data;
    protected WireBroadcaster<com.robotraconteur.device.clock.DeviceTime> rrvar_device_clock_now;
    public virtual com.robotraconteur.device.DeviceInfo device_info {get; set;} = default(com.robotraconteur.device.DeviceInfo);
    public virtual FiducialSensorInfo fiducial_sensor_info {get; set;} = default(FiducialSensorInfo);
    public virtual com.robotraconteur.device.isoch.IsochInfo isoch_info {get; set;} = default(com.robotraconteur.device.isoch.IsochInfo);
    public virtual uint isoch_downsample {get; set;} = default(uint);
    public virtual RecognizedFiducials capture_fiducials() {
    throw new NotImplementedException();    }
    public virtual object getf_param(string param_name) {
    throw new NotImplementedException();    }
    public virtual void setf_param(string param_name, object value_) {
    throw new NotImplementedException();    }
    public virtual Pipe<FiducialSensorData> fiducials_sensor_data {
    get { return rrvar_fiducials_sensor_data.Pipe;  }
    set {
    if (rrvar_fiducials_sensor_data!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_fiducials_sensor_data= new PipeBroadcaster<FiducialSensorData>(value);
    }
    }
    public virtual Wire<com.robotraconteur.device.clock.DeviceTime> device_clock_now {
    get { return rrvar_device_clock_now.Wire;  }
    set {
    if (rrvar_device_clock_now!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_device_clock_now= new WireBroadcaster<com.robotraconteur.device.clock.DeviceTime>(value);
    }
    }
}
public static class RRExtensions{
}
}
namespace com.robotraconteur.geometry
{
public class NamedTransform
{
    public com.robotraconteur.identifier.Identifier parent_frame;
    public com.robotraconteur.identifier.Identifier child_frame;
    public Transform transform;
}

public class NamedPose
{
    public com.robotraconteur.identifier.Identifier parent_frame;
    public com.robotraconteur.identifier.Identifier frame;
    public Pose pose;
}

public class PoseWithCovariance
{
    public Pose pose;
    public MultiDimArray covariance;
}

public class NamedPoseWithCovariance
{
    public NamedPose pose;
    public MultiDimArray covariance;
}

public class NamedPose2D
{
    public com.robotraconteur.identifier.Identifier parent_frame;
    public com.robotraconteur.identifier.Identifier frame;
    public Pose2D pose;
}

public class NamedSpatialVelocity
{
    public com.robotraconteur.identifier.Identifier parent_frame;
    public com.robotraconteur.identifier.Identifier frame;
    public SpatialVelocity velocity;
}

public class NamedSpatialAcceleration
{
    public com.robotraconteur.identifier.Identifier parent_frame;
    public com.robotraconteur.identifier.Identifier frame;
    public SpatialAcceleration acceleration;
}

public class NamedWrench
{
    public com.robotraconteur.identifier.Identifier parent_frame;
    public com.robotraconteur.identifier.Identifier frame;
    public Wrench wrench;
}

public class NamedSpatialInertia
{
    public com.robotraconteur.identifier.Identifier frame;
    public SpatialInertia inertia;
}

public class BoundingBox2D
{
    public NamedPose2D center;
    public Size2D size;
}

public class BoundingBox
{
    public NamedPose center;
    public Size size;
}

[NamedArrayElementTypeAndCount(typeof(double), 2)]
public struct Vector2
{
    public double x;
    public double y;
    public double[] GetNumericArray()
    {
    var a=new ArraySegment<double>(new double[2]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<double> rr_a)
    {
    if(rr_a.Count < 2) throw new ArgumentException("ArraySegment invalid length");
    rr_a.Array[rr_a.Offset + 0] = x;
    rr_a.Array[rr_a.Offset + 1] = y;
    }
    public void AssignFromNumericArray(ref ArraySegment<double> rr_a)
    {
    if(rr_a.Count < 2) throw new ArgumentException("ArraySegment invalid length");
    x = rr_a.Array[rr_a.Offset + 0];
    y = rr_a.Array[rr_a.Offset + 1];
    }
}

[NamedArrayElementTypeAndCount(typeof(double), 3)]
public struct Vector3
{
    public double x;
    public double y;
    public double z;
    public double[] GetNumericArray()
    {
    var a=new ArraySegment<double>(new double[3]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<double> rr_a)
    {
    if(rr_a.Count < 3) throw new ArgumentException("ArraySegment invalid length");
    rr_a.Array[rr_a.Offset + 0] = x;
    rr_a.Array[rr_a.Offset + 1] = y;
    rr_a.Array[rr_a.Offset + 2] = z;
    }
    public void AssignFromNumericArray(ref ArraySegment<double> rr_a)
    {
    if(rr_a.Count < 3) throw new ArgumentException("ArraySegment invalid length");
    x = rr_a.Array[rr_a.Offset + 0];
    y = rr_a.Array[rr_a.Offset + 1];
    z = rr_a.Array[rr_a.Offset + 2];
    }
}

[NamedArrayElementTypeAndCount(typeof(double), 6)]
public struct Vector6
{
    public double alpha;
    public double beta;
    public double gamma;
    public double x;
    public double y;
    public double z;
    public double[] GetNumericArray()
    {
    var a=new ArraySegment<double>(new double[6]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<double> rr_a)
    {
    if(rr_a.Count < 6) throw new ArgumentException("ArraySegment invalid length");
    rr_a.Array[rr_a.Offset + 0] = alpha;
    rr_a.Array[rr_a.Offset + 1] = beta;
    rr_a.Array[rr_a.Offset + 2] = gamma;
    rr_a.Array[rr_a.Offset + 3] = x;
    rr_a.Array[rr_a.Offset + 4] = y;
    rr_a.Array[rr_a.Offset + 5] = z;
    }
    public void AssignFromNumericArray(ref ArraySegment<double> rr_a)
    {
    if(rr_a.Count < 6) throw new ArgumentException("ArraySegment invalid length");
    alpha = rr_a.Array[rr_a.Offset + 0];
    beta = rr_a.Array[rr_a.Offset + 1];
    gamma = rr_a.Array[rr_a.Offset + 2];
    x = rr_a.Array[rr_a.Offset + 3];
    y = rr_a.Array[rr_a.Offset + 4];
    z = rr_a.Array[rr_a.Offset + 5];
    }
}

[NamedArrayElementTypeAndCount(typeof(double), 2)]
public struct Point2D
{
    public double x;
    public double y;
    public double[] GetNumericArray()
    {
    var a=new ArraySegment<double>(new double[2]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<double> rr_a)
    {
    if(rr_a.Count < 2) throw new ArgumentException("ArraySegment invalid length");
    rr_a.Array[rr_a.Offset + 0] = x;
    rr_a.Array[rr_a.Offset + 1] = y;
    }
    public void AssignFromNumericArray(ref ArraySegment<double> rr_a)
    {
    if(rr_a.Count < 2) throw new ArgumentException("ArraySegment invalid length");
    x = rr_a.Array[rr_a.Offset + 0];
    y = rr_a.Array[rr_a.Offset + 1];
    }
}

[NamedArrayElementTypeAndCount(typeof(double), 3)]
public struct Point
{
    public double x;
    public double y;
    public double z;
    public double[] GetNumericArray()
    {
    var a=new ArraySegment<double>(new double[3]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<double> rr_a)
    {
    if(rr_a.Count < 3) throw new ArgumentException("ArraySegment invalid length");
    rr_a.Array[rr_a.Offset + 0] = x;
    rr_a.Array[rr_a.Offset + 1] = y;
    rr_a.Array[rr_a.Offset + 2] = z;
    }
    public void AssignFromNumericArray(ref ArraySegment<double> rr_a)
    {
    if(rr_a.Count < 3) throw new ArgumentException("ArraySegment invalid length");
    x = rr_a.Array[rr_a.Offset + 0];
    y = rr_a.Array[rr_a.Offset + 1];
    z = rr_a.Array[rr_a.Offset + 2];
    }
}

[NamedArrayElementTypeAndCount(typeof(double), 2)]
public struct Size2D
{
    public double width;
    public double height;
    public double[] GetNumericArray()
    {
    var a=new ArraySegment<double>(new double[2]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<double> rr_a)
    {
    if(rr_a.Count < 2) throw new ArgumentException("ArraySegment invalid length");
    rr_a.Array[rr_a.Offset + 0] = width;
    rr_a.Array[rr_a.Offset + 1] = height;
    }
    public void AssignFromNumericArray(ref ArraySegment<double> rr_a)
    {
    if(rr_a.Count < 2) throw new ArgumentException("ArraySegment invalid length");
    width = rr_a.Array[rr_a.Offset + 0];
    height = rr_a.Array[rr_a.Offset + 1];
    }
}

[NamedArrayElementTypeAndCount(typeof(double), 3)]
public struct Size
{
    public double width;
    public double height;
    public double depth;
    public double[] GetNumericArray()
    {
    var a=new ArraySegment<double>(new double[3]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<double> rr_a)
    {
    if(rr_a.Count < 3) throw new ArgumentException("ArraySegment invalid length");
    rr_a.Array[rr_a.Offset + 0] = width;
    rr_a.Array[rr_a.Offset + 1] = height;
    rr_a.Array[rr_a.Offset + 2] = depth;
    }
    public void AssignFromNumericArray(ref ArraySegment<double> rr_a)
    {
    if(rr_a.Count < 3) throw new ArgumentException("ArraySegment invalid length");
    width = rr_a.Array[rr_a.Offset + 0];
    height = rr_a.Array[rr_a.Offset + 1];
    depth = rr_a.Array[rr_a.Offset + 2];
    }
}

[NamedArrayElementTypeAndCount(typeof(double), 4)]
public struct Rect
{
    public Point2D origin;
    public Size2D size;
    public double[] GetNumericArray()
    {
    var a=new ArraySegment<double>(new double[4]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<double> rr_a)
    {
    if(rr_a.Count < 4) throw new ArgumentException("ArraySegment invalid length");
    var rr_a0 = new ArraySegment<double>(rr_a.Array, rr_a.Offset + 0, 2);
    origin.GetNumericArray(ref rr_a0);
    var rr_a2 = new ArraySegment<double>(rr_a.Array, rr_a.Offset + 2, 2);
    size.GetNumericArray(ref rr_a2);
    }
    public void AssignFromNumericArray(ref ArraySegment<double> rr_a)
    {
    if(rr_a.Count < 4) throw new ArgumentException("ArraySegment invalid length");
    var rr_a0 = new ArraySegment<double>(rr_a.Array, rr_a.Offset + 0, 2);
    origin.AssignFromNumericArray(ref rr_a0);
    var rr_a2 = new ArraySegment<double>(rr_a.Array, rr_a.Offset + 2, 2);
    size.AssignFromNumericArray(ref rr_a2);
    }
}

[NamedArrayElementTypeAndCount(typeof(double), 6)]
public struct Box
{
    public Point origin;
    public Size size;
    public double[] GetNumericArray()
    {
    var a=new ArraySegment<double>(new double[6]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<double> rr_a)
    {
    if(rr_a.Count < 6) throw new ArgumentException("ArraySegment invalid length");
    var rr_a0 = new ArraySegment<double>(rr_a.Array, rr_a.Offset + 0, 3);
    origin.GetNumericArray(ref rr_a0);
    var rr_a3 = new ArraySegment<double>(rr_a.Array, rr_a.Offset + 3, 3);
    size.GetNumericArray(ref rr_a3);
    }
    public void AssignFromNumericArray(ref ArraySegment<double> rr_a)
    {
    if(rr_a.Count < 6) throw new ArgumentException("ArraySegment invalid length");
    var rr_a0 = new ArraySegment<double>(rr_a.Array, rr_a.Offset + 0, 3);
    origin.AssignFromNumericArray(ref rr_a0);
    var rr_a3 = new ArraySegment<double>(rr_a.Array, rr_a.Offset + 3, 3);
    size.AssignFromNumericArray(ref rr_a3);
    }
}

[NamedArrayElementTypeAndCount(typeof(double), 4)]
public struct Quaternion
{
    public double w;
    public double x;
    public double y;
    public double z;
    public double[] GetNumericArray()
    {
    var a=new ArraySegment<double>(new double[4]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<double> rr_a)
    {
    if(rr_a.Count < 4) throw new ArgumentException("ArraySegment invalid length");
    rr_a.Array[rr_a.Offset + 0] = w;
    rr_a.Array[rr_a.Offset + 1] = x;
    rr_a.Array[rr_a.Offset + 2] = y;
    rr_a.Array[rr_a.Offset + 3] = z;
    }
    public void AssignFromNumericArray(ref ArraySegment<double> rr_a)
    {
    if(rr_a.Count < 4) throw new ArgumentException("ArraySegment invalid length");
    w = rr_a.Array[rr_a.Offset + 0];
    x = rr_a.Array[rr_a.Offset + 1];
    y = rr_a.Array[rr_a.Offset + 2];
    z = rr_a.Array[rr_a.Offset + 3];
    }
}

[NamedArrayElementTypeAndCount(typeof(double), 4)]
public struct Plane
{
    public Vector3 normal;
    public double a;
    public double[] GetNumericArray()
    {
    var a=new ArraySegment<double>(new double[4]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<double> rr_a)
    {
    if(rr_a.Count < 4) throw new ArgumentException("ArraySegment invalid length");
    var rr_a0 = new ArraySegment<double>(rr_a.Array, rr_a.Offset + 0, 3);
    normal.GetNumericArray(ref rr_a0);
    rr_a.Array[rr_a.Offset + 3] = a;
    }
    public void AssignFromNumericArray(ref ArraySegment<double> rr_a)
    {
    if(rr_a.Count < 4) throw new ArgumentException("ArraySegment invalid length");
    var rr_a0 = new ArraySegment<double>(rr_a.Array, rr_a.Offset + 0, 3);
    normal.AssignFromNumericArray(ref rr_a0);
    a = rr_a.Array[rr_a.Offset + 3];
    }
}

[NamedArrayElementTypeAndCount(typeof(double), 7)]
public struct Transform
{
    public Quaternion rotation;
    public Vector3 translation;
    public double[] GetNumericArray()
    {
    var a=new ArraySegment<double>(new double[7]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<double> rr_a)
    {
    if(rr_a.Count < 7) throw new ArgumentException("ArraySegment invalid length");
    var rr_a0 = new ArraySegment<double>(rr_a.Array, rr_a.Offset + 0, 4);
    rotation.GetNumericArray(ref rr_a0);
    var rr_a4 = new ArraySegment<double>(rr_a.Array, rr_a.Offset + 4, 3);
    translation.GetNumericArray(ref rr_a4);
    }
    public void AssignFromNumericArray(ref ArraySegment<double> rr_a)
    {
    if(rr_a.Count < 7) throw new ArgumentException("ArraySegment invalid length");
    var rr_a0 = new ArraySegment<double>(rr_a.Array, rr_a.Offset + 0, 4);
    rotation.AssignFromNumericArray(ref rr_a0);
    var rr_a4 = new ArraySegment<double>(rr_a.Array, rr_a.Offset + 4, 3);
    translation.AssignFromNumericArray(ref rr_a4);
    }
}

[NamedArrayElementTypeAndCount(typeof(double), 7)]
public struct Pose
{
    public Quaternion orientation;
    public Point position;
    public double[] GetNumericArray()
    {
    var a=new ArraySegment<double>(new double[7]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<double> rr_a)
    {
    if(rr_a.Count < 7) throw new ArgumentException("ArraySegment invalid length");
    var rr_a0 = new ArraySegment<double>(rr_a.Array, rr_a.Offset + 0, 4);
    orientation.GetNumericArray(ref rr_a0);
    var rr_a4 = new ArraySegment<double>(rr_a.Array, rr_a.Offset + 4, 3);
    position.GetNumericArray(ref rr_a4);
    }
    public void AssignFromNumericArray(ref ArraySegment<double> rr_a)
    {
    if(rr_a.Count < 7) throw new ArgumentException("ArraySegment invalid length");
    var rr_a0 = new ArraySegment<double>(rr_a.Array, rr_a.Offset + 0, 4);
    orientation.AssignFromNumericArray(ref rr_a0);
    var rr_a4 = new ArraySegment<double>(rr_a.Array, rr_a.Offset + 4, 3);
    position.AssignFromNumericArray(ref rr_a4);
    }
}

[NamedArrayElementTypeAndCount(typeof(double), 3)]
public struct Pose2D
{
    public double orientation;
    public Point2D position;
    public double[] GetNumericArray()
    {
    var a=new ArraySegment<double>(new double[3]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<double> rr_a)
    {
    if(rr_a.Count < 3) throw new ArgumentException("ArraySegment invalid length");
    rr_a.Array[rr_a.Offset + 0] = orientation;
    var rr_a1 = new ArraySegment<double>(rr_a.Array, rr_a.Offset + 1, 2);
    position.GetNumericArray(ref rr_a1);
    }
    public void AssignFromNumericArray(ref ArraySegment<double> rr_a)
    {
    if(rr_a.Count < 3) throw new ArgumentException("ArraySegment invalid length");
    orientation = rr_a.Array[rr_a.Offset + 0];
    var rr_a1 = new ArraySegment<double>(rr_a.Array, rr_a.Offset + 1, 2);
    position.AssignFromNumericArray(ref rr_a1);
    }
}

[NamedArrayElementTypeAndCount(typeof(double), 6)]
public struct SpatialVelocity
{
    public Vector3 angular;
    public Vector3 linear;
    public double[] GetNumericArray()
    {
    var a=new ArraySegment<double>(new double[6]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<double> rr_a)
    {
    if(rr_a.Count < 6) throw new ArgumentException("ArraySegment invalid length");
    var rr_a0 = new ArraySegment<double>(rr_a.Array, rr_a.Offset + 0, 3);
    angular.GetNumericArray(ref rr_a0);
    var rr_a3 = new ArraySegment<double>(rr_a.Array, rr_a.Offset + 3, 3);
    linear.GetNumericArray(ref rr_a3);
    }
    public void AssignFromNumericArray(ref ArraySegment<double> rr_a)
    {
    if(rr_a.Count < 6) throw new ArgumentException("ArraySegment invalid length");
    var rr_a0 = new ArraySegment<double>(rr_a.Array, rr_a.Offset + 0, 3);
    angular.AssignFromNumericArray(ref rr_a0);
    var rr_a3 = new ArraySegment<double>(rr_a.Array, rr_a.Offset + 3, 3);
    linear.AssignFromNumericArray(ref rr_a3);
    }
}

[NamedArrayElementTypeAndCount(typeof(double), 6)]
public struct SpatialAcceleration
{
    public Vector3 angular;
    public Vector3 linear;
    public double[] GetNumericArray()
    {
    var a=new ArraySegment<double>(new double[6]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<double> rr_a)
    {
    if(rr_a.Count < 6) throw new ArgumentException("ArraySegment invalid length");
    var rr_a0 = new ArraySegment<double>(rr_a.Array, rr_a.Offset + 0, 3);
    angular.GetNumericArray(ref rr_a0);
    var rr_a3 = new ArraySegment<double>(rr_a.Array, rr_a.Offset + 3, 3);
    linear.GetNumericArray(ref rr_a3);
    }
    public void AssignFromNumericArray(ref ArraySegment<double> rr_a)
    {
    if(rr_a.Count < 6) throw new ArgumentException("ArraySegment invalid length");
    var rr_a0 = new ArraySegment<double>(rr_a.Array, rr_a.Offset + 0, 3);
    angular.AssignFromNumericArray(ref rr_a0);
    var rr_a3 = new ArraySegment<double>(rr_a.Array, rr_a.Offset + 3, 3);
    linear.AssignFromNumericArray(ref rr_a3);
    }
}

[NamedArrayElementTypeAndCount(typeof(double), 6)]
public struct Wrench
{
    public Vector3 torque;
    public Vector3 force;
    public double[] GetNumericArray()
    {
    var a=new ArraySegment<double>(new double[6]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<double> rr_a)
    {
    if(rr_a.Count < 6) throw new ArgumentException("ArraySegment invalid length");
    var rr_a0 = new ArraySegment<double>(rr_a.Array, rr_a.Offset + 0, 3);
    torque.GetNumericArray(ref rr_a0);
    var rr_a3 = new ArraySegment<double>(rr_a.Array, rr_a.Offset + 3, 3);
    force.GetNumericArray(ref rr_a3);
    }
    public void AssignFromNumericArray(ref ArraySegment<double> rr_a)
    {
    if(rr_a.Count < 6) throw new ArgumentException("ArraySegment invalid length");
    var rr_a0 = new ArraySegment<double>(rr_a.Array, rr_a.Offset + 0, 3);
    torque.AssignFromNumericArray(ref rr_a0);
    var rr_a3 = new ArraySegment<double>(rr_a.Array, rr_a.Offset + 3, 3);
    force.AssignFromNumericArray(ref rr_a3);
    }
}

[NamedArrayElementTypeAndCount(typeof(double), 10)]
public struct SpatialInertia
{
    public double m;
    public Vector3 com;
    public double ixx;
    public double ixy;
    public double ixz;
    public double iyy;
    public double iyz;
    public double izz;
    public double[] GetNumericArray()
    {
    var a=new ArraySegment<double>(new double[10]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<double> rr_a)
    {
    if(rr_a.Count < 10) throw new ArgumentException("ArraySegment invalid length");
    rr_a.Array[rr_a.Offset + 0] = m;
    var rr_a1 = new ArraySegment<double>(rr_a.Array, rr_a.Offset + 1, 3);
    com.GetNumericArray(ref rr_a1);
    rr_a.Array[rr_a.Offset + 4] = ixx;
    rr_a.Array[rr_a.Offset + 5] = ixy;
    rr_a.Array[rr_a.Offset + 6] = ixz;
    rr_a.Array[rr_a.Offset + 7] = iyy;
    rr_a.Array[rr_a.Offset + 8] = iyz;
    rr_a.Array[rr_a.Offset + 9] = izz;
    }
    public void AssignFromNumericArray(ref ArraySegment<double> rr_a)
    {
    if(rr_a.Count < 10) throw new ArgumentException("ArraySegment invalid length");
    m = rr_a.Array[rr_a.Offset + 0];
    var rr_a1 = new ArraySegment<double>(rr_a.Array, rr_a.Offset + 1, 3);
    com.AssignFromNumericArray(ref rr_a1);
    ixx = rr_a.Array[rr_a.Offset + 4];
    ixy = rr_a.Array[rr_a.Offset + 5];
    ixz = rr_a.Array[rr_a.Offset + 6];
    iyy = rr_a.Array[rr_a.Offset + 7];
    iyz = rr_a.Array[rr_a.Offset + 8];
    izz = rr_a.Array[rr_a.Offset + 9];
    }
}

}
namespace com.robotraconteur.geometry
{
public class com__robotraconteur__geometryFactory : ServiceFactory
{
    public override string DefString()
{
    const string s="service com.robotraconteur.geometry\n\nstdver 0.10\n\nimport com.robotraconteur.identifier\n\nusing com.robotraconteur.identifier.Identifier\n\nnamedarray Vector2\nfield double x\nfield double y\nend\n\nnamedarray Vector3\nfield double x\nfield double y\nfield double z\nend\n\nnamedarray Vector6\nfield double alpha\nfield double beta\nfield double gamma\nfield double x\nfield double y\nfield double z\nend\n\nnamedarray Point2D\nfield double x\nfield double y\nend\n\nnamedarray Point\nfield double x\nfield double y\nfield double z\nend\n\nnamedarray Size2D\nfield double width\nfield double height\nend\n\nnamedarray Size\nfield double width\nfield double height\nfield double depth\nend\n\nnamedarray Rect\nfield Point2D origin\nfield Size2D size\nend\n\nnamedarray Box\nfield Point origin\nfield Size size\nend\n\nnamedarray Quaternion\nfield double w\nfield double x\nfield double y\nfield double z\nend\n\nnamedarray Plane\nfield Vector3 normal\nfield double a\nend\n\nnamedarray Transform\nfield Quaternion rotation\nfield Vector3 translation\nend\n\nstruct NamedTransform\nfield Identifier parent_frame\nfield Identifier child_frame\nfield Transform transform\nend\n\nnamedarray Pose\nfield Quaternion orientation\nfield Point position\nend\n\nstruct NamedPose\nfield Identifier parent_frame\nfield Identifier frame\nfield Pose pose\nend\n\nstruct PoseWithCovariance\nfield Pose pose\nfield double[6,6] covariance\nend\n\nstruct NamedPoseWithCovariance\nfield NamedPose pose\nfield double[6,6] covariance\nend\n\nnamedarray Pose2D\nfield double orientation\nfield Point2D position\nend\n\nstruct NamedPose2D\nfield Identifier parent_frame\nfield Identifier frame\nfield Pose2D pose\nend\n\nnamedarray SpatialVelocity\nfield Vector3 angular\nfield Vector3 linear\nend\n\nstruct NamedSpatialVelocity\nfield Identifier parent_frame\nfield Identifier frame\nfield SpatialVelocity velocity\nend\n\nnamedarray SpatialAcceleration\nfield Vector3 angular\nfield Vector3 linear\nend\n\nstruct NamedSpatialAcceleration\nfield Identifier parent_frame\nfield Identifier frame\nfield SpatialAcceleration acceleration\nend\n\nnamedarray Wrench\nfield Vector3 torque\nfield Vector3 force\nend\n\nstruct NamedWrench\nfield Identifier parent_frame\nfield Identifier frame\nfield Wrench wrench\nend\n\nnamedarray SpatialInertia\nfield double m\nfield Vector3 com\nfield double ixx\nfield double ixy\nfield double ixz\nfield double iyy\nfield double iyz\nfield double izz\nend\n\nstruct NamedSpatialInertia\nfield Identifier frame\nfield SpatialInertia inertia\nend\n\nstruct BoundingBox2D\nfield NamedPose2D center\nfield Size2D size\nend\n\nstruct BoundingBox\nfield NamedPose center\nfield Size size\nend\n\n";
    return s;
    }
    public override string GetServiceName() {return "com.robotraconteur.geometry";}
    public NamedTransform_stub NamedTransform_stubentry;
    public NamedPose_stub NamedPose_stubentry;
    public PoseWithCovariance_stub PoseWithCovariance_stubentry;
    public NamedPoseWithCovariance_stub NamedPoseWithCovariance_stubentry;
    public NamedPose2D_stub NamedPose2D_stubentry;
    public NamedSpatialVelocity_stub NamedSpatialVelocity_stubentry;
    public NamedSpatialAcceleration_stub NamedSpatialAcceleration_stubentry;
    public NamedWrench_stub NamedWrench_stubentry;
    public NamedSpatialInertia_stub NamedSpatialInertia_stubentry;
    public BoundingBox2D_stub BoundingBox2D_stubentry;
    public BoundingBox_stub BoundingBox_stubentry;
    public Vector2_stub Vector2_stubentry;
    public Vector3_stub Vector3_stubentry;
    public Vector6_stub Vector6_stubentry;
    public Point2D_stub Point2D_stubentry;
    public Point_stub Point_stubentry;
    public Size2D_stub Size2D_stubentry;
    public Size_stub Size_stubentry;
    public Rect_stub Rect_stubentry;
    public Box_stub Box_stubentry;
    public Quaternion_stub Quaternion_stubentry;
    public Plane_stub Plane_stubentry;
    public Transform_stub Transform_stubentry;
    public Pose_stub Pose_stubentry;
    public Pose2D_stub Pose2D_stubentry;
    public SpatialVelocity_stub SpatialVelocity_stubentry;
    public SpatialAcceleration_stub SpatialAcceleration_stubentry;
    public Wrench_stub Wrench_stubentry;
    public SpatialInertia_stub SpatialInertia_stubentry;
    public com__robotraconteur__geometryFactory()
{
    NamedTransform_stubentry=new NamedTransform_stub(this);
    NamedPose_stubentry=new NamedPose_stub(this);
    PoseWithCovariance_stubentry=new PoseWithCovariance_stub(this);
    NamedPoseWithCovariance_stubentry=new NamedPoseWithCovariance_stub(this);
    NamedPose2D_stubentry=new NamedPose2D_stub(this);
    NamedSpatialVelocity_stubentry=new NamedSpatialVelocity_stub(this);
    NamedSpatialAcceleration_stubentry=new NamedSpatialAcceleration_stub(this);
    NamedWrench_stubentry=new NamedWrench_stub(this);
    NamedSpatialInertia_stubentry=new NamedSpatialInertia_stub(this);
    BoundingBox2D_stubentry=new BoundingBox2D_stub(this);
    BoundingBox_stubentry=new BoundingBox_stub(this);
    Vector2_stubentry=new Vector2_stub();
    Vector3_stubentry=new Vector3_stub();
    Vector6_stubentry=new Vector6_stub();
    Point2D_stubentry=new Point2D_stub();
    Point_stubentry=new Point_stub();
    Size2D_stubentry=new Size2D_stub();
    Size_stubentry=new Size_stub();
    Rect_stubentry=new Rect_stub();
    Box_stubentry=new Box_stub();
    Quaternion_stubentry=new Quaternion_stub();
    Plane_stubentry=new Plane_stub();
    Transform_stubentry=new Transform_stub();
    Pose_stubentry=new Pose_stub();
    Pose2D_stubentry=new Pose2D_stub();
    SpatialVelocity_stubentry=new SpatialVelocity_stub();
    SpatialAcceleration_stubentry=new SpatialAcceleration_stub();
    Wrench_stubentry=new Wrench_stub();
    SpatialInertia_stubentry=new SpatialInertia_stub();
    }
    public override IStructureStub FindStructureStub(string objecttype)
    {
    if (objecttype=="NamedTransform")    return NamedTransform_stubentry;
    if (objecttype=="NamedPose")    return NamedPose_stubentry;
    if (objecttype=="PoseWithCovariance")    return PoseWithCovariance_stubentry;
    if (objecttype=="NamedPoseWithCovariance")    return NamedPoseWithCovariance_stubentry;
    if (objecttype=="NamedPose2D")    return NamedPose2D_stubentry;
    if (objecttype=="NamedSpatialVelocity")    return NamedSpatialVelocity_stubentry;
    if (objecttype=="NamedSpatialAcceleration")    return NamedSpatialAcceleration_stubentry;
    if (objecttype=="NamedWrench")    return NamedWrench_stubentry;
    if (objecttype=="NamedSpatialInertia")    return NamedSpatialInertia_stubentry;
    if (objecttype=="BoundingBox2D")    return BoundingBox2D_stubentry;
    if (objecttype=="BoundingBox")    return BoundingBox_stubentry;
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public override IPodStub FindPodStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override INamedArrayStub FindNamedArrayStub(string objecttype)
    {
    if (objecttype=="Vector2")    return Vector2_stubentry;
    if (objecttype=="Vector3")    return Vector3_stubentry;
    if (objecttype=="Vector6")    return Vector6_stubentry;
    if (objecttype=="Point2D")    return Point2D_stubentry;
    if (objecttype=="Point")    return Point_stubentry;
    if (objecttype=="Size2D")    return Size2D_stubentry;
    if (objecttype=="Size")    return Size_stubentry;
    if (objecttype=="Rect")    return Rect_stubentry;
    if (objecttype=="Box")    return Box_stubentry;
    if (objecttype=="Quaternion")    return Quaternion_stubentry;
    if (objecttype=="Plane")    return Plane_stubentry;
    if (objecttype=="Transform")    return Transform_stubentry;
    if (objecttype=="Pose")    return Pose_stubentry;
    if (objecttype=="Pose2D")    return Pose2D_stubentry;
    if (objecttype=="SpatialVelocity")    return SpatialVelocity_stubentry;
    if (objecttype=="SpatialAcceleration")    return SpatialAcceleration_stubentry;
    if (objecttype=="Wrench")    return Wrench_stubentry;
    if (objecttype=="SpatialInertia")    return SpatialInertia_stubentry;
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override ServiceStub CreateStub(WrappedServiceStub innerstub) {
    string objecttype=innerstub.RR_objecttype.GetServiceDefinition().Name + "." + innerstub.RR_objecttype.Name;    string objshort;
    if (CompareNamespace(objecttype, out objshort)) {
    switch (objshort) {
    default:
    break;
    }
    } else {
    string ext_service_type=RobotRaconteurNode.SplitQualifiedName(objecttype).Item1;
    return RobotRaconteurNode.s.GetServiceType(ext_service_type).CreateStub(innerstub);
    }
    throw new ServiceException("Could not create stub");
    }
    public override ServiceSkel CreateSkel(object obj) {
    string objtype = RobotRaconteurNode.GetTypeString(ServiceSkelUtil.FindParentInterface(obj.GetType()));
    string objshort;
    if (CompareNamespace(objtype, out objshort)) {
    switch(objshort) {
    default:
    break;
    }
    } else {
    string ext_service_type=RobotRaconteurNode.SplitQualifiedName(objtype).Item1;
    return RobotRaconteurNode.s.GetServiceFactory(ext_service_type).CreateSkel(obj);
    }
    throw new ServiceException("Could not create skel");
    }
    public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp){
    if (rr_exp==null) return rr_exp;
    string rr_type=rr_exp.Error;
    if (!rr_type.Contains(".")) return rr_exp;
    string rr_stype;
    if (CompareNamespace(rr_type, out rr_stype)) {
    } else {
    return RobotRaconteurNode.s.DownCastException(rr_exp); 
    }
    return rr_exp;
    }
}

public class NamedTransform_stub : IStructureStub {
    public NamedTransform_stub(com__robotraconteur__geometryFactory d) {def=d;}
    private com__robotraconteur__geometryFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    NamedTransform s = (NamedTransform)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("parent_frame",s.parent_frame));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("child_frame",s.child_frame));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackNamedArrayToArray<Transform>("transform",ref s.transform));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.geometry.NamedTransform",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    NamedTransform s=new NamedTransform();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.parent_frame =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(MessageElement.FindElement(mm,"parent_frame"));
    s.child_frame =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(MessageElement.FindElement(mm,"child_frame"));
    s.transform =MessageElementUtil.UnpackNamedArrayFromArray<Transform>(MessageElement.FindElement(mm,"transform"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class NamedPose_stub : IStructureStub {
    public NamedPose_stub(com__robotraconteur__geometryFactory d) {def=d;}
    private com__robotraconteur__geometryFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    NamedPose s = (NamedPose)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("parent_frame",s.parent_frame));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("frame",s.frame));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackNamedArrayToArray<Pose>("pose",ref s.pose));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.geometry.NamedPose",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    NamedPose s=new NamedPose();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.parent_frame =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(MessageElement.FindElement(mm,"parent_frame"));
    s.frame =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(MessageElement.FindElement(mm,"frame"));
    s.pose =MessageElementUtil.UnpackNamedArrayFromArray<Pose>(MessageElement.FindElement(mm,"pose"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class PoseWithCovariance_stub : IStructureStub {
    public PoseWithCovariance_stub(com__robotraconteur__geometryFactory d) {def=d;}
    private com__robotraconteur__geometryFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    PoseWithCovariance s = (PoseWithCovariance)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackNamedArrayToArray<Pose>("pose",ref s.pose));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackMultiDimArray("covariance",(MultiDimArray)DataTypeUtil.VerifyArrayLength(s.covariance,36,new uint[] {6,6})));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.geometry.PoseWithCovariance",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    PoseWithCovariance s=new PoseWithCovariance();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.pose =MessageElementUtil.UnpackNamedArrayFromArray<Pose>(MessageElement.FindElement(mm,"pose"));
    s.covariance =DataTypeUtil.VerifyArrayLength(MessageElementUtil.UnpackMultiDimArray(MessageElement.FindElement(mm,"covariance")),36,new uint[] {6,6});
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class NamedPoseWithCovariance_stub : IStructureStub {
    public NamedPoseWithCovariance_stub(com__robotraconteur__geometryFactory d) {def=d;}
    private com__robotraconteur__geometryFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    NamedPoseWithCovariance s = (NamedPoseWithCovariance)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("pose",s.pose));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackMultiDimArray("covariance",(MultiDimArray)DataTypeUtil.VerifyArrayLength(s.covariance,36,new uint[] {6,6})));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.geometry.NamedPoseWithCovariance",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    NamedPoseWithCovariance s=new NamedPoseWithCovariance();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.pose =MessageElementUtil.UnpackStructure<NamedPose>(MessageElement.FindElement(mm,"pose"));
    s.covariance =DataTypeUtil.VerifyArrayLength(MessageElementUtil.UnpackMultiDimArray(MessageElement.FindElement(mm,"covariance")),36,new uint[] {6,6});
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class NamedPose2D_stub : IStructureStub {
    public NamedPose2D_stub(com__robotraconteur__geometryFactory d) {def=d;}
    private com__robotraconteur__geometryFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    NamedPose2D s = (NamedPose2D)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("parent_frame",s.parent_frame));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("frame",s.frame));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackNamedArrayToArray<Pose2D>("pose",ref s.pose));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.geometry.NamedPose2D",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    NamedPose2D s=new NamedPose2D();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.parent_frame =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(MessageElement.FindElement(mm,"parent_frame"));
    s.frame =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(MessageElement.FindElement(mm,"frame"));
    s.pose =MessageElementUtil.UnpackNamedArrayFromArray<Pose2D>(MessageElement.FindElement(mm,"pose"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class NamedSpatialVelocity_stub : IStructureStub {
    public NamedSpatialVelocity_stub(com__robotraconteur__geometryFactory d) {def=d;}
    private com__robotraconteur__geometryFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    NamedSpatialVelocity s = (NamedSpatialVelocity)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("parent_frame",s.parent_frame));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("frame",s.frame));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackNamedArrayToArray<SpatialVelocity>("velocity",ref s.velocity));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.geometry.NamedSpatialVelocity",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    NamedSpatialVelocity s=new NamedSpatialVelocity();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.parent_frame =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(MessageElement.FindElement(mm,"parent_frame"));
    s.frame =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(MessageElement.FindElement(mm,"frame"));
    s.velocity =MessageElementUtil.UnpackNamedArrayFromArray<SpatialVelocity>(MessageElement.FindElement(mm,"velocity"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class NamedSpatialAcceleration_stub : IStructureStub {
    public NamedSpatialAcceleration_stub(com__robotraconteur__geometryFactory d) {def=d;}
    private com__robotraconteur__geometryFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    NamedSpatialAcceleration s = (NamedSpatialAcceleration)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("parent_frame",s.parent_frame));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("frame",s.frame));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackNamedArrayToArray<SpatialAcceleration>("acceleration",ref s.acceleration));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.geometry.NamedSpatialAcceleration",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    NamedSpatialAcceleration s=new NamedSpatialAcceleration();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.parent_frame =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(MessageElement.FindElement(mm,"parent_frame"));
    s.frame =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(MessageElement.FindElement(mm,"frame"));
    s.acceleration =MessageElementUtil.UnpackNamedArrayFromArray<SpatialAcceleration>(MessageElement.FindElement(mm,"acceleration"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class NamedWrench_stub : IStructureStub {
    public NamedWrench_stub(com__robotraconteur__geometryFactory d) {def=d;}
    private com__robotraconteur__geometryFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    NamedWrench s = (NamedWrench)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("parent_frame",s.parent_frame));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("frame",s.frame));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackNamedArrayToArray<Wrench>("wrench",ref s.wrench));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.geometry.NamedWrench",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    NamedWrench s=new NamedWrench();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.parent_frame =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(MessageElement.FindElement(mm,"parent_frame"));
    s.frame =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(MessageElement.FindElement(mm,"frame"));
    s.wrench =MessageElementUtil.UnpackNamedArrayFromArray<Wrench>(MessageElement.FindElement(mm,"wrench"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class NamedSpatialInertia_stub : IStructureStub {
    public NamedSpatialInertia_stub(com__robotraconteur__geometryFactory d) {def=d;}
    private com__robotraconteur__geometryFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    NamedSpatialInertia s = (NamedSpatialInertia)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("frame",s.frame));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackNamedArrayToArray<SpatialInertia>("inertia",ref s.inertia));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.geometry.NamedSpatialInertia",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    NamedSpatialInertia s=new NamedSpatialInertia();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.frame =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(MessageElement.FindElement(mm,"frame"));
    s.inertia =MessageElementUtil.UnpackNamedArrayFromArray<SpatialInertia>(MessageElement.FindElement(mm,"inertia"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class BoundingBox2D_stub : IStructureStub {
    public BoundingBox2D_stub(com__robotraconteur__geometryFactory d) {def=d;}
    private com__robotraconteur__geometryFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    BoundingBox2D s = (BoundingBox2D)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("center",s.center));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackNamedArrayToArray<Size2D>("size",ref s.size));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.geometry.BoundingBox2D",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    BoundingBox2D s=new BoundingBox2D();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.center =MessageElementUtil.UnpackStructure<NamedPose2D>(MessageElement.FindElement(mm,"center"));
    s.size =MessageElementUtil.UnpackNamedArrayFromArray<Size2D>(MessageElement.FindElement(mm,"size"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class BoundingBox_stub : IStructureStub {
    public BoundingBox_stub(com__robotraconteur__geometryFactory d) {def=d;}
    private com__robotraconteur__geometryFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    BoundingBox s = (BoundingBox)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("center",s.center));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackNamedArrayToArray<Size>("size",ref s.size));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.geometry.BoundingBox",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    BoundingBox s=new BoundingBox();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.center =MessageElementUtil.UnpackStructure<NamedPose>(MessageElement.FindElement(mm,"center"));
    s.size =MessageElementUtil.UnpackNamedArrayFromArray<Size>(MessageElement.FindElement(mm,"size"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class Vector2_stub : NamedArrayStub<Vector2,double> {
    public override double[] GetNumericArrayFromNamedArrayStruct(ref Vector2 s) {
    return s.GetNumericArray();
    }
    public override Vector2 GetNamedArrayStructFromNumericArray(double[] m) {
    if (m.Length != 2) throw new DataTypeException("Invalid namedarray array");
    var s = new Vector2();
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override double[] GetNumericArrayFromNamedArray(Vector2[] s) {
    return s.GetNumericArray();
    }
    public override Vector2[] GetNamedArrayFromNumericArray(double[] m) {
    if (m.Length % 2 != 0) throw new DataTypeException("Invalid namedarray array");
    Vector2[] s = new Vector2[m.Length / 2];
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometry.Vector2"; } }}

public class Vector3_stub : NamedArrayStub<Vector3,double> {
    public override double[] GetNumericArrayFromNamedArrayStruct(ref Vector3 s) {
    return s.GetNumericArray();
    }
    public override Vector3 GetNamedArrayStructFromNumericArray(double[] m) {
    if (m.Length != 3) throw new DataTypeException("Invalid namedarray array");
    var s = new Vector3();
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override double[] GetNumericArrayFromNamedArray(Vector3[] s) {
    return s.GetNumericArray();
    }
    public override Vector3[] GetNamedArrayFromNumericArray(double[] m) {
    if (m.Length % 3 != 0) throw new DataTypeException("Invalid namedarray array");
    Vector3[] s = new Vector3[m.Length / 3];
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometry.Vector3"; } }}

public class Vector6_stub : NamedArrayStub<Vector6,double> {
    public override double[] GetNumericArrayFromNamedArrayStruct(ref Vector6 s) {
    return s.GetNumericArray();
    }
    public override Vector6 GetNamedArrayStructFromNumericArray(double[] m) {
    if (m.Length != 6) throw new DataTypeException("Invalid namedarray array");
    var s = new Vector6();
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override double[] GetNumericArrayFromNamedArray(Vector6[] s) {
    return s.GetNumericArray();
    }
    public override Vector6[] GetNamedArrayFromNumericArray(double[] m) {
    if (m.Length % 6 != 0) throw new DataTypeException("Invalid namedarray array");
    Vector6[] s = new Vector6[m.Length / 6];
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometry.Vector6"; } }}

public class Point2D_stub : NamedArrayStub<Point2D,double> {
    public override double[] GetNumericArrayFromNamedArrayStruct(ref Point2D s) {
    return s.GetNumericArray();
    }
    public override Point2D GetNamedArrayStructFromNumericArray(double[] m) {
    if (m.Length != 2) throw new DataTypeException("Invalid namedarray array");
    var s = new Point2D();
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override double[] GetNumericArrayFromNamedArray(Point2D[] s) {
    return s.GetNumericArray();
    }
    public override Point2D[] GetNamedArrayFromNumericArray(double[] m) {
    if (m.Length % 2 != 0) throw new DataTypeException("Invalid namedarray array");
    Point2D[] s = new Point2D[m.Length / 2];
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometry.Point2D"; } }}

public class Point_stub : NamedArrayStub<Point,double> {
    public override double[] GetNumericArrayFromNamedArrayStruct(ref Point s) {
    return s.GetNumericArray();
    }
    public override Point GetNamedArrayStructFromNumericArray(double[] m) {
    if (m.Length != 3) throw new DataTypeException("Invalid namedarray array");
    var s = new Point();
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override double[] GetNumericArrayFromNamedArray(Point[] s) {
    return s.GetNumericArray();
    }
    public override Point[] GetNamedArrayFromNumericArray(double[] m) {
    if (m.Length % 3 != 0) throw new DataTypeException("Invalid namedarray array");
    Point[] s = new Point[m.Length / 3];
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometry.Point"; } }}

public class Size2D_stub : NamedArrayStub<Size2D,double> {
    public override double[] GetNumericArrayFromNamedArrayStruct(ref Size2D s) {
    return s.GetNumericArray();
    }
    public override Size2D GetNamedArrayStructFromNumericArray(double[] m) {
    if (m.Length != 2) throw new DataTypeException("Invalid namedarray array");
    var s = new Size2D();
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override double[] GetNumericArrayFromNamedArray(Size2D[] s) {
    return s.GetNumericArray();
    }
    public override Size2D[] GetNamedArrayFromNumericArray(double[] m) {
    if (m.Length % 2 != 0) throw new DataTypeException("Invalid namedarray array");
    Size2D[] s = new Size2D[m.Length / 2];
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometry.Size2D"; } }}

public class Size_stub : NamedArrayStub<Size,double> {
    public override double[] GetNumericArrayFromNamedArrayStruct(ref Size s) {
    return s.GetNumericArray();
    }
    public override Size GetNamedArrayStructFromNumericArray(double[] m) {
    if (m.Length != 3) throw new DataTypeException("Invalid namedarray array");
    var s = new Size();
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override double[] GetNumericArrayFromNamedArray(Size[] s) {
    return s.GetNumericArray();
    }
    public override Size[] GetNamedArrayFromNumericArray(double[] m) {
    if (m.Length % 3 != 0) throw new DataTypeException("Invalid namedarray array");
    Size[] s = new Size[m.Length / 3];
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometry.Size"; } }}

public class Rect_stub : NamedArrayStub<Rect,double> {
    public override double[] GetNumericArrayFromNamedArrayStruct(ref Rect s) {
    return s.GetNumericArray();
    }
    public override Rect GetNamedArrayStructFromNumericArray(double[] m) {
    if (m.Length != 4) throw new DataTypeException("Invalid namedarray array");
    var s = new Rect();
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override double[] GetNumericArrayFromNamedArray(Rect[] s) {
    return s.GetNumericArray();
    }
    public override Rect[] GetNamedArrayFromNumericArray(double[] m) {
    if (m.Length % 4 != 0) throw new DataTypeException("Invalid namedarray array");
    Rect[] s = new Rect[m.Length / 4];
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometry.Rect"; } }}

public class Box_stub : NamedArrayStub<Box,double> {
    public override double[] GetNumericArrayFromNamedArrayStruct(ref Box s) {
    return s.GetNumericArray();
    }
    public override Box GetNamedArrayStructFromNumericArray(double[] m) {
    if (m.Length != 6) throw new DataTypeException("Invalid namedarray array");
    var s = new Box();
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override double[] GetNumericArrayFromNamedArray(Box[] s) {
    return s.GetNumericArray();
    }
    public override Box[] GetNamedArrayFromNumericArray(double[] m) {
    if (m.Length % 6 != 0) throw new DataTypeException("Invalid namedarray array");
    Box[] s = new Box[m.Length / 6];
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometry.Box"; } }}

public class Quaternion_stub : NamedArrayStub<Quaternion,double> {
    public override double[] GetNumericArrayFromNamedArrayStruct(ref Quaternion s) {
    return s.GetNumericArray();
    }
    public override Quaternion GetNamedArrayStructFromNumericArray(double[] m) {
    if (m.Length != 4) throw new DataTypeException("Invalid namedarray array");
    var s = new Quaternion();
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override double[] GetNumericArrayFromNamedArray(Quaternion[] s) {
    return s.GetNumericArray();
    }
    public override Quaternion[] GetNamedArrayFromNumericArray(double[] m) {
    if (m.Length % 4 != 0) throw new DataTypeException("Invalid namedarray array");
    Quaternion[] s = new Quaternion[m.Length / 4];
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometry.Quaternion"; } }}

public class Plane_stub : NamedArrayStub<Plane,double> {
    public override double[] GetNumericArrayFromNamedArrayStruct(ref Plane s) {
    return s.GetNumericArray();
    }
    public override Plane GetNamedArrayStructFromNumericArray(double[] m) {
    if (m.Length != 4) throw new DataTypeException("Invalid namedarray array");
    var s = new Plane();
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override double[] GetNumericArrayFromNamedArray(Plane[] s) {
    return s.GetNumericArray();
    }
    public override Plane[] GetNamedArrayFromNumericArray(double[] m) {
    if (m.Length % 4 != 0) throw new DataTypeException("Invalid namedarray array");
    Plane[] s = new Plane[m.Length / 4];
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometry.Plane"; } }}

public class Transform_stub : NamedArrayStub<Transform,double> {
    public override double[] GetNumericArrayFromNamedArrayStruct(ref Transform s) {
    return s.GetNumericArray();
    }
    public override Transform GetNamedArrayStructFromNumericArray(double[] m) {
    if (m.Length != 7) throw new DataTypeException("Invalid namedarray array");
    var s = new Transform();
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override double[] GetNumericArrayFromNamedArray(Transform[] s) {
    return s.GetNumericArray();
    }
    public override Transform[] GetNamedArrayFromNumericArray(double[] m) {
    if (m.Length % 7 != 0) throw new DataTypeException("Invalid namedarray array");
    Transform[] s = new Transform[m.Length / 7];
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometry.Transform"; } }}

public class Pose_stub : NamedArrayStub<Pose,double> {
    public override double[] GetNumericArrayFromNamedArrayStruct(ref Pose s) {
    return s.GetNumericArray();
    }
    public override Pose GetNamedArrayStructFromNumericArray(double[] m) {
    if (m.Length != 7) throw new DataTypeException("Invalid namedarray array");
    var s = new Pose();
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override double[] GetNumericArrayFromNamedArray(Pose[] s) {
    return s.GetNumericArray();
    }
    public override Pose[] GetNamedArrayFromNumericArray(double[] m) {
    if (m.Length % 7 != 0) throw new DataTypeException("Invalid namedarray array");
    Pose[] s = new Pose[m.Length / 7];
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometry.Pose"; } }}

public class Pose2D_stub : NamedArrayStub<Pose2D,double> {
    public override double[] GetNumericArrayFromNamedArrayStruct(ref Pose2D s) {
    return s.GetNumericArray();
    }
    public override Pose2D GetNamedArrayStructFromNumericArray(double[] m) {
    if (m.Length != 3) throw new DataTypeException("Invalid namedarray array");
    var s = new Pose2D();
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override double[] GetNumericArrayFromNamedArray(Pose2D[] s) {
    return s.GetNumericArray();
    }
    public override Pose2D[] GetNamedArrayFromNumericArray(double[] m) {
    if (m.Length % 3 != 0) throw new DataTypeException("Invalid namedarray array");
    Pose2D[] s = new Pose2D[m.Length / 3];
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometry.Pose2D"; } }}

public class SpatialVelocity_stub : NamedArrayStub<SpatialVelocity,double> {
    public override double[] GetNumericArrayFromNamedArrayStruct(ref SpatialVelocity s) {
    return s.GetNumericArray();
    }
    public override SpatialVelocity GetNamedArrayStructFromNumericArray(double[] m) {
    if (m.Length != 6) throw new DataTypeException("Invalid namedarray array");
    var s = new SpatialVelocity();
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override double[] GetNumericArrayFromNamedArray(SpatialVelocity[] s) {
    return s.GetNumericArray();
    }
    public override SpatialVelocity[] GetNamedArrayFromNumericArray(double[] m) {
    if (m.Length % 6 != 0) throw new DataTypeException("Invalid namedarray array");
    SpatialVelocity[] s = new SpatialVelocity[m.Length / 6];
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometry.SpatialVelocity"; } }}

public class SpatialAcceleration_stub : NamedArrayStub<SpatialAcceleration,double> {
    public override double[] GetNumericArrayFromNamedArrayStruct(ref SpatialAcceleration s) {
    return s.GetNumericArray();
    }
    public override SpatialAcceleration GetNamedArrayStructFromNumericArray(double[] m) {
    if (m.Length != 6) throw new DataTypeException("Invalid namedarray array");
    var s = new SpatialAcceleration();
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override double[] GetNumericArrayFromNamedArray(SpatialAcceleration[] s) {
    return s.GetNumericArray();
    }
    public override SpatialAcceleration[] GetNamedArrayFromNumericArray(double[] m) {
    if (m.Length % 6 != 0) throw new DataTypeException("Invalid namedarray array");
    SpatialAcceleration[] s = new SpatialAcceleration[m.Length / 6];
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometry.SpatialAcceleration"; } }}

public class Wrench_stub : NamedArrayStub<Wrench,double> {
    public override double[] GetNumericArrayFromNamedArrayStruct(ref Wrench s) {
    return s.GetNumericArray();
    }
    public override Wrench GetNamedArrayStructFromNumericArray(double[] m) {
    if (m.Length != 6) throw new DataTypeException("Invalid namedarray array");
    var s = new Wrench();
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override double[] GetNumericArrayFromNamedArray(Wrench[] s) {
    return s.GetNumericArray();
    }
    public override Wrench[] GetNamedArrayFromNumericArray(double[] m) {
    if (m.Length % 6 != 0) throw new DataTypeException("Invalid namedarray array");
    Wrench[] s = new Wrench[m.Length / 6];
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometry.Wrench"; } }}

public class SpatialInertia_stub : NamedArrayStub<SpatialInertia,double> {
    public override double[] GetNumericArrayFromNamedArrayStruct(ref SpatialInertia s) {
    return s.GetNumericArray();
    }
    public override SpatialInertia GetNamedArrayStructFromNumericArray(double[] m) {
    if (m.Length != 10) throw new DataTypeException("Invalid namedarray array");
    var s = new SpatialInertia();
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override double[] GetNumericArrayFromNamedArray(SpatialInertia[] s) {
    return s.GetNumericArray();
    }
    public override SpatialInertia[] GetNamedArrayFromNumericArray(double[] m) {
    if (m.Length % 10 != 0) throw new DataTypeException("Invalid namedarray array");
    SpatialInertia[] s = new SpatialInertia[m.Length / 10];
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometry.SpatialInertia"; } }}

public static class RRExtensions{
    public static double[] GetNumericArray(this Vector2[] s)
    {
    var a=new ArraySegment<double>(new double[2 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this Vector2[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 2 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 2*i,2);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this Vector2[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 2 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 2*i,2);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static double[] GetNumericArray(this Vector3[] s)
    {
    var a=new ArraySegment<double>(new double[3 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this Vector3[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 3 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 3*i,3);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this Vector3[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 3 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 3*i,3);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static double[] GetNumericArray(this Vector6[] s)
    {
    var a=new ArraySegment<double>(new double[6 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this Vector6[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 6 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 6*i,6);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this Vector6[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 6 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 6*i,6);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static double[] GetNumericArray(this Point2D[] s)
    {
    var a=new ArraySegment<double>(new double[2 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this Point2D[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 2 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 2*i,2);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this Point2D[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 2 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 2*i,2);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static double[] GetNumericArray(this Point[] s)
    {
    var a=new ArraySegment<double>(new double[3 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this Point[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 3 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 3*i,3);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this Point[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 3 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 3*i,3);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static double[] GetNumericArray(this Size2D[] s)
    {
    var a=new ArraySegment<double>(new double[2 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this Size2D[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 2 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 2*i,2);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this Size2D[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 2 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 2*i,2);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static double[] GetNumericArray(this Size[] s)
    {
    var a=new ArraySegment<double>(new double[3 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this Size[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 3 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 3*i,3);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this Size[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 3 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 3*i,3);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static double[] GetNumericArray(this Rect[] s)
    {
    var a=new ArraySegment<double>(new double[4 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this Rect[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 4 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 4*i,4);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this Rect[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 4 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 4*i,4);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static double[] GetNumericArray(this Box[] s)
    {
    var a=new ArraySegment<double>(new double[6 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this Box[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 6 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 6*i,6);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this Box[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 6 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 6*i,6);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static double[] GetNumericArray(this Quaternion[] s)
    {
    var a=new ArraySegment<double>(new double[4 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this Quaternion[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 4 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 4*i,4);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this Quaternion[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 4 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 4*i,4);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static double[] GetNumericArray(this Plane[] s)
    {
    var a=new ArraySegment<double>(new double[4 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this Plane[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 4 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 4*i,4);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this Plane[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 4 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 4*i,4);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static double[] GetNumericArray(this Transform[] s)
    {
    var a=new ArraySegment<double>(new double[7 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this Transform[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 7 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 7*i,7);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this Transform[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 7 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 7*i,7);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static double[] GetNumericArray(this Pose[] s)
    {
    var a=new ArraySegment<double>(new double[7 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this Pose[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 7 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 7*i,7);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this Pose[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 7 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 7*i,7);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static double[] GetNumericArray(this Pose2D[] s)
    {
    var a=new ArraySegment<double>(new double[3 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this Pose2D[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 3 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 3*i,3);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this Pose2D[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 3 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 3*i,3);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static double[] GetNumericArray(this SpatialVelocity[] s)
    {
    var a=new ArraySegment<double>(new double[6 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this SpatialVelocity[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 6 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 6*i,6);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this SpatialVelocity[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 6 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 6*i,6);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static double[] GetNumericArray(this SpatialAcceleration[] s)
    {
    var a=new ArraySegment<double>(new double[6 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this SpatialAcceleration[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 6 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 6*i,6);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this SpatialAcceleration[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 6 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 6*i,6);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static double[] GetNumericArray(this Wrench[] s)
    {
    var a=new ArraySegment<double>(new double[6 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this Wrench[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 6 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 6*i,6);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this Wrench[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 6 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 6*i,6);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static double[] GetNumericArray(this SpatialInertia[] s)
    {
    var a=new ArraySegment<double>(new double[10 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this SpatialInertia[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 10 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 10*i,10);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this SpatialInertia[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 10 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 10*i,10);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
}
}
namespace com.robotraconteur.geometry.shapes
{
public class Box
{
    public double x;
    public double y;
    public double z;
}

public class Sphere
{
    public double radius;
}

public class Cylinder
{
    public double height;
    public double radius;
}

public class Cone
{
    public double height;
    public double radius;
}

public class Capsule
{
    public double height;
    public double radius;
}

public class Plane
{
    public double a;
    public double b;
    public double c;
    public double d;
}

public class MeshTexture
{
    public com.robotraconteur.image.CompressedImage image;
    public com.robotraconteur.geometry.Vector2[] uvs;
}

public class Mesh
{
    public MeshTriangle[] triangles;
    public com.robotraconteur.geometry.Point[] vertices;
    public com.robotraconteur.geometry.Vector3[] normals;
    public com.robotraconteur.color.ColorRGB[] colors;
    public List<MeshTexture> textures;
    public MeshType mesh_type;
}

public class Material
{
    public com.robotraconteur.color.ColorRGBA base_color_factor;
    public double metallic_factor;
    public double roughness_factor;
    public com.robotraconteur.color.ColorRGBA emissive_factor;
    public Dictionary<string,object> extended;
}

public class ShapeObject
{
    public com.robotraconteur.identifier.Identifier name;
    public List<object> shapes;
    public List<com.robotraconteur.geometry.Pose> shape_poses;
    public List<Material> shape_materials;
    public com.robotraconteur.geometry.SpatialInertia inertia;
    public List<com.robotraconteur.fiducial.Fiducial> fiducials;
    public Dictionary<string,object> extended;
}

[NamedArrayElementTypeAndCount(typeof(uint), 3)]
public struct MeshTriangle
{
    public uint v1;
    public uint v2;
    public uint v3;
    public uint[] GetNumericArray()
    {
    var a=new ArraySegment<uint>(new uint[3]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<uint> rr_a)
    {
    if(rr_a.Count < 3) throw new ArgumentException("ArraySegment invalid length");
    rr_a.Array[rr_a.Offset + 0] = v1;
    rr_a.Array[rr_a.Offset + 1] = v2;
    rr_a.Array[rr_a.Offset + 2] = v3;
    }
    public void AssignFromNumericArray(ref ArraySegment<uint> rr_a)
    {
    if(rr_a.Count < 3) throw new ArgumentException("ArraySegment invalid length");
    v1 = rr_a.Array[rr_a.Offset + 0];
    v2 = rr_a.Array[rr_a.Offset + 1];
    v3 = rr_a.Array[rr_a.Offset + 2];
    }
}

public static class com__robotraconteur__geometry__shapesConstants 
{
}
    public enum MeshType
    {
    mesh = 0,
    convex_mesh = 1,
    sdf_mesh = 2
    };
}
namespace com.robotraconteur.geometry.shapes
{
public class com__robotraconteur__geometry__shapesFactory : ServiceFactory
{
    public override string DefString()
{
    const string s="service com.robotraconteur.geometry.shapes\n\nstdver 0.10\n\nimport com.robotraconteur.geometry\nimport com.robotraconteur.identifier\nimport com.robotraconteur.color\nimport com.robotraconteur.resource\nimport com.robotraconteur.image\nimport com.robotraconteur.fiducial\n\nusing com.robotraconteur.geometry.Point\nusing com.robotraconteur.geometry.Pose\nusing com.robotraconteur.geometry.Vector2\nusing com.robotraconteur.geometry.Vector3\nusing com.robotraconteur.geometry.NamedPose\nusing com.robotraconteur.geometry.SpatialInertia\nusing com.robotraconteur.identifier.Identifier\nusing com.robotraconteur.color.ColorRGB\nusing com.robotraconteur.color.ColorRGBA\nusing com.robotraconteur.resource.ResourceIdentifier\nusing com.robotraconteur.image.CompressedImage\nusing com.robotraconteur.fiducial.Fiducial\n\nenum MeshType\nmesh = 0,\nconvex_mesh,\nsdf_mesh\nend\n\nstruct Box\nfield double x\nfield double y\nfield double z\nend\n\nstruct Sphere\nfield double radius\nend\n\nstruct Cylinder\nfield double height\nfield double radius\nend\n\nstruct Cone\nfield double height\nfield double radius\nend\n\nstruct Capsule\nfield double height\nfield double radius\nend\n\nstruct Plane\nfield double a\nfield double b\nfield double c\nfield double d\nend\n\nnamedarray MeshTriangle\nfield uint32 v1\nfield uint32 v2\nfield uint32 v3\nend\n\nstruct MeshTexture\nfield CompressedImage image\nfield Vector2[] uvs\nend\n\nstruct Mesh\nfield MeshTriangle[] triangles\nfield Point[] vertices\nfield Vector3[] normals\nfield ColorRGB[] colors\nfield MeshTexture{list} textures\nfield MeshType mesh_type\nend\n\nstruct Material\nfield ColorRGBA base_color_factor\nfield double metallic_factor\nfield double roughness_factor\nfield ColorRGBA emissive_factor\nfield varvalue{string} extended\nend\n\nstruct ShapeObject\nfield Identifier name\nfield varvalue{list} shapes\nfield Pose{list} shape_poses\nfield Material{list} shape_materials\nfield SpatialInertia inertia\nfield Fiducial{list} fiducials\nfield varvalue{string} extended\nend\n\n";
    return s;
    }
    public override string GetServiceName() {return "com.robotraconteur.geometry.shapes";}
    public Box_stub Box_stubentry;
    public Sphere_stub Sphere_stubentry;
    public Cylinder_stub Cylinder_stubentry;
    public Cone_stub Cone_stubentry;
    public Capsule_stub Capsule_stubentry;
    public Plane_stub Plane_stubentry;
    public MeshTexture_stub MeshTexture_stubentry;
    public Mesh_stub Mesh_stubentry;
    public Material_stub Material_stubentry;
    public ShapeObject_stub ShapeObject_stubentry;
    public MeshTriangle_stub MeshTriangle_stubentry;
    public com__robotraconteur__geometry__shapesFactory()
{
    Box_stubentry=new Box_stub(this);
    Sphere_stubentry=new Sphere_stub(this);
    Cylinder_stubentry=new Cylinder_stub(this);
    Cone_stubentry=new Cone_stub(this);
    Capsule_stubentry=new Capsule_stub(this);
    Plane_stubentry=new Plane_stub(this);
    MeshTexture_stubentry=new MeshTexture_stub(this);
    Mesh_stubentry=new Mesh_stub(this);
    Material_stubentry=new Material_stub(this);
    ShapeObject_stubentry=new ShapeObject_stub(this);
    MeshTriangle_stubentry=new MeshTriangle_stub();
    }
    public override IStructureStub FindStructureStub(string objecttype)
    {
    if (objecttype=="Box")    return Box_stubentry;
    if (objecttype=="Sphere")    return Sphere_stubentry;
    if (objecttype=="Cylinder")    return Cylinder_stubentry;
    if (objecttype=="Cone")    return Cone_stubentry;
    if (objecttype=="Capsule")    return Capsule_stubentry;
    if (objecttype=="Plane")    return Plane_stubentry;
    if (objecttype=="MeshTexture")    return MeshTexture_stubentry;
    if (objecttype=="Mesh")    return Mesh_stubentry;
    if (objecttype=="Material")    return Material_stubentry;
    if (objecttype=="ShapeObject")    return ShapeObject_stubentry;
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public override IPodStub FindPodStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override INamedArrayStub FindNamedArrayStub(string objecttype)
    {
    if (objecttype=="MeshTriangle")    return MeshTriangle_stubentry;
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override ServiceStub CreateStub(WrappedServiceStub innerstub) {
    string objecttype=innerstub.RR_objecttype.GetServiceDefinition().Name + "." + innerstub.RR_objecttype.Name;    string objshort;
    if (CompareNamespace(objecttype, out objshort)) {
    switch (objshort) {
    default:
    break;
    }
    } else {
    string ext_service_type=RobotRaconteurNode.SplitQualifiedName(objecttype).Item1;
    return RobotRaconteurNode.s.GetServiceType(ext_service_type).CreateStub(innerstub);
    }
    throw new ServiceException("Could not create stub");
    }
    public override ServiceSkel CreateSkel(object obj) {
    string objtype = RobotRaconteurNode.GetTypeString(ServiceSkelUtil.FindParentInterface(obj.GetType()));
    string objshort;
    if (CompareNamespace(objtype, out objshort)) {
    switch(objshort) {
    default:
    break;
    }
    } else {
    string ext_service_type=RobotRaconteurNode.SplitQualifiedName(objtype).Item1;
    return RobotRaconteurNode.s.GetServiceFactory(ext_service_type).CreateSkel(obj);
    }
    throw new ServiceException("Could not create skel");
    }
    public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp){
    if (rr_exp==null) return rr_exp;
    string rr_type=rr_exp.Error;
    if (!rr_type.Contains(".")) return rr_exp;
    string rr_stype;
    if (CompareNamespace(rr_type, out rr_stype)) {
    } else {
    return RobotRaconteurNode.s.DownCastException(rr_exp); 
    }
    return rr_exp;
    }
}

public class Box_stub : IStructureStub {
    public Box_stub(com__robotraconteur__geometry__shapesFactory d) {def=d;}
    private com__robotraconteur__geometry__shapesFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    Box s = (Box)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<double>("x",s.x));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<double>("y",s.y));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<double>("z",s.z));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.geometry.shapes.Box",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    Box s=new Box();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.x =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(mm,"x")));
    s.y =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(mm,"y")));
    s.z =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(mm,"z")));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class Sphere_stub : IStructureStub {
    public Sphere_stub(com__robotraconteur__geometry__shapesFactory d) {def=d;}
    private com__robotraconteur__geometry__shapesFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    Sphere s = (Sphere)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<double>("radius",s.radius));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.geometry.shapes.Sphere",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    Sphere s=new Sphere();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.radius =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(mm,"radius")));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class Cylinder_stub : IStructureStub {
    public Cylinder_stub(com__robotraconteur__geometry__shapesFactory d) {def=d;}
    private com__robotraconteur__geometry__shapesFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    Cylinder s = (Cylinder)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<double>("height",s.height));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<double>("radius",s.radius));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.geometry.shapes.Cylinder",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    Cylinder s=new Cylinder();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.height =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(mm,"height")));
    s.radius =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(mm,"radius")));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class Cone_stub : IStructureStub {
    public Cone_stub(com__robotraconteur__geometry__shapesFactory d) {def=d;}
    private com__robotraconteur__geometry__shapesFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    Cone s = (Cone)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<double>("height",s.height));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<double>("radius",s.radius));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.geometry.shapes.Cone",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    Cone s=new Cone();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.height =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(mm,"height")));
    s.radius =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(mm,"radius")));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class Capsule_stub : IStructureStub {
    public Capsule_stub(com__robotraconteur__geometry__shapesFactory d) {def=d;}
    private com__robotraconteur__geometry__shapesFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    Capsule s = (Capsule)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<double>("height",s.height));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<double>("radius",s.radius));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.geometry.shapes.Capsule",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    Capsule s=new Capsule();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.height =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(mm,"height")));
    s.radius =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(mm,"radius")));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class Plane_stub : IStructureStub {
    public Plane_stub(com__robotraconteur__geometry__shapesFactory d) {def=d;}
    private com__robotraconteur__geometry__shapesFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    Plane s = (Plane)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<double>("a",s.a));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<double>("b",s.b));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<double>("c",s.c));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<double>("d",s.d));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.geometry.shapes.Plane",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    Plane s=new Plane();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.a =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(mm,"a")));
    s.b =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(mm,"b")));
    s.c =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(mm,"c")));
    s.d =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(mm,"d")));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class MeshTexture_stub : IStructureStub {
    public MeshTexture_stub(com__robotraconteur__geometry__shapesFactory d) {def=d;}
    private com__robotraconteur__geometry__shapesFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    MeshTexture s = (MeshTexture)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("image",s.image));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackNamedArray<com.robotraconteur.geometry.Vector2>("uvs",s.uvs));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.geometry.shapes.MeshTexture",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    MeshTexture s=new MeshTexture();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.image =MessageElementUtil.UnpackStructure<com.robotraconteur.image.CompressedImage>(MessageElement.FindElement(mm,"image"));
    s.uvs =MessageElementUtil.UnpackNamedArray<com.robotraconteur.geometry.Vector2>(MessageElement.FindElement(mm,"uvs"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class Mesh_stub : IStructureStub {
    public Mesh_stub(com__robotraconteur__geometry__shapesFactory d) {def=d;}
    private com__robotraconteur__geometry__shapesFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    Mesh s = (Mesh)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackNamedArray<MeshTriangle>("triangles",s.triangles));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackNamedArray<com.robotraconteur.geometry.Point>("vertices",s.vertices));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackNamedArray<com.robotraconteur.geometry.Vector3>("normals",s.normals));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackNamedArray<com.robotraconteur.color.ColorRGB>("colors",s.colors));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackListType<MeshTexture>("textures",s.textures));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackEnum<MeshType>("mesh_type",s.mesh_type));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.geometry.shapes.Mesh",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    Mesh s=new Mesh();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.triangles =MessageElementUtil.UnpackNamedArray<MeshTriangle>(MessageElement.FindElement(mm,"triangles"));
    s.vertices =MessageElementUtil.UnpackNamedArray<com.robotraconteur.geometry.Point>(MessageElement.FindElement(mm,"vertices"));
    s.normals =MessageElementUtil.UnpackNamedArray<com.robotraconteur.geometry.Vector3>(MessageElement.FindElement(mm,"normals"));
    s.colors =MessageElementUtil.UnpackNamedArray<com.robotraconteur.color.ColorRGB>(MessageElement.FindElement(mm,"colors"));
    s.textures =MessageElementUtil.UnpackList<MeshTexture>(MessageElement.FindElement(mm,"textures"));
    s.mesh_type =MessageElementUtil.UnpackEnum<MeshType>(MessageElement.FindElement(mm,"mesh_type"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class Material_stub : IStructureStub {
    public Material_stub(com__robotraconteur__geometry__shapesFactory d) {def=d;}
    private com__robotraconteur__geometry__shapesFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    Material s = (Material)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.color.ColorRGBA>("base_color_factor",ref s.base_color_factor));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<double>("metallic_factor",s.metallic_factor));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<double>("roughness_factor",s.roughness_factor));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.color.ColorRGBA>("emissive_factor",ref s.emissive_factor));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackMapType<string,object>("extended",s.extended));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.geometry.shapes.Material",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    Material s=new Material();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.base_color_factor =MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.color.ColorRGBA>(MessageElement.FindElement(mm,"base_color_factor"));
    s.metallic_factor =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(mm,"metallic_factor")));
    s.roughness_factor =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(mm,"roughness_factor")));
    s.emissive_factor =MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.color.ColorRGBA>(MessageElement.FindElement(mm,"emissive_factor"));
    s.extended =MessageElementUtil.UnpackMap<string,object>(MessageElement.FindElement(mm,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class ShapeObject_stub : IStructureStub {
    public ShapeObject_stub(com__robotraconteur__geometry__shapesFactory d) {def=d;}
    private com__robotraconteur__geometry__shapesFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    ShapeObject s = (ShapeObject)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("name",s.name));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackListType<object>("shapes",s.shapes));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackListType<com.robotraconteur.geometry.Pose>("shape_poses",s.shape_poses));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackListType<Material>("shape_materials",s.shape_materials));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.SpatialInertia>("inertia",ref s.inertia));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackListType<com.robotraconteur.fiducial.Fiducial>("fiducials",s.fiducials));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackMapType<string,object>("extended",s.extended));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.geometry.shapes.ShapeObject",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    ShapeObject s=new ShapeObject();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.name =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(MessageElement.FindElement(mm,"name"));
    s.shapes =MessageElementUtil.UnpackList<object>(MessageElement.FindElement(mm,"shapes"));
    s.shape_poses =MessageElementUtil.UnpackList<com.robotraconteur.geometry.Pose>(MessageElement.FindElement(mm,"shape_poses"));
    s.shape_materials =MessageElementUtil.UnpackList<Material>(MessageElement.FindElement(mm,"shape_materials"));
    s.inertia =MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.SpatialInertia>(MessageElement.FindElement(mm,"inertia"));
    s.fiducials =MessageElementUtil.UnpackList<com.robotraconteur.fiducial.Fiducial>(MessageElement.FindElement(mm,"fiducials"));
    s.extended =MessageElementUtil.UnpackMap<string,object>(MessageElement.FindElement(mm,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class MeshTriangle_stub : NamedArrayStub<MeshTriangle,uint> {
    public override uint[] GetNumericArrayFromNamedArrayStruct(ref MeshTriangle s) {
    return s.GetNumericArray();
    }
    public override MeshTriangle GetNamedArrayStructFromNumericArray(uint[] m) {
    if (m.Length != 3) throw new DataTypeException("Invalid namedarray array");
    var s = new MeshTriangle();
    var a = new ArraySegment<uint>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override uint[] GetNumericArrayFromNamedArray(MeshTriangle[] s) {
    return s.GetNumericArray();
    }
    public override MeshTriangle[] GetNamedArrayFromNumericArray(uint[] m) {
    if (m.Length % 3 != 0) throw new DataTypeException("Invalid namedarray array");
    MeshTriangle[] s = new MeshTriangle[m.Length / 3];
    var a = new ArraySegment<uint>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometry.shapes.MeshTriangle"; } }}

public static class RRExtensions{
    public static uint[] GetNumericArray(this MeshTriangle[] s)
    {
    var a=new ArraySegment<uint>(new uint[3 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this MeshTriangle[] s, ref ArraySegment<uint> a)
    {
    if(a.Count < 3 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<uint>(a.Array, a.Offset + 3*i,3);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this MeshTriangle[] s, ref ArraySegment<uint> a)
    {
    if(a.Count < 3 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<uint>(a.Array, a.Offset + 3*i,3);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
}
}
namespace com.robotraconteur.geometryf
{
public class NamedTransform
{
    public com.robotraconteur.identifier.Identifier parent_frame;
    public com.robotraconteur.identifier.Identifier child_frame;
    public Transform transform;
}

public class NamedPose
{
    public com.robotraconteur.identifier.Identifier parent_frame;
    public com.robotraconteur.identifier.Identifier frame;
    public Pose pose;
}

public class PoseWithCovariance
{
    public Pose pose;
    public MultiDimArray covariance;
}

public class NamedPoseWithCovariance
{
    public NamedPose pose;
    public MultiDimArray covariance;
}

public class NamedPose2D
{
    public com.robotraconteur.identifier.Identifier parent_frame;
    public com.robotraconteur.identifier.Identifier frame;
    public Pose2D pose;
}

public class NamedSpatialVelocity
{
    public com.robotraconteur.identifier.Identifier parent_frame;
    public com.robotraconteur.identifier.Identifier frame;
    public SpatialVelocity velocity;
}

public class NamedSpatialAcceleration
{
    public com.robotraconteur.identifier.Identifier parent_frame;
    public com.robotraconteur.identifier.Identifier frame;
    public SpatialAcceleration acceleration;
}

public class NamedWrench
{
    public com.robotraconteur.identifier.Identifier parent_frame;
    public com.robotraconteur.identifier.Identifier frame;
    public Wrench wrench;
}

public class NamedSpatialInertia
{
    public com.robotraconteur.identifier.Identifier frame;
    public SpatialInertia inertia;
}

public class BoundingBox2D
{
    public NamedPose2D center;
    public Size2D size;
}

public class BoundingBox
{
    public NamedPose center;
    public Size size;
}

[NamedArrayElementTypeAndCount(typeof(float), 2)]
public struct Vector2
{
    public float x;
    public float y;
    public float[] GetNumericArray()
    {
    var a=new ArraySegment<float>(new float[2]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<float> rr_a)
    {
    if(rr_a.Count < 2) throw new ArgumentException("ArraySegment invalid length");
    rr_a.Array[rr_a.Offset + 0] = x;
    rr_a.Array[rr_a.Offset + 1] = y;
    }
    public void AssignFromNumericArray(ref ArraySegment<float> rr_a)
    {
    if(rr_a.Count < 2) throw new ArgumentException("ArraySegment invalid length");
    x = rr_a.Array[rr_a.Offset + 0];
    y = rr_a.Array[rr_a.Offset + 1];
    }
}

[NamedArrayElementTypeAndCount(typeof(float), 3)]
public struct Vector3
{
    public float x;
    public float y;
    public float z;
    public float[] GetNumericArray()
    {
    var a=new ArraySegment<float>(new float[3]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<float> rr_a)
    {
    if(rr_a.Count < 3) throw new ArgumentException("ArraySegment invalid length");
    rr_a.Array[rr_a.Offset + 0] = x;
    rr_a.Array[rr_a.Offset + 1] = y;
    rr_a.Array[rr_a.Offset + 2] = z;
    }
    public void AssignFromNumericArray(ref ArraySegment<float> rr_a)
    {
    if(rr_a.Count < 3) throw new ArgumentException("ArraySegment invalid length");
    x = rr_a.Array[rr_a.Offset + 0];
    y = rr_a.Array[rr_a.Offset + 1];
    z = rr_a.Array[rr_a.Offset + 2];
    }
}

[NamedArrayElementTypeAndCount(typeof(float), 6)]
public struct Vector6
{
    public float alpha;
    public float beta;
    public float gamma;
    public float x;
    public float y;
    public float z;
    public float[] GetNumericArray()
    {
    var a=new ArraySegment<float>(new float[6]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<float> rr_a)
    {
    if(rr_a.Count < 6) throw new ArgumentException("ArraySegment invalid length");
    rr_a.Array[rr_a.Offset + 0] = alpha;
    rr_a.Array[rr_a.Offset + 1] = beta;
    rr_a.Array[rr_a.Offset + 2] = gamma;
    rr_a.Array[rr_a.Offset + 3] = x;
    rr_a.Array[rr_a.Offset + 4] = y;
    rr_a.Array[rr_a.Offset + 5] = z;
    }
    public void AssignFromNumericArray(ref ArraySegment<float> rr_a)
    {
    if(rr_a.Count < 6) throw new ArgumentException("ArraySegment invalid length");
    alpha = rr_a.Array[rr_a.Offset + 0];
    beta = rr_a.Array[rr_a.Offset + 1];
    gamma = rr_a.Array[rr_a.Offset + 2];
    x = rr_a.Array[rr_a.Offset + 3];
    y = rr_a.Array[rr_a.Offset + 4];
    z = rr_a.Array[rr_a.Offset + 5];
    }
}

[NamedArrayElementTypeAndCount(typeof(float), 2)]
public struct Point2D
{
    public float x;
    public float y;
    public float[] GetNumericArray()
    {
    var a=new ArraySegment<float>(new float[2]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<float> rr_a)
    {
    if(rr_a.Count < 2) throw new ArgumentException("ArraySegment invalid length");
    rr_a.Array[rr_a.Offset + 0] = x;
    rr_a.Array[rr_a.Offset + 1] = y;
    }
    public void AssignFromNumericArray(ref ArraySegment<float> rr_a)
    {
    if(rr_a.Count < 2) throw new ArgumentException("ArraySegment invalid length");
    x = rr_a.Array[rr_a.Offset + 0];
    y = rr_a.Array[rr_a.Offset + 1];
    }
}

[NamedArrayElementTypeAndCount(typeof(float), 3)]
public struct Point
{
    public float x;
    public float y;
    public float z;
    public float[] GetNumericArray()
    {
    var a=new ArraySegment<float>(new float[3]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<float> rr_a)
    {
    if(rr_a.Count < 3) throw new ArgumentException("ArraySegment invalid length");
    rr_a.Array[rr_a.Offset + 0] = x;
    rr_a.Array[rr_a.Offset + 1] = y;
    rr_a.Array[rr_a.Offset + 2] = z;
    }
    public void AssignFromNumericArray(ref ArraySegment<float> rr_a)
    {
    if(rr_a.Count < 3) throw new ArgumentException("ArraySegment invalid length");
    x = rr_a.Array[rr_a.Offset + 0];
    y = rr_a.Array[rr_a.Offset + 1];
    z = rr_a.Array[rr_a.Offset + 2];
    }
}

[NamedArrayElementTypeAndCount(typeof(float), 2)]
public struct Size2D
{
    public float width;
    public float height;
    public float[] GetNumericArray()
    {
    var a=new ArraySegment<float>(new float[2]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<float> rr_a)
    {
    if(rr_a.Count < 2) throw new ArgumentException("ArraySegment invalid length");
    rr_a.Array[rr_a.Offset + 0] = width;
    rr_a.Array[rr_a.Offset + 1] = height;
    }
    public void AssignFromNumericArray(ref ArraySegment<float> rr_a)
    {
    if(rr_a.Count < 2) throw new ArgumentException("ArraySegment invalid length");
    width = rr_a.Array[rr_a.Offset + 0];
    height = rr_a.Array[rr_a.Offset + 1];
    }
}

[NamedArrayElementTypeAndCount(typeof(float), 3)]
public struct Size
{
    public float width;
    public float height;
    public float depth;
    public float[] GetNumericArray()
    {
    var a=new ArraySegment<float>(new float[3]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<float> rr_a)
    {
    if(rr_a.Count < 3) throw new ArgumentException("ArraySegment invalid length");
    rr_a.Array[rr_a.Offset + 0] = width;
    rr_a.Array[rr_a.Offset + 1] = height;
    rr_a.Array[rr_a.Offset + 2] = depth;
    }
    public void AssignFromNumericArray(ref ArraySegment<float> rr_a)
    {
    if(rr_a.Count < 3) throw new ArgumentException("ArraySegment invalid length");
    width = rr_a.Array[rr_a.Offset + 0];
    height = rr_a.Array[rr_a.Offset + 1];
    depth = rr_a.Array[rr_a.Offset + 2];
    }
}

[NamedArrayElementTypeAndCount(typeof(float), 4)]
public struct Rect
{
    public Point2D origin;
    public Size2D size;
    public float[] GetNumericArray()
    {
    var a=new ArraySegment<float>(new float[4]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<float> rr_a)
    {
    if(rr_a.Count < 4) throw new ArgumentException("ArraySegment invalid length");
    var rr_a0 = new ArraySegment<float>(rr_a.Array, rr_a.Offset + 0, 2);
    origin.GetNumericArray(ref rr_a0);
    var rr_a2 = new ArraySegment<float>(rr_a.Array, rr_a.Offset + 2, 2);
    size.GetNumericArray(ref rr_a2);
    }
    public void AssignFromNumericArray(ref ArraySegment<float> rr_a)
    {
    if(rr_a.Count < 4) throw new ArgumentException("ArraySegment invalid length");
    var rr_a0 = new ArraySegment<float>(rr_a.Array, rr_a.Offset + 0, 2);
    origin.AssignFromNumericArray(ref rr_a0);
    var rr_a2 = new ArraySegment<float>(rr_a.Array, rr_a.Offset + 2, 2);
    size.AssignFromNumericArray(ref rr_a2);
    }
}

[NamedArrayElementTypeAndCount(typeof(float), 6)]
public struct Box
{
    public Point origin;
    public Size size;
    public float[] GetNumericArray()
    {
    var a=new ArraySegment<float>(new float[6]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<float> rr_a)
    {
    if(rr_a.Count < 6) throw new ArgumentException("ArraySegment invalid length");
    var rr_a0 = new ArraySegment<float>(rr_a.Array, rr_a.Offset + 0, 3);
    origin.GetNumericArray(ref rr_a0);
    var rr_a3 = new ArraySegment<float>(rr_a.Array, rr_a.Offset + 3, 3);
    size.GetNumericArray(ref rr_a3);
    }
    public void AssignFromNumericArray(ref ArraySegment<float> rr_a)
    {
    if(rr_a.Count < 6) throw new ArgumentException("ArraySegment invalid length");
    var rr_a0 = new ArraySegment<float>(rr_a.Array, rr_a.Offset + 0, 3);
    origin.AssignFromNumericArray(ref rr_a0);
    var rr_a3 = new ArraySegment<float>(rr_a.Array, rr_a.Offset + 3, 3);
    size.AssignFromNumericArray(ref rr_a3);
    }
}

[NamedArrayElementTypeAndCount(typeof(float), 4)]
public struct Quaternion
{
    public float w;
    public float x;
    public float y;
    public float z;
    public float[] GetNumericArray()
    {
    var a=new ArraySegment<float>(new float[4]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<float> rr_a)
    {
    if(rr_a.Count < 4) throw new ArgumentException("ArraySegment invalid length");
    rr_a.Array[rr_a.Offset + 0] = w;
    rr_a.Array[rr_a.Offset + 1] = x;
    rr_a.Array[rr_a.Offset + 2] = y;
    rr_a.Array[rr_a.Offset + 3] = z;
    }
    public void AssignFromNumericArray(ref ArraySegment<float> rr_a)
    {
    if(rr_a.Count < 4) throw new ArgumentException("ArraySegment invalid length");
    w = rr_a.Array[rr_a.Offset + 0];
    x = rr_a.Array[rr_a.Offset + 1];
    y = rr_a.Array[rr_a.Offset + 2];
    z = rr_a.Array[rr_a.Offset + 3];
    }
}

[NamedArrayElementTypeAndCount(typeof(float), 4)]
public struct Plane
{
    public Vector3 normal;
    public float a;
    public float[] GetNumericArray()
    {
    var a=new ArraySegment<float>(new float[4]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<float> rr_a)
    {
    if(rr_a.Count < 4) throw new ArgumentException("ArraySegment invalid length");
    var rr_a0 = new ArraySegment<float>(rr_a.Array, rr_a.Offset + 0, 3);
    normal.GetNumericArray(ref rr_a0);
    rr_a.Array[rr_a.Offset + 3] = a;
    }
    public void AssignFromNumericArray(ref ArraySegment<float> rr_a)
    {
    if(rr_a.Count < 4) throw new ArgumentException("ArraySegment invalid length");
    var rr_a0 = new ArraySegment<float>(rr_a.Array, rr_a.Offset + 0, 3);
    normal.AssignFromNumericArray(ref rr_a0);
    a = rr_a.Array[rr_a.Offset + 3];
    }
}

[NamedArrayElementTypeAndCount(typeof(float), 7)]
public struct Transform
{
    public Quaternion rotation;
    public Vector3 translation;
    public float[] GetNumericArray()
    {
    var a=new ArraySegment<float>(new float[7]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<float> rr_a)
    {
    if(rr_a.Count < 7) throw new ArgumentException("ArraySegment invalid length");
    var rr_a0 = new ArraySegment<float>(rr_a.Array, rr_a.Offset + 0, 4);
    rotation.GetNumericArray(ref rr_a0);
    var rr_a4 = new ArraySegment<float>(rr_a.Array, rr_a.Offset + 4, 3);
    translation.GetNumericArray(ref rr_a4);
    }
    public void AssignFromNumericArray(ref ArraySegment<float> rr_a)
    {
    if(rr_a.Count < 7) throw new ArgumentException("ArraySegment invalid length");
    var rr_a0 = new ArraySegment<float>(rr_a.Array, rr_a.Offset + 0, 4);
    rotation.AssignFromNumericArray(ref rr_a0);
    var rr_a4 = new ArraySegment<float>(rr_a.Array, rr_a.Offset + 4, 3);
    translation.AssignFromNumericArray(ref rr_a4);
    }
}

[NamedArrayElementTypeAndCount(typeof(float), 7)]
public struct Pose
{
    public Quaternion orientation;
    public Point position;
    public float[] GetNumericArray()
    {
    var a=new ArraySegment<float>(new float[7]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<float> rr_a)
    {
    if(rr_a.Count < 7) throw new ArgumentException("ArraySegment invalid length");
    var rr_a0 = new ArraySegment<float>(rr_a.Array, rr_a.Offset + 0, 4);
    orientation.GetNumericArray(ref rr_a0);
    var rr_a4 = new ArraySegment<float>(rr_a.Array, rr_a.Offset + 4, 3);
    position.GetNumericArray(ref rr_a4);
    }
    public void AssignFromNumericArray(ref ArraySegment<float> rr_a)
    {
    if(rr_a.Count < 7) throw new ArgumentException("ArraySegment invalid length");
    var rr_a0 = new ArraySegment<float>(rr_a.Array, rr_a.Offset + 0, 4);
    orientation.AssignFromNumericArray(ref rr_a0);
    var rr_a4 = new ArraySegment<float>(rr_a.Array, rr_a.Offset + 4, 3);
    position.AssignFromNumericArray(ref rr_a4);
    }
}

[NamedArrayElementTypeAndCount(typeof(float), 3)]
public struct Pose2D
{
    public float orientation;
    public Point2D position;
    public float[] GetNumericArray()
    {
    var a=new ArraySegment<float>(new float[3]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<float> rr_a)
    {
    if(rr_a.Count < 3) throw new ArgumentException("ArraySegment invalid length");
    rr_a.Array[rr_a.Offset + 0] = orientation;
    var rr_a1 = new ArraySegment<float>(rr_a.Array, rr_a.Offset + 1, 2);
    position.GetNumericArray(ref rr_a1);
    }
    public void AssignFromNumericArray(ref ArraySegment<float> rr_a)
    {
    if(rr_a.Count < 3) throw new ArgumentException("ArraySegment invalid length");
    orientation = rr_a.Array[rr_a.Offset + 0];
    var rr_a1 = new ArraySegment<float>(rr_a.Array, rr_a.Offset + 1, 2);
    position.AssignFromNumericArray(ref rr_a1);
    }
}

[NamedArrayElementTypeAndCount(typeof(float), 6)]
public struct SpatialVelocity
{
    public Vector3 angular;
    public Vector3 linear;
    public float[] GetNumericArray()
    {
    var a=new ArraySegment<float>(new float[6]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<float> rr_a)
    {
    if(rr_a.Count < 6) throw new ArgumentException("ArraySegment invalid length");
    var rr_a0 = new ArraySegment<float>(rr_a.Array, rr_a.Offset + 0, 3);
    angular.GetNumericArray(ref rr_a0);
    var rr_a3 = new ArraySegment<float>(rr_a.Array, rr_a.Offset + 3, 3);
    linear.GetNumericArray(ref rr_a3);
    }
    public void AssignFromNumericArray(ref ArraySegment<float> rr_a)
    {
    if(rr_a.Count < 6) throw new ArgumentException("ArraySegment invalid length");
    var rr_a0 = new ArraySegment<float>(rr_a.Array, rr_a.Offset + 0, 3);
    angular.AssignFromNumericArray(ref rr_a0);
    var rr_a3 = new ArraySegment<float>(rr_a.Array, rr_a.Offset + 3, 3);
    linear.AssignFromNumericArray(ref rr_a3);
    }
}

[NamedArrayElementTypeAndCount(typeof(float), 6)]
public struct SpatialAcceleration
{
    public Vector3 angular;
    public Vector3 linear;
    public float[] GetNumericArray()
    {
    var a=new ArraySegment<float>(new float[6]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<float> rr_a)
    {
    if(rr_a.Count < 6) throw new ArgumentException("ArraySegment invalid length");
    var rr_a0 = new ArraySegment<float>(rr_a.Array, rr_a.Offset + 0, 3);
    angular.GetNumericArray(ref rr_a0);
    var rr_a3 = new ArraySegment<float>(rr_a.Array, rr_a.Offset + 3, 3);
    linear.GetNumericArray(ref rr_a3);
    }
    public void AssignFromNumericArray(ref ArraySegment<float> rr_a)
    {
    if(rr_a.Count < 6) throw new ArgumentException("ArraySegment invalid length");
    var rr_a0 = new ArraySegment<float>(rr_a.Array, rr_a.Offset + 0, 3);
    angular.AssignFromNumericArray(ref rr_a0);
    var rr_a3 = new ArraySegment<float>(rr_a.Array, rr_a.Offset + 3, 3);
    linear.AssignFromNumericArray(ref rr_a3);
    }
}

[NamedArrayElementTypeAndCount(typeof(float), 6)]
public struct Wrench
{
    public Vector3 torque;
    public Vector3 force;
    public float[] GetNumericArray()
    {
    var a=new ArraySegment<float>(new float[6]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<float> rr_a)
    {
    if(rr_a.Count < 6) throw new ArgumentException("ArraySegment invalid length");
    var rr_a0 = new ArraySegment<float>(rr_a.Array, rr_a.Offset + 0, 3);
    torque.GetNumericArray(ref rr_a0);
    var rr_a3 = new ArraySegment<float>(rr_a.Array, rr_a.Offset + 3, 3);
    force.GetNumericArray(ref rr_a3);
    }
    public void AssignFromNumericArray(ref ArraySegment<float> rr_a)
    {
    if(rr_a.Count < 6) throw new ArgumentException("ArraySegment invalid length");
    var rr_a0 = new ArraySegment<float>(rr_a.Array, rr_a.Offset + 0, 3);
    torque.AssignFromNumericArray(ref rr_a0);
    var rr_a3 = new ArraySegment<float>(rr_a.Array, rr_a.Offset + 3, 3);
    force.AssignFromNumericArray(ref rr_a3);
    }
}

[NamedArrayElementTypeAndCount(typeof(float), 10)]
public struct SpatialInertia
{
    public float m;
    public Vector3 com;
    public float ixx;
    public float ixy;
    public float ixz;
    public float iyy;
    public float iyz;
    public float izz;
    public float[] GetNumericArray()
    {
    var a=new ArraySegment<float>(new float[10]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<float> rr_a)
    {
    if(rr_a.Count < 10) throw new ArgumentException("ArraySegment invalid length");
    rr_a.Array[rr_a.Offset + 0] = m;
    var rr_a1 = new ArraySegment<float>(rr_a.Array, rr_a.Offset + 1, 3);
    com.GetNumericArray(ref rr_a1);
    rr_a.Array[rr_a.Offset + 4] = ixx;
    rr_a.Array[rr_a.Offset + 5] = ixy;
    rr_a.Array[rr_a.Offset + 6] = ixz;
    rr_a.Array[rr_a.Offset + 7] = iyy;
    rr_a.Array[rr_a.Offset + 8] = iyz;
    rr_a.Array[rr_a.Offset + 9] = izz;
    }
    public void AssignFromNumericArray(ref ArraySegment<float> rr_a)
    {
    if(rr_a.Count < 10) throw new ArgumentException("ArraySegment invalid length");
    m = rr_a.Array[rr_a.Offset + 0];
    var rr_a1 = new ArraySegment<float>(rr_a.Array, rr_a.Offset + 1, 3);
    com.AssignFromNumericArray(ref rr_a1);
    ixx = rr_a.Array[rr_a.Offset + 4];
    ixy = rr_a.Array[rr_a.Offset + 5];
    ixz = rr_a.Array[rr_a.Offset + 6];
    iyy = rr_a.Array[rr_a.Offset + 7];
    iyz = rr_a.Array[rr_a.Offset + 8];
    izz = rr_a.Array[rr_a.Offset + 9];
    }
}

}
namespace com.robotraconteur.geometryf
{
public class com__robotraconteur__geometryfFactory : ServiceFactory
{
    public override string DefString()
{
    const string s="service com.robotraconteur.geometryf\n\nstdver 0.10\n\nimport com.robotraconteur.identifier\n\nusing com.robotraconteur.identifier.Identifier\n\nnamedarray Vector2\nfield single x\nfield single y\nend\n\nnamedarray Vector3\nfield single x\nfield single y\nfield single z\nend\n\nnamedarray Vector6\nfield single alpha\nfield single beta\nfield single gamma\nfield single x\nfield single y\nfield single z\nend\n\nnamedarray Point2D\nfield single x\nfield single y\nend\n\nnamedarray Point\nfield single x\nfield single y\nfield single z\nend\n\nnamedarray Size2D\nfield single width\nfield single height\nend\n\nnamedarray Size\nfield single width\nfield single height\nfield single depth\nend\n\nnamedarray Rect\nfield Point2D origin\nfield Size2D size\nend\n\nnamedarray Box\nfield Point origin\nfield Size size\nend\n\nnamedarray Quaternion\nfield single w\nfield single x\nfield single y\nfield single z\nend\n\nnamedarray Plane\nfield Vector3 normal\nfield single a\nend\n\nnamedarray Transform\nfield Quaternion rotation\nfield Vector3 translation\nend\n\nstruct NamedTransform\nfield Identifier parent_frame\nfield Identifier child_frame\nfield Transform transform\nend\n\nnamedarray Pose\nfield Quaternion orientation\nfield Point position\nend\n\nstruct NamedPose\nfield Identifier parent_frame\nfield Identifier frame\nfield Pose pose\nend\n\nstruct PoseWithCovariance\nfield Pose pose\nfield single[6,6] covariance\nend\n\nstruct NamedPoseWithCovariance\nfield NamedPose pose\nfield single[6,6] covariance\nend\n\nnamedarray Pose2D\nfield single orientation\nfield Point2D position\nend\n\nstruct NamedPose2D\nfield Identifier parent_frame\nfield Identifier frame\nfield Pose2D pose\nend\n\nnamedarray SpatialVelocity\nfield Vector3 angular\nfield Vector3 linear\nend\n\nstruct NamedSpatialVelocity\nfield Identifier parent_frame\nfield Identifier frame\nfield SpatialVelocity velocity\nend\n\nnamedarray SpatialAcceleration\nfield Vector3 angular\nfield Vector3 linear\nend\n\nstruct NamedSpatialAcceleration\nfield Identifier parent_frame\nfield Identifier frame\nfield SpatialAcceleration acceleration\nend\n\nnamedarray Wrench\nfield Vector3 torque\nfield Vector3 force\nend\n\nstruct NamedWrench\nfield Identifier parent_frame\nfield Identifier frame\nfield Wrench wrench\nend\n\nnamedarray SpatialInertia\nfield single m\nfield Vector3 com\nfield single ixx\nfield single ixy\nfield single ixz\nfield single iyy\nfield single iyz\nfield single izz\nend\n\nstruct NamedSpatialInertia\nfield Identifier frame\nfield SpatialInertia inertia\nend\n\nstruct BoundingBox2D\nfield NamedPose2D center\nfield Size2D size\nend\n\nstruct BoundingBox\nfield NamedPose center\nfield Size size\nend\n\n";
    return s;
    }
    public override string GetServiceName() {return "com.robotraconteur.geometryf";}
    public NamedTransform_stub NamedTransform_stubentry;
    public NamedPose_stub NamedPose_stubentry;
    public PoseWithCovariance_stub PoseWithCovariance_stubentry;
    public NamedPoseWithCovariance_stub NamedPoseWithCovariance_stubentry;
    public NamedPose2D_stub NamedPose2D_stubentry;
    public NamedSpatialVelocity_stub NamedSpatialVelocity_stubentry;
    public NamedSpatialAcceleration_stub NamedSpatialAcceleration_stubentry;
    public NamedWrench_stub NamedWrench_stubentry;
    public NamedSpatialInertia_stub NamedSpatialInertia_stubentry;
    public BoundingBox2D_stub BoundingBox2D_stubentry;
    public BoundingBox_stub BoundingBox_stubentry;
    public Vector2_stub Vector2_stubentry;
    public Vector3_stub Vector3_stubentry;
    public Vector6_stub Vector6_stubentry;
    public Point2D_stub Point2D_stubentry;
    public Point_stub Point_stubentry;
    public Size2D_stub Size2D_stubentry;
    public Size_stub Size_stubentry;
    public Rect_stub Rect_stubentry;
    public Box_stub Box_stubentry;
    public Quaternion_stub Quaternion_stubentry;
    public Plane_stub Plane_stubentry;
    public Transform_stub Transform_stubentry;
    public Pose_stub Pose_stubentry;
    public Pose2D_stub Pose2D_stubentry;
    public SpatialVelocity_stub SpatialVelocity_stubentry;
    public SpatialAcceleration_stub SpatialAcceleration_stubentry;
    public Wrench_stub Wrench_stubentry;
    public SpatialInertia_stub SpatialInertia_stubentry;
    public com__robotraconteur__geometryfFactory()
{
    NamedTransform_stubentry=new NamedTransform_stub(this);
    NamedPose_stubentry=new NamedPose_stub(this);
    PoseWithCovariance_stubentry=new PoseWithCovariance_stub(this);
    NamedPoseWithCovariance_stubentry=new NamedPoseWithCovariance_stub(this);
    NamedPose2D_stubentry=new NamedPose2D_stub(this);
    NamedSpatialVelocity_stubentry=new NamedSpatialVelocity_stub(this);
    NamedSpatialAcceleration_stubentry=new NamedSpatialAcceleration_stub(this);
    NamedWrench_stubentry=new NamedWrench_stub(this);
    NamedSpatialInertia_stubentry=new NamedSpatialInertia_stub(this);
    BoundingBox2D_stubentry=new BoundingBox2D_stub(this);
    BoundingBox_stubentry=new BoundingBox_stub(this);
    Vector2_stubentry=new Vector2_stub();
    Vector3_stubentry=new Vector3_stub();
    Vector6_stubentry=new Vector6_stub();
    Point2D_stubentry=new Point2D_stub();
    Point_stubentry=new Point_stub();
    Size2D_stubentry=new Size2D_stub();
    Size_stubentry=new Size_stub();
    Rect_stubentry=new Rect_stub();
    Box_stubentry=new Box_stub();
    Quaternion_stubentry=new Quaternion_stub();
    Plane_stubentry=new Plane_stub();
    Transform_stubentry=new Transform_stub();
    Pose_stubentry=new Pose_stub();
    Pose2D_stubentry=new Pose2D_stub();
    SpatialVelocity_stubentry=new SpatialVelocity_stub();
    SpatialAcceleration_stubentry=new SpatialAcceleration_stub();
    Wrench_stubentry=new Wrench_stub();
    SpatialInertia_stubentry=new SpatialInertia_stub();
    }
    public override IStructureStub FindStructureStub(string objecttype)
    {
    if (objecttype=="NamedTransform")    return NamedTransform_stubentry;
    if (objecttype=="NamedPose")    return NamedPose_stubentry;
    if (objecttype=="PoseWithCovariance")    return PoseWithCovariance_stubentry;
    if (objecttype=="NamedPoseWithCovariance")    return NamedPoseWithCovariance_stubentry;
    if (objecttype=="NamedPose2D")    return NamedPose2D_stubentry;
    if (objecttype=="NamedSpatialVelocity")    return NamedSpatialVelocity_stubentry;
    if (objecttype=="NamedSpatialAcceleration")    return NamedSpatialAcceleration_stubentry;
    if (objecttype=="NamedWrench")    return NamedWrench_stubentry;
    if (objecttype=="NamedSpatialInertia")    return NamedSpatialInertia_stubentry;
    if (objecttype=="BoundingBox2D")    return BoundingBox2D_stubentry;
    if (objecttype=="BoundingBox")    return BoundingBox_stubentry;
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public override IPodStub FindPodStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override INamedArrayStub FindNamedArrayStub(string objecttype)
    {
    if (objecttype=="Vector2")    return Vector2_stubentry;
    if (objecttype=="Vector3")    return Vector3_stubentry;
    if (objecttype=="Vector6")    return Vector6_stubentry;
    if (objecttype=="Point2D")    return Point2D_stubentry;
    if (objecttype=="Point")    return Point_stubentry;
    if (objecttype=="Size2D")    return Size2D_stubentry;
    if (objecttype=="Size")    return Size_stubentry;
    if (objecttype=="Rect")    return Rect_stubentry;
    if (objecttype=="Box")    return Box_stubentry;
    if (objecttype=="Quaternion")    return Quaternion_stubentry;
    if (objecttype=="Plane")    return Plane_stubentry;
    if (objecttype=="Transform")    return Transform_stubentry;
    if (objecttype=="Pose")    return Pose_stubentry;
    if (objecttype=="Pose2D")    return Pose2D_stubentry;
    if (objecttype=="SpatialVelocity")    return SpatialVelocity_stubentry;
    if (objecttype=="SpatialAcceleration")    return SpatialAcceleration_stubentry;
    if (objecttype=="Wrench")    return Wrench_stubentry;
    if (objecttype=="SpatialInertia")    return SpatialInertia_stubentry;
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override ServiceStub CreateStub(WrappedServiceStub innerstub) {
    string objecttype=innerstub.RR_objecttype.GetServiceDefinition().Name + "." + innerstub.RR_objecttype.Name;    string objshort;
    if (CompareNamespace(objecttype, out objshort)) {
    switch (objshort) {
    default:
    break;
    }
    } else {
    string ext_service_type=RobotRaconteurNode.SplitQualifiedName(objecttype).Item1;
    return RobotRaconteurNode.s.GetServiceType(ext_service_type).CreateStub(innerstub);
    }
    throw new ServiceException("Could not create stub");
    }
    public override ServiceSkel CreateSkel(object obj) {
    string objtype = RobotRaconteurNode.GetTypeString(ServiceSkelUtil.FindParentInterface(obj.GetType()));
    string objshort;
    if (CompareNamespace(objtype, out objshort)) {
    switch(objshort) {
    default:
    break;
    }
    } else {
    string ext_service_type=RobotRaconteurNode.SplitQualifiedName(objtype).Item1;
    return RobotRaconteurNode.s.GetServiceFactory(ext_service_type).CreateSkel(obj);
    }
    throw new ServiceException("Could not create skel");
    }
    public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp){
    if (rr_exp==null) return rr_exp;
    string rr_type=rr_exp.Error;
    if (!rr_type.Contains(".")) return rr_exp;
    string rr_stype;
    if (CompareNamespace(rr_type, out rr_stype)) {
    } else {
    return RobotRaconteurNode.s.DownCastException(rr_exp); 
    }
    return rr_exp;
    }
}

public class NamedTransform_stub : IStructureStub {
    public NamedTransform_stub(com__robotraconteur__geometryfFactory d) {def=d;}
    private com__robotraconteur__geometryfFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    NamedTransform s = (NamedTransform)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("parent_frame",s.parent_frame));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("child_frame",s.child_frame));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackNamedArrayToArray<Transform>("transform",ref s.transform));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.geometryf.NamedTransform",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    NamedTransform s=new NamedTransform();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.parent_frame =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(MessageElement.FindElement(mm,"parent_frame"));
    s.child_frame =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(MessageElement.FindElement(mm,"child_frame"));
    s.transform =MessageElementUtil.UnpackNamedArrayFromArray<Transform>(MessageElement.FindElement(mm,"transform"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class NamedPose_stub : IStructureStub {
    public NamedPose_stub(com__robotraconteur__geometryfFactory d) {def=d;}
    private com__robotraconteur__geometryfFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    NamedPose s = (NamedPose)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("parent_frame",s.parent_frame));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("frame",s.frame));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackNamedArrayToArray<Pose>("pose",ref s.pose));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.geometryf.NamedPose",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    NamedPose s=new NamedPose();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.parent_frame =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(MessageElement.FindElement(mm,"parent_frame"));
    s.frame =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(MessageElement.FindElement(mm,"frame"));
    s.pose =MessageElementUtil.UnpackNamedArrayFromArray<Pose>(MessageElement.FindElement(mm,"pose"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class PoseWithCovariance_stub : IStructureStub {
    public PoseWithCovariance_stub(com__robotraconteur__geometryfFactory d) {def=d;}
    private com__robotraconteur__geometryfFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    PoseWithCovariance s = (PoseWithCovariance)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackNamedArrayToArray<Pose>("pose",ref s.pose));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackMultiDimArray("covariance",(MultiDimArray)DataTypeUtil.VerifyArrayLength(s.covariance,36,new uint[] {6,6})));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.geometryf.PoseWithCovariance",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    PoseWithCovariance s=new PoseWithCovariance();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.pose =MessageElementUtil.UnpackNamedArrayFromArray<Pose>(MessageElement.FindElement(mm,"pose"));
    s.covariance =DataTypeUtil.VerifyArrayLength(MessageElementUtil.UnpackMultiDimArray(MessageElement.FindElement(mm,"covariance")),36,new uint[] {6,6});
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class NamedPoseWithCovariance_stub : IStructureStub {
    public NamedPoseWithCovariance_stub(com__robotraconteur__geometryfFactory d) {def=d;}
    private com__robotraconteur__geometryfFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    NamedPoseWithCovariance s = (NamedPoseWithCovariance)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("pose",s.pose));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackMultiDimArray("covariance",(MultiDimArray)DataTypeUtil.VerifyArrayLength(s.covariance,36,new uint[] {6,6})));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.geometryf.NamedPoseWithCovariance",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    NamedPoseWithCovariance s=new NamedPoseWithCovariance();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.pose =MessageElementUtil.UnpackStructure<NamedPose>(MessageElement.FindElement(mm,"pose"));
    s.covariance =DataTypeUtil.VerifyArrayLength(MessageElementUtil.UnpackMultiDimArray(MessageElement.FindElement(mm,"covariance")),36,new uint[] {6,6});
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class NamedPose2D_stub : IStructureStub {
    public NamedPose2D_stub(com__robotraconteur__geometryfFactory d) {def=d;}
    private com__robotraconteur__geometryfFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    NamedPose2D s = (NamedPose2D)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("parent_frame",s.parent_frame));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("frame",s.frame));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackNamedArrayToArray<Pose2D>("pose",ref s.pose));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.geometryf.NamedPose2D",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    NamedPose2D s=new NamedPose2D();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.parent_frame =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(MessageElement.FindElement(mm,"parent_frame"));
    s.frame =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(MessageElement.FindElement(mm,"frame"));
    s.pose =MessageElementUtil.UnpackNamedArrayFromArray<Pose2D>(MessageElement.FindElement(mm,"pose"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class NamedSpatialVelocity_stub : IStructureStub {
    public NamedSpatialVelocity_stub(com__robotraconteur__geometryfFactory d) {def=d;}
    private com__robotraconteur__geometryfFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    NamedSpatialVelocity s = (NamedSpatialVelocity)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("parent_frame",s.parent_frame));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("frame",s.frame));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackNamedArrayToArray<SpatialVelocity>("velocity",ref s.velocity));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.geometryf.NamedSpatialVelocity",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    NamedSpatialVelocity s=new NamedSpatialVelocity();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.parent_frame =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(MessageElement.FindElement(mm,"parent_frame"));
    s.frame =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(MessageElement.FindElement(mm,"frame"));
    s.velocity =MessageElementUtil.UnpackNamedArrayFromArray<SpatialVelocity>(MessageElement.FindElement(mm,"velocity"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class NamedSpatialAcceleration_stub : IStructureStub {
    public NamedSpatialAcceleration_stub(com__robotraconteur__geometryfFactory d) {def=d;}
    private com__robotraconteur__geometryfFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    NamedSpatialAcceleration s = (NamedSpatialAcceleration)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("parent_frame",s.parent_frame));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("frame",s.frame));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackNamedArrayToArray<SpatialAcceleration>("acceleration",ref s.acceleration));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.geometryf.NamedSpatialAcceleration",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    NamedSpatialAcceleration s=new NamedSpatialAcceleration();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.parent_frame =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(MessageElement.FindElement(mm,"parent_frame"));
    s.frame =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(MessageElement.FindElement(mm,"frame"));
    s.acceleration =MessageElementUtil.UnpackNamedArrayFromArray<SpatialAcceleration>(MessageElement.FindElement(mm,"acceleration"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class NamedWrench_stub : IStructureStub {
    public NamedWrench_stub(com__robotraconteur__geometryfFactory d) {def=d;}
    private com__robotraconteur__geometryfFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    NamedWrench s = (NamedWrench)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("parent_frame",s.parent_frame));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("frame",s.frame));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackNamedArrayToArray<Wrench>("wrench",ref s.wrench));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.geometryf.NamedWrench",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    NamedWrench s=new NamedWrench();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.parent_frame =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(MessageElement.FindElement(mm,"parent_frame"));
    s.frame =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(MessageElement.FindElement(mm,"frame"));
    s.wrench =MessageElementUtil.UnpackNamedArrayFromArray<Wrench>(MessageElement.FindElement(mm,"wrench"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class NamedSpatialInertia_stub : IStructureStub {
    public NamedSpatialInertia_stub(com__robotraconteur__geometryfFactory d) {def=d;}
    private com__robotraconteur__geometryfFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    NamedSpatialInertia s = (NamedSpatialInertia)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("frame",s.frame));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackNamedArrayToArray<SpatialInertia>("inertia",ref s.inertia));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.geometryf.NamedSpatialInertia",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    NamedSpatialInertia s=new NamedSpatialInertia();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.frame =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(MessageElement.FindElement(mm,"frame"));
    s.inertia =MessageElementUtil.UnpackNamedArrayFromArray<SpatialInertia>(MessageElement.FindElement(mm,"inertia"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class BoundingBox2D_stub : IStructureStub {
    public BoundingBox2D_stub(com__robotraconteur__geometryfFactory d) {def=d;}
    private com__robotraconteur__geometryfFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    BoundingBox2D s = (BoundingBox2D)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("center",s.center));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackNamedArrayToArray<Size2D>("size",ref s.size));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.geometryf.BoundingBox2D",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    BoundingBox2D s=new BoundingBox2D();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.center =MessageElementUtil.UnpackStructure<NamedPose2D>(MessageElement.FindElement(mm,"center"));
    s.size =MessageElementUtil.UnpackNamedArrayFromArray<Size2D>(MessageElement.FindElement(mm,"size"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class BoundingBox_stub : IStructureStub {
    public BoundingBox_stub(com__robotraconteur__geometryfFactory d) {def=d;}
    private com__robotraconteur__geometryfFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    BoundingBox s = (BoundingBox)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("center",s.center));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackNamedArrayToArray<Size>("size",ref s.size));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.geometryf.BoundingBox",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    BoundingBox s=new BoundingBox();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.center =MessageElementUtil.UnpackStructure<NamedPose>(MessageElement.FindElement(mm,"center"));
    s.size =MessageElementUtil.UnpackNamedArrayFromArray<Size>(MessageElement.FindElement(mm,"size"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class Vector2_stub : NamedArrayStub<Vector2,float> {
    public override float[] GetNumericArrayFromNamedArrayStruct(ref Vector2 s) {
    return s.GetNumericArray();
    }
    public override Vector2 GetNamedArrayStructFromNumericArray(float[] m) {
    if (m.Length != 2) throw new DataTypeException("Invalid namedarray array");
    var s = new Vector2();
    var a = new ArraySegment<float>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override float[] GetNumericArrayFromNamedArray(Vector2[] s) {
    return s.GetNumericArray();
    }
    public override Vector2[] GetNamedArrayFromNumericArray(float[] m) {
    if (m.Length % 2 != 0) throw new DataTypeException("Invalid namedarray array");
    Vector2[] s = new Vector2[m.Length / 2];
    var a = new ArraySegment<float>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometryf.Vector2"; } }}

public class Vector3_stub : NamedArrayStub<Vector3,float> {
    public override float[] GetNumericArrayFromNamedArrayStruct(ref Vector3 s) {
    return s.GetNumericArray();
    }
    public override Vector3 GetNamedArrayStructFromNumericArray(float[] m) {
    if (m.Length != 3) throw new DataTypeException("Invalid namedarray array");
    var s = new Vector3();
    var a = new ArraySegment<float>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override float[] GetNumericArrayFromNamedArray(Vector3[] s) {
    return s.GetNumericArray();
    }
    public override Vector3[] GetNamedArrayFromNumericArray(float[] m) {
    if (m.Length % 3 != 0) throw new DataTypeException("Invalid namedarray array");
    Vector3[] s = new Vector3[m.Length / 3];
    var a = new ArraySegment<float>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometryf.Vector3"; } }}

public class Vector6_stub : NamedArrayStub<Vector6,float> {
    public override float[] GetNumericArrayFromNamedArrayStruct(ref Vector6 s) {
    return s.GetNumericArray();
    }
    public override Vector6 GetNamedArrayStructFromNumericArray(float[] m) {
    if (m.Length != 6) throw new DataTypeException("Invalid namedarray array");
    var s = new Vector6();
    var a = new ArraySegment<float>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override float[] GetNumericArrayFromNamedArray(Vector6[] s) {
    return s.GetNumericArray();
    }
    public override Vector6[] GetNamedArrayFromNumericArray(float[] m) {
    if (m.Length % 6 != 0) throw new DataTypeException("Invalid namedarray array");
    Vector6[] s = new Vector6[m.Length / 6];
    var a = new ArraySegment<float>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometryf.Vector6"; } }}

public class Point2D_stub : NamedArrayStub<Point2D,float> {
    public override float[] GetNumericArrayFromNamedArrayStruct(ref Point2D s) {
    return s.GetNumericArray();
    }
    public override Point2D GetNamedArrayStructFromNumericArray(float[] m) {
    if (m.Length != 2) throw new DataTypeException("Invalid namedarray array");
    var s = new Point2D();
    var a = new ArraySegment<float>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override float[] GetNumericArrayFromNamedArray(Point2D[] s) {
    return s.GetNumericArray();
    }
    public override Point2D[] GetNamedArrayFromNumericArray(float[] m) {
    if (m.Length % 2 != 0) throw new DataTypeException("Invalid namedarray array");
    Point2D[] s = new Point2D[m.Length / 2];
    var a = new ArraySegment<float>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometryf.Point2D"; } }}

public class Point_stub : NamedArrayStub<Point,float> {
    public override float[] GetNumericArrayFromNamedArrayStruct(ref Point s) {
    return s.GetNumericArray();
    }
    public override Point GetNamedArrayStructFromNumericArray(float[] m) {
    if (m.Length != 3) throw new DataTypeException("Invalid namedarray array");
    var s = new Point();
    var a = new ArraySegment<float>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override float[] GetNumericArrayFromNamedArray(Point[] s) {
    return s.GetNumericArray();
    }
    public override Point[] GetNamedArrayFromNumericArray(float[] m) {
    if (m.Length % 3 != 0) throw new DataTypeException("Invalid namedarray array");
    Point[] s = new Point[m.Length / 3];
    var a = new ArraySegment<float>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometryf.Point"; } }}

public class Size2D_stub : NamedArrayStub<Size2D,float> {
    public override float[] GetNumericArrayFromNamedArrayStruct(ref Size2D s) {
    return s.GetNumericArray();
    }
    public override Size2D GetNamedArrayStructFromNumericArray(float[] m) {
    if (m.Length != 2) throw new DataTypeException("Invalid namedarray array");
    var s = new Size2D();
    var a = new ArraySegment<float>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override float[] GetNumericArrayFromNamedArray(Size2D[] s) {
    return s.GetNumericArray();
    }
    public override Size2D[] GetNamedArrayFromNumericArray(float[] m) {
    if (m.Length % 2 != 0) throw new DataTypeException("Invalid namedarray array");
    Size2D[] s = new Size2D[m.Length / 2];
    var a = new ArraySegment<float>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometryf.Size2D"; } }}

public class Size_stub : NamedArrayStub<Size,float> {
    public override float[] GetNumericArrayFromNamedArrayStruct(ref Size s) {
    return s.GetNumericArray();
    }
    public override Size GetNamedArrayStructFromNumericArray(float[] m) {
    if (m.Length != 3) throw new DataTypeException("Invalid namedarray array");
    var s = new Size();
    var a = new ArraySegment<float>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override float[] GetNumericArrayFromNamedArray(Size[] s) {
    return s.GetNumericArray();
    }
    public override Size[] GetNamedArrayFromNumericArray(float[] m) {
    if (m.Length % 3 != 0) throw new DataTypeException("Invalid namedarray array");
    Size[] s = new Size[m.Length / 3];
    var a = new ArraySegment<float>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometryf.Size"; } }}

public class Rect_stub : NamedArrayStub<Rect,float> {
    public override float[] GetNumericArrayFromNamedArrayStruct(ref Rect s) {
    return s.GetNumericArray();
    }
    public override Rect GetNamedArrayStructFromNumericArray(float[] m) {
    if (m.Length != 4) throw new DataTypeException("Invalid namedarray array");
    var s = new Rect();
    var a = new ArraySegment<float>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override float[] GetNumericArrayFromNamedArray(Rect[] s) {
    return s.GetNumericArray();
    }
    public override Rect[] GetNamedArrayFromNumericArray(float[] m) {
    if (m.Length % 4 != 0) throw new DataTypeException("Invalid namedarray array");
    Rect[] s = new Rect[m.Length / 4];
    var a = new ArraySegment<float>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometryf.Rect"; } }}

public class Box_stub : NamedArrayStub<Box,float> {
    public override float[] GetNumericArrayFromNamedArrayStruct(ref Box s) {
    return s.GetNumericArray();
    }
    public override Box GetNamedArrayStructFromNumericArray(float[] m) {
    if (m.Length != 6) throw new DataTypeException("Invalid namedarray array");
    var s = new Box();
    var a = new ArraySegment<float>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override float[] GetNumericArrayFromNamedArray(Box[] s) {
    return s.GetNumericArray();
    }
    public override Box[] GetNamedArrayFromNumericArray(float[] m) {
    if (m.Length % 6 != 0) throw new DataTypeException("Invalid namedarray array");
    Box[] s = new Box[m.Length / 6];
    var a = new ArraySegment<float>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometryf.Box"; } }}

public class Quaternion_stub : NamedArrayStub<Quaternion,float> {
    public override float[] GetNumericArrayFromNamedArrayStruct(ref Quaternion s) {
    return s.GetNumericArray();
    }
    public override Quaternion GetNamedArrayStructFromNumericArray(float[] m) {
    if (m.Length != 4) throw new DataTypeException("Invalid namedarray array");
    var s = new Quaternion();
    var a = new ArraySegment<float>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override float[] GetNumericArrayFromNamedArray(Quaternion[] s) {
    return s.GetNumericArray();
    }
    public override Quaternion[] GetNamedArrayFromNumericArray(float[] m) {
    if (m.Length % 4 != 0) throw new DataTypeException("Invalid namedarray array");
    Quaternion[] s = new Quaternion[m.Length / 4];
    var a = new ArraySegment<float>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometryf.Quaternion"; } }}

public class Plane_stub : NamedArrayStub<Plane,float> {
    public override float[] GetNumericArrayFromNamedArrayStruct(ref Plane s) {
    return s.GetNumericArray();
    }
    public override Plane GetNamedArrayStructFromNumericArray(float[] m) {
    if (m.Length != 4) throw new DataTypeException("Invalid namedarray array");
    var s = new Plane();
    var a = new ArraySegment<float>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override float[] GetNumericArrayFromNamedArray(Plane[] s) {
    return s.GetNumericArray();
    }
    public override Plane[] GetNamedArrayFromNumericArray(float[] m) {
    if (m.Length % 4 != 0) throw new DataTypeException("Invalid namedarray array");
    Plane[] s = new Plane[m.Length / 4];
    var a = new ArraySegment<float>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometryf.Plane"; } }}

public class Transform_stub : NamedArrayStub<Transform,float> {
    public override float[] GetNumericArrayFromNamedArrayStruct(ref Transform s) {
    return s.GetNumericArray();
    }
    public override Transform GetNamedArrayStructFromNumericArray(float[] m) {
    if (m.Length != 7) throw new DataTypeException("Invalid namedarray array");
    var s = new Transform();
    var a = new ArraySegment<float>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override float[] GetNumericArrayFromNamedArray(Transform[] s) {
    return s.GetNumericArray();
    }
    public override Transform[] GetNamedArrayFromNumericArray(float[] m) {
    if (m.Length % 7 != 0) throw new DataTypeException("Invalid namedarray array");
    Transform[] s = new Transform[m.Length / 7];
    var a = new ArraySegment<float>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometryf.Transform"; } }}

public class Pose_stub : NamedArrayStub<Pose,float> {
    public override float[] GetNumericArrayFromNamedArrayStruct(ref Pose s) {
    return s.GetNumericArray();
    }
    public override Pose GetNamedArrayStructFromNumericArray(float[] m) {
    if (m.Length != 7) throw new DataTypeException("Invalid namedarray array");
    var s = new Pose();
    var a = new ArraySegment<float>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override float[] GetNumericArrayFromNamedArray(Pose[] s) {
    return s.GetNumericArray();
    }
    public override Pose[] GetNamedArrayFromNumericArray(float[] m) {
    if (m.Length % 7 != 0) throw new DataTypeException("Invalid namedarray array");
    Pose[] s = new Pose[m.Length / 7];
    var a = new ArraySegment<float>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometryf.Pose"; } }}

public class Pose2D_stub : NamedArrayStub<Pose2D,float> {
    public override float[] GetNumericArrayFromNamedArrayStruct(ref Pose2D s) {
    return s.GetNumericArray();
    }
    public override Pose2D GetNamedArrayStructFromNumericArray(float[] m) {
    if (m.Length != 3) throw new DataTypeException("Invalid namedarray array");
    var s = new Pose2D();
    var a = new ArraySegment<float>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override float[] GetNumericArrayFromNamedArray(Pose2D[] s) {
    return s.GetNumericArray();
    }
    public override Pose2D[] GetNamedArrayFromNumericArray(float[] m) {
    if (m.Length % 3 != 0) throw new DataTypeException("Invalid namedarray array");
    Pose2D[] s = new Pose2D[m.Length / 3];
    var a = new ArraySegment<float>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometryf.Pose2D"; } }}

public class SpatialVelocity_stub : NamedArrayStub<SpatialVelocity,float> {
    public override float[] GetNumericArrayFromNamedArrayStruct(ref SpatialVelocity s) {
    return s.GetNumericArray();
    }
    public override SpatialVelocity GetNamedArrayStructFromNumericArray(float[] m) {
    if (m.Length != 6) throw new DataTypeException("Invalid namedarray array");
    var s = new SpatialVelocity();
    var a = new ArraySegment<float>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override float[] GetNumericArrayFromNamedArray(SpatialVelocity[] s) {
    return s.GetNumericArray();
    }
    public override SpatialVelocity[] GetNamedArrayFromNumericArray(float[] m) {
    if (m.Length % 6 != 0) throw new DataTypeException("Invalid namedarray array");
    SpatialVelocity[] s = new SpatialVelocity[m.Length / 6];
    var a = new ArraySegment<float>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometryf.SpatialVelocity"; } }}

public class SpatialAcceleration_stub : NamedArrayStub<SpatialAcceleration,float> {
    public override float[] GetNumericArrayFromNamedArrayStruct(ref SpatialAcceleration s) {
    return s.GetNumericArray();
    }
    public override SpatialAcceleration GetNamedArrayStructFromNumericArray(float[] m) {
    if (m.Length != 6) throw new DataTypeException("Invalid namedarray array");
    var s = new SpatialAcceleration();
    var a = new ArraySegment<float>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override float[] GetNumericArrayFromNamedArray(SpatialAcceleration[] s) {
    return s.GetNumericArray();
    }
    public override SpatialAcceleration[] GetNamedArrayFromNumericArray(float[] m) {
    if (m.Length % 6 != 0) throw new DataTypeException("Invalid namedarray array");
    SpatialAcceleration[] s = new SpatialAcceleration[m.Length / 6];
    var a = new ArraySegment<float>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometryf.SpatialAcceleration"; } }}

public class Wrench_stub : NamedArrayStub<Wrench,float> {
    public override float[] GetNumericArrayFromNamedArrayStruct(ref Wrench s) {
    return s.GetNumericArray();
    }
    public override Wrench GetNamedArrayStructFromNumericArray(float[] m) {
    if (m.Length != 6) throw new DataTypeException("Invalid namedarray array");
    var s = new Wrench();
    var a = new ArraySegment<float>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override float[] GetNumericArrayFromNamedArray(Wrench[] s) {
    return s.GetNumericArray();
    }
    public override Wrench[] GetNamedArrayFromNumericArray(float[] m) {
    if (m.Length % 6 != 0) throw new DataTypeException("Invalid namedarray array");
    Wrench[] s = new Wrench[m.Length / 6];
    var a = new ArraySegment<float>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometryf.Wrench"; } }}

public class SpatialInertia_stub : NamedArrayStub<SpatialInertia,float> {
    public override float[] GetNumericArrayFromNamedArrayStruct(ref SpatialInertia s) {
    return s.GetNumericArray();
    }
    public override SpatialInertia GetNamedArrayStructFromNumericArray(float[] m) {
    if (m.Length != 10) throw new DataTypeException("Invalid namedarray array");
    var s = new SpatialInertia();
    var a = new ArraySegment<float>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override float[] GetNumericArrayFromNamedArray(SpatialInertia[] s) {
    return s.GetNumericArray();
    }
    public override SpatialInertia[] GetNamedArrayFromNumericArray(float[] m) {
    if (m.Length % 10 != 0) throw new DataTypeException("Invalid namedarray array");
    SpatialInertia[] s = new SpatialInertia[m.Length / 10];
    var a = new ArraySegment<float>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometryf.SpatialInertia"; } }}

public static class RRExtensions{
    public static float[] GetNumericArray(this Vector2[] s)
    {
    var a=new ArraySegment<float>(new float[2 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this Vector2[] s, ref ArraySegment<float> a)
    {
    if(a.Count < 2 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<float>(a.Array, a.Offset + 2*i,2);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this Vector2[] s, ref ArraySegment<float> a)
    {
    if(a.Count < 2 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<float>(a.Array, a.Offset + 2*i,2);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static float[] GetNumericArray(this Vector3[] s)
    {
    var a=new ArraySegment<float>(new float[3 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this Vector3[] s, ref ArraySegment<float> a)
    {
    if(a.Count < 3 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<float>(a.Array, a.Offset + 3*i,3);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this Vector3[] s, ref ArraySegment<float> a)
    {
    if(a.Count < 3 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<float>(a.Array, a.Offset + 3*i,3);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static float[] GetNumericArray(this Vector6[] s)
    {
    var a=new ArraySegment<float>(new float[6 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this Vector6[] s, ref ArraySegment<float> a)
    {
    if(a.Count < 6 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<float>(a.Array, a.Offset + 6*i,6);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this Vector6[] s, ref ArraySegment<float> a)
    {
    if(a.Count < 6 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<float>(a.Array, a.Offset + 6*i,6);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static float[] GetNumericArray(this Point2D[] s)
    {
    var a=new ArraySegment<float>(new float[2 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this Point2D[] s, ref ArraySegment<float> a)
    {
    if(a.Count < 2 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<float>(a.Array, a.Offset + 2*i,2);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this Point2D[] s, ref ArraySegment<float> a)
    {
    if(a.Count < 2 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<float>(a.Array, a.Offset + 2*i,2);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static float[] GetNumericArray(this Point[] s)
    {
    var a=new ArraySegment<float>(new float[3 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this Point[] s, ref ArraySegment<float> a)
    {
    if(a.Count < 3 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<float>(a.Array, a.Offset + 3*i,3);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this Point[] s, ref ArraySegment<float> a)
    {
    if(a.Count < 3 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<float>(a.Array, a.Offset + 3*i,3);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static float[] GetNumericArray(this Size2D[] s)
    {
    var a=new ArraySegment<float>(new float[2 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this Size2D[] s, ref ArraySegment<float> a)
    {
    if(a.Count < 2 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<float>(a.Array, a.Offset + 2*i,2);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this Size2D[] s, ref ArraySegment<float> a)
    {
    if(a.Count < 2 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<float>(a.Array, a.Offset + 2*i,2);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static float[] GetNumericArray(this Size[] s)
    {
    var a=new ArraySegment<float>(new float[3 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this Size[] s, ref ArraySegment<float> a)
    {
    if(a.Count < 3 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<float>(a.Array, a.Offset + 3*i,3);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this Size[] s, ref ArraySegment<float> a)
    {
    if(a.Count < 3 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<float>(a.Array, a.Offset + 3*i,3);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static float[] GetNumericArray(this Rect[] s)
    {
    var a=new ArraySegment<float>(new float[4 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this Rect[] s, ref ArraySegment<float> a)
    {
    if(a.Count < 4 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<float>(a.Array, a.Offset + 4*i,4);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this Rect[] s, ref ArraySegment<float> a)
    {
    if(a.Count < 4 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<float>(a.Array, a.Offset + 4*i,4);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static float[] GetNumericArray(this Box[] s)
    {
    var a=new ArraySegment<float>(new float[6 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this Box[] s, ref ArraySegment<float> a)
    {
    if(a.Count < 6 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<float>(a.Array, a.Offset + 6*i,6);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this Box[] s, ref ArraySegment<float> a)
    {
    if(a.Count < 6 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<float>(a.Array, a.Offset + 6*i,6);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static float[] GetNumericArray(this Quaternion[] s)
    {
    var a=new ArraySegment<float>(new float[4 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this Quaternion[] s, ref ArraySegment<float> a)
    {
    if(a.Count < 4 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<float>(a.Array, a.Offset + 4*i,4);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this Quaternion[] s, ref ArraySegment<float> a)
    {
    if(a.Count < 4 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<float>(a.Array, a.Offset + 4*i,4);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static float[] GetNumericArray(this Plane[] s)
    {
    var a=new ArraySegment<float>(new float[4 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this Plane[] s, ref ArraySegment<float> a)
    {
    if(a.Count < 4 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<float>(a.Array, a.Offset + 4*i,4);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this Plane[] s, ref ArraySegment<float> a)
    {
    if(a.Count < 4 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<float>(a.Array, a.Offset + 4*i,4);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static float[] GetNumericArray(this Transform[] s)
    {
    var a=new ArraySegment<float>(new float[7 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this Transform[] s, ref ArraySegment<float> a)
    {
    if(a.Count < 7 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<float>(a.Array, a.Offset + 7*i,7);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this Transform[] s, ref ArraySegment<float> a)
    {
    if(a.Count < 7 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<float>(a.Array, a.Offset + 7*i,7);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static float[] GetNumericArray(this Pose[] s)
    {
    var a=new ArraySegment<float>(new float[7 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this Pose[] s, ref ArraySegment<float> a)
    {
    if(a.Count < 7 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<float>(a.Array, a.Offset + 7*i,7);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this Pose[] s, ref ArraySegment<float> a)
    {
    if(a.Count < 7 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<float>(a.Array, a.Offset + 7*i,7);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static float[] GetNumericArray(this Pose2D[] s)
    {
    var a=new ArraySegment<float>(new float[3 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this Pose2D[] s, ref ArraySegment<float> a)
    {
    if(a.Count < 3 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<float>(a.Array, a.Offset + 3*i,3);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this Pose2D[] s, ref ArraySegment<float> a)
    {
    if(a.Count < 3 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<float>(a.Array, a.Offset + 3*i,3);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static float[] GetNumericArray(this SpatialVelocity[] s)
    {
    var a=new ArraySegment<float>(new float[6 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this SpatialVelocity[] s, ref ArraySegment<float> a)
    {
    if(a.Count < 6 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<float>(a.Array, a.Offset + 6*i,6);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this SpatialVelocity[] s, ref ArraySegment<float> a)
    {
    if(a.Count < 6 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<float>(a.Array, a.Offset + 6*i,6);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static float[] GetNumericArray(this SpatialAcceleration[] s)
    {
    var a=new ArraySegment<float>(new float[6 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this SpatialAcceleration[] s, ref ArraySegment<float> a)
    {
    if(a.Count < 6 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<float>(a.Array, a.Offset + 6*i,6);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this SpatialAcceleration[] s, ref ArraySegment<float> a)
    {
    if(a.Count < 6 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<float>(a.Array, a.Offset + 6*i,6);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static float[] GetNumericArray(this Wrench[] s)
    {
    var a=new ArraySegment<float>(new float[6 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this Wrench[] s, ref ArraySegment<float> a)
    {
    if(a.Count < 6 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<float>(a.Array, a.Offset + 6*i,6);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this Wrench[] s, ref ArraySegment<float> a)
    {
    if(a.Count < 6 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<float>(a.Array, a.Offset + 6*i,6);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static float[] GetNumericArray(this SpatialInertia[] s)
    {
    var a=new ArraySegment<float>(new float[10 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this SpatialInertia[] s, ref ArraySegment<float> a)
    {
    if(a.Count < 10 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<float>(a.Array, a.Offset + 10*i,10);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this SpatialInertia[] s, ref ArraySegment<float> a)
    {
    if(a.Count < 10 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<float>(a.Array, a.Offset + 10*i,10);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
}
}
namespace com.robotraconteur.geometryi
{
public class NamedTransform
{
    public com.robotraconteur.identifier.Identifier parent_frame;
    public com.robotraconteur.identifier.Identifier child_frame;
    public Transform transform;
}

public class NamedPose
{
    public com.robotraconteur.identifier.Identifier parent_frame;
    public com.robotraconteur.identifier.Identifier frame;
    public Pose pose;
}

public class PoseWithCovariance
{
    public Pose pose;
    public MultiDimArray covariance;
}

public class NamedPoseWithCovariance
{
    public NamedPose pose;
    public MultiDimArray covariance;
}

public class NamedPose2D
{
    public com.robotraconteur.identifier.Identifier parent_frame;
    public com.robotraconteur.identifier.Identifier frame;
    public Pose2D pose;
}

public class NamedSpatialVelocity
{
    public com.robotraconteur.identifier.Identifier parent_frame;
    public com.robotraconteur.identifier.Identifier frame;
    public SpatialVelocity velocity;
}

public class NamedSpatialAcceleration
{
    public com.robotraconteur.identifier.Identifier parent_frame;
    public com.robotraconteur.identifier.Identifier frame;
    public SpatialAcceleration acceleration;
}

public class NamedWrench
{
    public com.robotraconteur.identifier.Identifier parent_frame;
    public com.robotraconteur.identifier.Identifier frame;
    public Wrench wrench;
}

public class NamedSpatialInertia
{
    public com.robotraconteur.identifier.Identifier frame;
    public SpatialInertia inertia;
}

public class BoundingBox2D
{
    public NamedPose2D center;
    public Size2D size;
}

public class BoundingBox
{
    public NamedPose center;
    public Size size;
}

[NamedArrayElementTypeAndCount(typeof(int), 2)]
public struct Vector2
{
    public int x;
    public int y;
    public int[] GetNumericArray()
    {
    var a=new ArraySegment<int>(new int[2]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<int> rr_a)
    {
    if(rr_a.Count < 2) throw new ArgumentException("ArraySegment invalid length");
    rr_a.Array[rr_a.Offset + 0] = x;
    rr_a.Array[rr_a.Offset + 1] = y;
    }
    public void AssignFromNumericArray(ref ArraySegment<int> rr_a)
    {
    if(rr_a.Count < 2) throw new ArgumentException("ArraySegment invalid length");
    x = rr_a.Array[rr_a.Offset + 0];
    y = rr_a.Array[rr_a.Offset + 1];
    }
}

[NamedArrayElementTypeAndCount(typeof(int), 3)]
public struct Vector3
{
    public int x;
    public int y;
    public int z;
    public int[] GetNumericArray()
    {
    var a=new ArraySegment<int>(new int[3]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<int> rr_a)
    {
    if(rr_a.Count < 3) throw new ArgumentException("ArraySegment invalid length");
    rr_a.Array[rr_a.Offset + 0] = x;
    rr_a.Array[rr_a.Offset + 1] = y;
    rr_a.Array[rr_a.Offset + 2] = z;
    }
    public void AssignFromNumericArray(ref ArraySegment<int> rr_a)
    {
    if(rr_a.Count < 3) throw new ArgumentException("ArraySegment invalid length");
    x = rr_a.Array[rr_a.Offset + 0];
    y = rr_a.Array[rr_a.Offset + 1];
    z = rr_a.Array[rr_a.Offset + 2];
    }
}

[NamedArrayElementTypeAndCount(typeof(int), 6)]
public struct Vector6
{
    public int alpha;
    public int beta;
    public int gamma;
    public int x;
    public int y;
    public int z;
    public int[] GetNumericArray()
    {
    var a=new ArraySegment<int>(new int[6]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<int> rr_a)
    {
    if(rr_a.Count < 6) throw new ArgumentException("ArraySegment invalid length");
    rr_a.Array[rr_a.Offset + 0] = alpha;
    rr_a.Array[rr_a.Offset + 1] = beta;
    rr_a.Array[rr_a.Offset + 2] = gamma;
    rr_a.Array[rr_a.Offset + 3] = x;
    rr_a.Array[rr_a.Offset + 4] = y;
    rr_a.Array[rr_a.Offset + 5] = z;
    }
    public void AssignFromNumericArray(ref ArraySegment<int> rr_a)
    {
    if(rr_a.Count < 6) throw new ArgumentException("ArraySegment invalid length");
    alpha = rr_a.Array[rr_a.Offset + 0];
    beta = rr_a.Array[rr_a.Offset + 1];
    gamma = rr_a.Array[rr_a.Offset + 2];
    x = rr_a.Array[rr_a.Offset + 3];
    y = rr_a.Array[rr_a.Offset + 4];
    z = rr_a.Array[rr_a.Offset + 5];
    }
}

[NamedArrayElementTypeAndCount(typeof(int), 2)]
public struct Point2D
{
    public int x;
    public int y;
    public int[] GetNumericArray()
    {
    var a=new ArraySegment<int>(new int[2]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<int> rr_a)
    {
    if(rr_a.Count < 2) throw new ArgumentException("ArraySegment invalid length");
    rr_a.Array[rr_a.Offset + 0] = x;
    rr_a.Array[rr_a.Offset + 1] = y;
    }
    public void AssignFromNumericArray(ref ArraySegment<int> rr_a)
    {
    if(rr_a.Count < 2) throw new ArgumentException("ArraySegment invalid length");
    x = rr_a.Array[rr_a.Offset + 0];
    y = rr_a.Array[rr_a.Offset + 1];
    }
}

[NamedArrayElementTypeAndCount(typeof(int), 3)]
public struct Point
{
    public int x;
    public int y;
    public int z;
    public int[] GetNumericArray()
    {
    var a=new ArraySegment<int>(new int[3]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<int> rr_a)
    {
    if(rr_a.Count < 3) throw new ArgumentException("ArraySegment invalid length");
    rr_a.Array[rr_a.Offset + 0] = x;
    rr_a.Array[rr_a.Offset + 1] = y;
    rr_a.Array[rr_a.Offset + 2] = z;
    }
    public void AssignFromNumericArray(ref ArraySegment<int> rr_a)
    {
    if(rr_a.Count < 3) throw new ArgumentException("ArraySegment invalid length");
    x = rr_a.Array[rr_a.Offset + 0];
    y = rr_a.Array[rr_a.Offset + 1];
    z = rr_a.Array[rr_a.Offset + 2];
    }
}

[NamedArrayElementTypeAndCount(typeof(int), 2)]
public struct Size2D
{
    public int width;
    public int height;
    public int[] GetNumericArray()
    {
    var a=new ArraySegment<int>(new int[2]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<int> rr_a)
    {
    if(rr_a.Count < 2) throw new ArgumentException("ArraySegment invalid length");
    rr_a.Array[rr_a.Offset + 0] = width;
    rr_a.Array[rr_a.Offset + 1] = height;
    }
    public void AssignFromNumericArray(ref ArraySegment<int> rr_a)
    {
    if(rr_a.Count < 2) throw new ArgumentException("ArraySegment invalid length");
    width = rr_a.Array[rr_a.Offset + 0];
    height = rr_a.Array[rr_a.Offset + 1];
    }
}

[NamedArrayElementTypeAndCount(typeof(int), 3)]
public struct Size
{
    public int width;
    public int height;
    public int depth;
    public int[] GetNumericArray()
    {
    var a=new ArraySegment<int>(new int[3]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<int> rr_a)
    {
    if(rr_a.Count < 3) throw new ArgumentException("ArraySegment invalid length");
    rr_a.Array[rr_a.Offset + 0] = width;
    rr_a.Array[rr_a.Offset + 1] = height;
    rr_a.Array[rr_a.Offset + 2] = depth;
    }
    public void AssignFromNumericArray(ref ArraySegment<int> rr_a)
    {
    if(rr_a.Count < 3) throw new ArgumentException("ArraySegment invalid length");
    width = rr_a.Array[rr_a.Offset + 0];
    height = rr_a.Array[rr_a.Offset + 1];
    depth = rr_a.Array[rr_a.Offset + 2];
    }
}

[NamedArrayElementTypeAndCount(typeof(int), 4)]
public struct Rect
{
    public Point2D origin;
    public Size2D size;
    public int[] GetNumericArray()
    {
    var a=new ArraySegment<int>(new int[4]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<int> rr_a)
    {
    if(rr_a.Count < 4) throw new ArgumentException("ArraySegment invalid length");
    var rr_a0 = new ArraySegment<int>(rr_a.Array, rr_a.Offset + 0, 2);
    origin.GetNumericArray(ref rr_a0);
    var rr_a2 = new ArraySegment<int>(rr_a.Array, rr_a.Offset + 2, 2);
    size.GetNumericArray(ref rr_a2);
    }
    public void AssignFromNumericArray(ref ArraySegment<int> rr_a)
    {
    if(rr_a.Count < 4) throw new ArgumentException("ArraySegment invalid length");
    var rr_a0 = new ArraySegment<int>(rr_a.Array, rr_a.Offset + 0, 2);
    origin.AssignFromNumericArray(ref rr_a0);
    var rr_a2 = new ArraySegment<int>(rr_a.Array, rr_a.Offset + 2, 2);
    size.AssignFromNumericArray(ref rr_a2);
    }
}

[NamedArrayElementTypeAndCount(typeof(int), 6)]
public struct Box
{
    public Point origin;
    public Size size;
    public int[] GetNumericArray()
    {
    var a=new ArraySegment<int>(new int[6]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<int> rr_a)
    {
    if(rr_a.Count < 6) throw new ArgumentException("ArraySegment invalid length");
    var rr_a0 = new ArraySegment<int>(rr_a.Array, rr_a.Offset + 0, 3);
    origin.GetNumericArray(ref rr_a0);
    var rr_a3 = new ArraySegment<int>(rr_a.Array, rr_a.Offset + 3, 3);
    size.GetNumericArray(ref rr_a3);
    }
    public void AssignFromNumericArray(ref ArraySegment<int> rr_a)
    {
    if(rr_a.Count < 6) throw new ArgumentException("ArraySegment invalid length");
    var rr_a0 = new ArraySegment<int>(rr_a.Array, rr_a.Offset + 0, 3);
    origin.AssignFromNumericArray(ref rr_a0);
    var rr_a3 = new ArraySegment<int>(rr_a.Array, rr_a.Offset + 3, 3);
    size.AssignFromNumericArray(ref rr_a3);
    }
}

[NamedArrayElementTypeAndCount(typeof(int), 4)]
public struct Quaternion
{
    public int w;
    public int x;
    public int y;
    public int z;
    public int[] GetNumericArray()
    {
    var a=new ArraySegment<int>(new int[4]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<int> rr_a)
    {
    if(rr_a.Count < 4) throw new ArgumentException("ArraySegment invalid length");
    rr_a.Array[rr_a.Offset + 0] = w;
    rr_a.Array[rr_a.Offset + 1] = x;
    rr_a.Array[rr_a.Offset + 2] = y;
    rr_a.Array[rr_a.Offset + 3] = z;
    }
    public void AssignFromNumericArray(ref ArraySegment<int> rr_a)
    {
    if(rr_a.Count < 4) throw new ArgumentException("ArraySegment invalid length");
    w = rr_a.Array[rr_a.Offset + 0];
    x = rr_a.Array[rr_a.Offset + 1];
    y = rr_a.Array[rr_a.Offset + 2];
    z = rr_a.Array[rr_a.Offset + 3];
    }
}

[NamedArrayElementTypeAndCount(typeof(int), 4)]
public struct Plane
{
    public Vector3 normal;
    public int a;
    public int[] GetNumericArray()
    {
    var a=new ArraySegment<int>(new int[4]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<int> rr_a)
    {
    if(rr_a.Count < 4) throw new ArgumentException("ArraySegment invalid length");
    var rr_a0 = new ArraySegment<int>(rr_a.Array, rr_a.Offset + 0, 3);
    normal.GetNumericArray(ref rr_a0);
    rr_a.Array[rr_a.Offset + 3] = a;
    }
    public void AssignFromNumericArray(ref ArraySegment<int> rr_a)
    {
    if(rr_a.Count < 4) throw new ArgumentException("ArraySegment invalid length");
    var rr_a0 = new ArraySegment<int>(rr_a.Array, rr_a.Offset + 0, 3);
    normal.AssignFromNumericArray(ref rr_a0);
    a = rr_a.Array[rr_a.Offset + 3];
    }
}

[NamedArrayElementTypeAndCount(typeof(int), 7)]
public struct Transform
{
    public Quaternion rotation;
    public Vector3 translation;
    public int[] GetNumericArray()
    {
    var a=new ArraySegment<int>(new int[7]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<int> rr_a)
    {
    if(rr_a.Count < 7) throw new ArgumentException("ArraySegment invalid length");
    var rr_a0 = new ArraySegment<int>(rr_a.Array, rr_a.Offset + 0, 4);
    rotation.GetNumericArray(ref rr_a0);
    var rr_a4 = new ArraySegment<int>(rr_a.Array, rr_a.Offset + 4, 3);
    translation.GetNumericArray(ref rr_a4);
    }
    public void AssignFromNumericArray(ref ArraySegment<int> rr_a)
    {
    if(rr_a.Count < 7) throw new ArgumentException("ArraySegment invalid length");
    var rr_a0 = new ArraySegment<int>(rr_a.Array, rr_a.Offset + 0, 4);
    rotation.AssignFromNumericArray(ref rr_a0);
    var rr_a4 = new ArraySegment<int>(rr_a.Array, rr_a.Offset + 4, 3);
    translation.AssignFromNumericArray(ref rr_a4);
    }
}

[NamedArrayElementTypeAndCount(typeof(int), 7)]
public struct Pose
{
    public Quaternion orientation;
    public Point position;
    public int[] GetNumericArray()
    {
    var a=new ArraySegment<int>(new int[7]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<int> rr_a)
    {
    if(rr_a.Count < 7) throw new ArgumentException("ArraySegment invalid length");
    var rr_a0 = new ArraySegment<int>(rr_a.Array, rr_a.Offset + 0, 4);
    orientation.GetNumericArray(ref rr_a0);
    var rr_a4 = new ArraySegment<int>(rr_a.Array, rr_a.Offset + 4, 3);
    position.GetNumericArray(ref rr_a4);
    }
    public void AssignFromNumericArray(ref ArraySegment<int> rr_a)
    {
    if(rr_a.Count < 7) throw new ArgumentException("ArraySegment invalid length");
    var rr_a0 = new ArraySegment<int>(rr_a.Array, rr_a.Offset + 0, 4);
    orientation.AssignFromNumericArray(ref rr_a0);
    var rr_a4 = new ArraySegment<int>(rr_a.Array, rr_a.Offset + 4, 3);
    position.AssignFromNumericArray(ref rr_a4);
    }
}

[NamedArrayElementTypeAndCount(typeof(int), 3)]
public struct Pose2D
{
    public int orientation;
    public Point2D position;
    public int[] GetNumericArray()
    {
    var a=new ArraySegment<int>(new int[3]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<int> rr_a)
    {
    if(rr_a.Count < 3) throw new ArgumentException("ArraySegment invalid length");
    rr_a.Array[rr_a.Offset + 0] = orientation;
    var rr_a1 = new ArraySegment<int>(rr_a.Array, rr_a.Offset + 1, 2);
    position.GetNumericArray(ref rr_a1);
    }
    public void AssignFromNumericArray(ref ArraySegment<int> rr_a)
    {
    if(rr_a.Count < 3) throw new ArgumentException("ArraySegment invalid length");
    orientation = rr_a.Array[rr_a.Offset + 0];
    var rr_a1 = new ArraySegment<int>(rr_a.Array, rr_a.Offset + 1, 2);
    position.AssignFromNumericArray(ref rr_a1);
    }
}

[NamedArrayElementTypeAndCount(typeof(int), 6)]
public struct SpatialVelocity
{
    public Vector3 angular;
    public Vector3 linear;
    public int[] GetNumericArray()
    {
    var a=new ArraySegment<int>(new int[6]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<int> rr_a)
    {
    if(rr_a.Count < 6) throw new ArgumentException("ArraySegment invalid length");
    var rr_a0 = new ArraySegment<int>(rr_a.Array, rr_a.Offset + 0, 3);
    angular.GetNumericArray(ref rr_a0);
    var rr_a3 = new ArraySegment<int>(rr_a.Array, rr_a.Offset + 3, 3);
    linear.GetNumericArray(ref rr_a3);
    }
    public void AssignFromNumericArray(ref ArraySegment<int> rr_a)
    {
    if(rr_a.Count < 6) throw new ArgumentException("ArraySegment invalid length");
    var rr_a0 = new ArraySegment<int>(rr_a.Array, rr_a.Offset + 0, 3);
    angular.AssignFromNumericArray(ref rr_a0);
    var rr_a3 = new ArraySegment<int>(rr_a.Array, rr_a.Offset + 3, 3);
    linear.AssignFromNumericArray(ref rr_a3);
    }
}

[NamedArrayElementTypeAndCount(typeof(int), 6)]
public struct SpatialAcceleration
{
    public Vector3 angular;
    public Vector3 linear;
    public int[] GetNumericArray()
    {
    var a=new ArraySegment<int>(new int[6]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<int> rr_a)
    {
    if(rr_a.Count < 6) throw new ArgumentException("ArraySegment invalid length");
    var rr_a0 = new ArraySegment<int>(rr_a.Array, rr_a.Offset + 0, 3);
    angular.GetNumericArray(ref rr_a0);
    var rr_a3 = new ArraySegment<int>(rr_a.Array, rr_a.Offset + 3, 3);
    linear.GetNumericArray(ref rr_a3);
    }
    public void AssignFromNumericArray(ref ArraySegment<int> rr_a)
    {
    if(rr_a.Count < 6) throw new ArgumentException("ArraySegment invalid length");
    var rr_a0 = new ArraySegment<int>(rr_a.Array, rr_a.Offset + 0, 3);
    angular.AssignFromNumericArray(ref rr_a0);
    var rr_a3 = new ArraySegment<int>(rr_a.Array, rr_a.Offset + 3, 3);
    linear.AssignFromNumericArray(ref rr_a3);
    }
}

[NamedArrayElementTypeAndCount(typeof(int), 6)]
public struct Wrench
{
    public Vector3 torque;
    public Vector3 force;
    public int[] GetNumericArray()
    {
    var a=new ArraySegment<int>(new int[6]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<int> rr_a)
    {
    if(rr_a.Count < 6) throw new ArgumentException("ArraySegment invalid length");
    var rr_a0 = new ArraySegment<int>(rr_a.Array, rr_a.Offset + 0, 3);
    torque.GetNumericArray(ref rr_a0);
    var rr_a3 = new ArraySegment<int>(rr_a.Array, rr_a.Offset + 3, 3);
    force.GetNumericArray(ref rr_a3);
    }
    public void AssignFromNumericArray(ref ArraySegment<int> rr_a)
    {
    if(rr_a.Count < 6) throw new ArgumentException("ArraySegment invalid length");
    var rr_a0 = new ArraySegment<int>(rr_a.Array, rr_a.Offset + 0, 3);
    torque.AssignFromNumericArray(ref rr_a0);
    var rr_a3 = new ArraySegment<int>(rr_a.Array, rr_a.Offset + 3, 3);
    force.AssignFromNumericArray(ref rr_a3);
    }
}

[NamedArrayElementTypeAndCount(typeof(int), 10)]
public struct SpatialInertia
{
    public int m;
    public Vector3 com;
    public int ixx;
    public int ixy;
    public int ixz;
    public int iyy;
    public int iyz;
    public int izz;
    public int[] GetNumericArray()
    {
    var a=new ArraySegment<int>(new int[10]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<int> rr_a)
    {
    if(rr_a.Count < 10) throw new ArgumentException("ArraySegment invalid length");
    rr_a.Array[rr_a.Offset + 0] = m;
    var rr_a1 = new ArraySegment<int>(rr_a.Array, rr_a.Offset + 1, 3);
    com.GetNumericArray(ref rr_a1);
    rr_a.Array[rr_a.Offset + 4] = ixx;
    rr_a.Array[rr_a.Offset + 5] = ixy;
    rr_a.Array[rr_a.Offset + 6] = ixz;
    rr_a.Array[rr_a.Offset + 7] = iyy;
    rr_a.Array[rr_a.Offset + 8] = iyz;
    rr_a.Array[rr_a.Offset + 9] = izz;
    }
    public void AssignFromNumericArray(ref ArraySegment<int> rr_a)
    {
    if(rr_a.Count < 10) throw new ArgumentException("ArraySegment invalid length");
    m = rr_a.Array[rr_a.Offset + 0];
    var rr_a1 = new ArraySegment<int>(rr_a.Array, rr_a.Offset + 1, 3);
    com.AssignFromNumericArray(ref rr_a1);
    ixx = rr_a.Array[rr_a.Offset + 4];
    ixy = rr_a.Array[rr_a.Offset + 5];
    ixz = rr_a.Array[rr_a.Offset + 6];
    iyy = rr_a.Array[rr_a.Offset + 7];
    iyz = rr_a.Array[rr_a.Offset + 8];
    izz = rr_a.Array[rr_a.Offset + 9];
    }
}

}
namespace com.robotraconteur.geometryi
{
public class com__robotraconteur__geometryiFactory : ServiceFactory
{
    public override string DefString()
{
    const string s="service com.robotraconteur.geometryi\n\nstdver 0.10\n\nimport com.robotraconteur.identifier\n\nusing com.robotraconteur.identifier.Identifier\n\nnamedarray Vector2\nfield int32 x\nfield int32 y\nend\n\nnamedarray Vector3\nfield int32 x\nfield int32 y\nfield int32 z\nend\n\nnamedarray Vector6\nfield int32 alpha\nfield int32 beta\nfield int32 gamma\nfield int32 x\nfield int32 y\nfield int32 z\nend\n\nnamedarray Point2D\nfield int32 x\nfield int32 y\nend\n\nnamedarray Point\nfield int32 x\nfield int32 y\nfield int32 z\nend\n\nnamedarray Size2D\nfield int32 width\nfield int32 height\nend\n\nnamedarray Size\nfield int32 width\nfield int32 height\nfield int32 depth\nend\n\nnamedarray Rect\nfield Point2D origin\nfield Size2D size\nend\n\nnamedarray Box\nfield Point origin\nfield Size size\nend\n\nnamedarray Quaternion\nfield int32 w\nfield int32 x\nfield int32 y\nfield int32 z\nend\n\nnamedarray Plane\nfield Vector3 normal\nfield int32 a\nend\n\nnamedarray Transform\nfield Quaternion rotation\nfield Vector3 translation\nend\n\nstruct NamedTransform\nfield Identifier parent_frame\nfield Identifier child_frame\nfield Transform transform\nend\n\nnamedarray Pose\nfield Quaternion orientation\nfield Point position\nend\n\nstruct NamedPose\nfield Identifier parent_frame\nfield Identifier frame\nfield Pose pose\nend\n\nstruct PoseWithCovariance\nfield Pose pose\nfield int32[6,6] covariance\nend\n\nstruct NamedPoseWithCovariance\nfield NamedPose pose\nfield int32[6,6] covariance\nend\n\nnamedarray Pose2D\nfield int32 orientation\nfield Point2D position\nend\n\nstruct NamedPose2D\nfield Identifier parent_frame\nfield Identifier frame\nfield Pose2D pose\nend\n\nnamedarray SpatialVelocity\nfield Vector3 angular\nfield Vector3 linear\nend\n\nstruct NamedSpatialVelocity\nfield Identifier parent_frame\nfield Identifier frame\nfield SpatialVelocity velocity\nend\n\nnamedarray SpatialAcceleration\nfield Vector3 angular\nfield Vector3 linear\nend\n\nstruct NamedSpatialAcceleration\nfield Identifier parent_frame\nfield Identifier frame\nfield SpatialAcceleration acceleration\nend\n\nnamedarray Wrench\nfield Vector3 torque\nfield Vector3 force\nend\n\nstruct NamedWrench\nfield Identifier parent_frame\nfield Identifier frame\nfield Wrench wrench\nend\n\nnamedarray SpatialInertia\nfield int32 m\nfield Vector3 com\nfield int32 ixx\nfield int32 ixy\nfield int32 ixz\nfield int32 iyy\nfield int32 iyz\nfield int32 izz\nend\n\nstruct NamedSpatialInertia\nfield Identifier frame\nfield SpatialInertia inertia\nend\n\nstruct BoundingBox2D\nfield NamedPose2D center\nfield Size2D size\nend\n\nstruct BoundingBox\nfield NamedPose center\nfield Size size\nend\n\n";
    return s;
    }
    public override string GetServiceName() {return "com.robotraconteur.geometryi";}
    public NamedTransform_stub NamedTransform_stubentry;
    public NamedPose_stub NamedPose_stubentry;
    public PoseWithCovariance_stub PoseWithCovariance_stubentry;
    public NamedPoseWithCovariance_stub NamedPoseWithCovariance_stubentry;
    public NamedPose2D_stub NamedPose2D_stubentry;
    public NamedSpatialVelocity_stub NamedSpatialVelocity_stubentry;
    public NamedSpatialAcceleration_stub NamedSpatialAcceleration_stubentry;
    public NamedWrench_stub NamedWrench_stubentry;
    public NamedSpatialInertia_stub NamedSpatialInertia_stubentry;
    public BoundingBox2D_stub BoundingBox2D_stubentry;
    public BoundingBox_stub BoundingBox_stubentry;
    public Vector2_stub Vector2_stubentry;
    public Vector3_stub Vector3_stubentry;
    public Vector6_stub Vector6_stubentry;
    public Point2D_stub Point2D_stubentry;
    public Point_stub Point_stubentry;
    public Size2D_stub Size2D_stubentry;
    public Size_stub Size_stubentry;
    public Rect_stub Rect_stubentry;
    public Box_stub Box_stubentry;
    public Quaternion_stub Quaternion_stubentry;
    public Plane_stub Plane_stubentry;
    public Transform_stub Transform_stubentry;
    public Pose_stub Pose_stubentry;
    public Pose2D_stub Pose2D_stubentry;
    public SpatialVelocity_stub SpatialVelocity_stubentry;
    public SpatialAcceleration_stub SpatialAcceleration_stubentry;
    public Wrench_stub Wrench_stubentry;
    public SpatialInertia_stub SpatialInertia_stubentry;
    public com__robotraconteur__geometryiFactory()
{
    NamedTransform_stubentry=new NamedTransform_stub(this);
    NamedPose_stubentry=new NamedPose_stub(this);
    PoseWithCovariance_stubentry=new PoseWithCovariance_stub(this);
    NamedPoseWithCovariance_stubentry=new NamedPoseWithCovariance_stub(this);
    NamedPose2D_stubentry=new NamedPose2D_stub(this);
    NamedSpatialVelocity_stubentry=new NamedSpatialVelocity_stub(this);
    NamedSpatialAcceleration_stubentry=new NamedSpatialAcceleration_stub(this);
    NamedWrench_stubentry=new NamedWrench_stub(this);
    NamedSpatialInertia_stubentry=new NamedSpatialInertia_stub(this);
    BoundingBox2D_stubentry=new BoundingBox2D_stub(this);
    BoundingBox_stubentry=new BoundingBox_stub(this);
    Vector2_stubentry=new Vector2_stub();
    Vector3_stubentry=new Vector3_stub();
    Vector6_stubentry=new Vector6_stub();
    Point2D_stubentry=new Point2D_stub();
    Point_stubentry=new Point_stub();
    Size2D_stubentry=new Size2D_stub();
    Size_stubentry=new Size_stub();
    Rect_stubentry=new Rect_stub();
    Box_stubentry=new Box_stub();
    Quaternion_stubentry=new Quaternion_stub();
    Plane_stubentry=new Plane_stub();
    Transform_stubentry=new Transform_stub();
    Pose_stubentry=new Pose_stub();
    Pose2D_stubentry=new Pose2D_stub();
    SpatialVelocity_stubentry=new SpatialVelocity_stub();
    SpatialAcceleration_stubentry=new SpatialAcceleration_stub();
    Wrench_stubentry=new Wrench_stub();
    SpatialInertia_stubentry=new SpatialInertia_stub();
    }
    public override IStructureStub FindStructureStub(string objecttype)
    {
    if (objecttype=="NamedTransform")    return NamedTransform_stubentry;
    if (objecttype=="NamedPose")    return NamedPose_stubentry;
    if (objecttype=="PoseWithCovariance")    return PoseWithCovariance_stubentry;
    if (objecttype=="NamedPoseWithCovariance")    return NamedPoseWithCovariance_stubentry;
    if (objecttype=="NamedPose2D")    return NamedPose2D_stubentry;
    if (objecttype=="NamedSpatialVelocity")    return NamedSpatialVelocity_stubentry;
    if (objecttype=="NamedSpatialAcceleration")    return NamedSpatialAcceleration_stubentry;
    if (objecttype=="NamedWrench")    return NamedWrench_stubentry;
    if (objecttype=="NamedSpatialInertia")    return NamedSpatialInertia_stubentry;
    if (objecttype=="BoundingBox2D")    return BoundingBox2D_stubentry;
    if (objecttype=="BoundingBox")    return BoundingBox_stubentry;
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public override IPodStub FindPodStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override INamedArrayStub FindNamedArrayStub(string objecttype)
    {
    if (objecttype=="Vector2")    return Vector2_stubentry;
    if (objecttype=="Vector3")    return Vector3_stubentry;
    if (objecttype=="Vector6")    return Vector6_stubentry;
    if (objecttype=="Point2D")    return Point2D_stubentry;
    if (objecttype=="Point")    return Point_stubentry;
    if (objecttype=="Size2D")    return Size2D_stubentry;
    if (objecttype=="Size")    return Size_stubentry;
    if (objecttype=="Rect")    return Rect_stubentry;
    if (objecttype=="Box")    return Box_stubentry;
    if (objecttype=="Quaternion")    return Quaternion_stubentry;
    if (objecttype=="Plane")    return Plane_stubentry;
    if (objecttype=="Transform")    return Transform_stubentry;
    if (objecttype=="Pose")    return Pose_stubentry;
    if (objecttype=="Pose2D")    return Pose2D_stubentry;
    if (objecttype=="SpatialVelocity")    return SpatialVelocity_stubentry;
    if (objecttype=="SpatialAcceleration")    return SpatialAcceleration_stubentry;
    if (objecttype=="Wrench")    return Wrench_stubentry;
    if (objecttype=="SpatialInertia")    return SpatialInertia_stubentry;
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override ServiceStub CreateStub(WrappedServiceStub innerstub) {
    string objecttype=innerstub.RR_objecttype.GetServiceDefinition().Name + "." + innerstub.RR_objecttype.Name;    string objshort;
    if (CompareNamespace(objecttype, out objshort)) {
    switch (objshort) {
    default:
    break;
    }
    } else {
    string ext_service_type=RobotRaconteurNode.SplitQualifiedName(objecttype).Item1;
    return RobotRaconteurNode.s.GetServiceType(ext_service_type).CreateStub(innerstub);
    }
    throw new ServiceException("Could not create stub");
    }
    public override ServiceSkel CreateSkel(object obj) {
    string objtype = RobotRaconteurNode.GetTypeString(ServiceSkelUtil.FindParentInterface(obj.GetType()));
    string objshort;
    if (CompareNamespace(objtype, out objshort)) {
    switch(objshort) {
    default:
    break;
    }
    } else {
    string ext_service_type=RobotRaconteurNode.SplitQualifiedName(objtype).Item1;
    return RobotRaconteurNode.s.GetServiceFactory(ext_service_type).CreateSkel(obj);
    }
    throw new ServiceException("Could not create skel");
    }
    public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp){
    if (rr_exp==null) return rr_exp;
    string rr_type=rr_exp.Error;
    if (!rr_type.Contains(".")) return rr_exp;
    string rr_stype;
    if (CompareNamespace(rr_type, out rr_stype)) {
    } else {
    return RobotRaconteurNode.s.DownCastException(rr_exp); 
    }
    return rr_exp;
    }
}

public class NamedTransform_stub : IStructureStub {
    public NamedTransform_stub(com__robotraconteur__geometryiFactory d) {def=d;}
    private com__robotraconteur__geometryiFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    NamedTransform s = (NamedTransform)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("parent_frame",s.parent_frame));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("child_frame",s.child_frame));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackNamedArrayToArray<Transform>("transform",ref s.transform));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.geometryi.NamedTransform",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    NamedTransform s=new NamedTransform();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.parent_frame =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(MessageElement.FindElement(mm,"parent_frame"));
    s.child_frame =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(MessageElement.FindElement(mm,"child_frame"));
    s.transform =MessageElementUtil.UnpackNamedArrayFromArray<Transform>(MessageElement.FindElement(mm,"transform"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class NamedPose_stub : IStructureStub {
    public NamedPose_stub(com__robotraconteur__geometryiFactory d) {def=d;}
    private com__robotraconteur__geometryiFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    NamedPose s = (NamedPose)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("parent_frame",s.parent_frame));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("frame",s.frame));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackNamedArrayToArray<Pose>("pose",ref s.pose));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.geometryi.NamedPose",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    NamedPose s=new NamedPose();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.parent_frame =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(MessageElement.FindElement(mm,"parent_frame"));
    s.frame =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(MessageElement.FindElement(mm,"frame"));
    s.pose =MessageElementUtil.UnpackNamedArrayFromArray<Pose>(MessageElement.FindElement(mm,"pose"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class PoseWithCovariance_stub : IStructureStub {
    public PoseWithCovariance_stub(com__robotraconteur__geometryiFactory d) {def=d;}
    private com__robotraconteur__geometryiFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    PoseWithCovariance s = (PoseWithCovariance)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackNamedArrayToArray<Pose>("pose",ref s.pose));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackMultiDimArray("covariance",(MultiDimArray)DataTypeUtil.VerifyArrayLength(s.covariance,36,new uint[] {6,6})));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.geometryi.PoseWithCovariance",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    PoseWithCovariance s=new PoseWithCovariance();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.pose =MessageElementUtil.UnpackNamedArrayFromArray<Pose>(MessageElement.FindElement(mm,"pose"));
    s.covariance =DataTypeUtil.VerifyArrayLength(MessageElementUtil.UnpackMultiDimArray(MessageElement.FindElement(mm,"covariance")),36,new uint[] {6,6});
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class NamedPoseWithCovariance_stub : IStructureStub {
    public NamedPoseWithCovariance_stub(com__robotraconteur__geometryiFactory d) {def=d;}
    private com__robotraconteur__geometryiFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    NamedPoseWithCovariance s = (NamedPoseWithCovariance)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("pose",s.pose));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackMultiDimArray("covariance",(MultiDimArray)DataTypeUtil.VerifyArrayLength(s.covariance,36,new uint[] {6,6})));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.geometryi.NamedPoseWithCovariance",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    NamedPoseWithCovariance s=new NamedPoseWithCovariance();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.pose =MessageElementUtil.UnpackStructure<NamedPose>(MessageElement.FindElement(mm,"pose"));
    s.covariance =DataTypeUtil.VerifyArrayLength(MessageElementUtil.UnpackMultiDimArray(MessageElement.FindElement(mm,"covariance")),36,new uint[] {6,6});
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class NamedPose2D_stub : IStructureStub {
    public NamedPose2D_stub(com__robotraconteur__geometryiFactory d) {def=d;}
    private com__robotraconteur__geometryiFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    NamedPose2D s = (NamedPose2D)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("parent_frame",s.parent_frame));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("frame",s.frame));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackNamedArrayToArray<Pose2D>("pose",ref s.pose));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.geometryi.NamedPose2D",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    NamedPose2D s=new NamedPose2D();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.parent_frame =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(MessageElement.FindElement(mm,"parent_frame"));
    s.frame =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(MessageElement.FindElement(mm,"frame"));
    s.pose =MessageElementUtil.UnpackNamedArrayFromArray<Pose2D>(MessageElement.FindElement(mm,"pose"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class NamedSpatialVelocity_stub : IStructureStub {
    public NamedSpatialVelocity_stub(com__robotraconteur__geometryiFactory d) {def=d;}
    private com__robotraconteur__geometryiFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    NamedSpatialVelocity s = (NamedSpatialVelocity)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("parent_frame",s.parent_frame));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("frame",s.frame));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackNamedArrayToArray<SpatialVelocity>("velocity",ref s.velocity));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.geometryi.NamedSpatialVelocity",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    NamedSpatialVelocity s=new NamedSpatialVelocity();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.parent_frame =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(MessageElement.FindElement(mm,"parent_frame"));
    s.frame =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(MessageElement.FindElement(mm,"frame"));
    s.velocity =MessageElementUtil.UnpackNamedArrayFromArray<SpatialVelocity>(MessageElement.FindElement(mm,"velocity"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class NamedSpatialAcceleration_stub : IStructureStub {
    public NamedSpatialAcceleration_stub(com__robotraconteur__geometryiFactory d) {def=d;}
    private com__robotraconteur__geometryiFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    NamedSpatialAcceleration s = (NamedSpatialAcceleration)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("parent_frame",s.parent_frame));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("frame",s.frame));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackNamedArrayToArray<SpatialAcceleration>("acceleration",ref s.acceleration));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.geometryi.NamedSpatialAcceleration",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    NamedSpatialAcceleration s=new NamedSpatialAcceleration();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.parent_frame =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(MessageElement.FindElement(mm,"parent_frame"));
    s.frame =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(MessageElement.FindElement(mm,"frame"));
    s.acceleration =MessageElementUtil.UnpackNamedArrayFromArray<SpatialAcceleration>(MessageElement.FindElement(mm,"acceleration"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class NamedWrench_stub : IStructureStub {
    public NamedWrench_stub(com__robotraconteur__geometryiFactory d) {def=d;}
    private com__robotraconteur__geometryiFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    NamedWrench s = (NamedWrench)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("parent_frame",s.parent_frame));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("frame",s.frame));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackNamedArrayToArray<Wrench>("wrench",ref s.wrench));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.geometryi.NamedWrench",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    NamedWrench s=new NamedWrench();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.parent_frame =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(MessageElement.FindElement(mm,"parent_frame"));
    s.frame =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(MessageElement.FindElement(mm,"frame"));
    s.wrench =MessageElementUtil.UnpackNamedArrayFromArray<Wrench>(MessageElement.FindElement(mm,"wrench"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class NamedSpatialInertia_stub : IStructureStub {
    public NamedSpatialInertia_stub(com__robotraconteur__geometryiFactory d) {def=d;}
    private com__robotraconteur__geometryiFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    NamedSpatialInertia s = (NamedSpatialInertia)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("frame",s.frame));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackNamedArrayToArray<SpatialInertia>("inertia",ref s.inertia));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.geometryi.NamedSpatialInertia",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    NamedSpatialInertia s=new NamedSpatialInertia();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.frame =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(MessageElement.FindElement(mm,"frame"));
    s.inertia =MessageElementUtil.UnpackNamedArrayFromArray<SpatialInertia>(MessageElement.FindElement(mm,"inertia"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class BoundingBox2D_stub : IStructureStub {
    public BoundingBox2D_stub(com__robotraconteur__geometryiFactory d) {def=d;}
    private com__robotraconteur__geometryiFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    BoundingBox2D s = (BoundingBox2D)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("center",s.center));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackNamedArrayToArray<Size2D>("size",ref s.size));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.geometryi.BoundingBox2D",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    BoundingBox2D s=new BoundingBox2D();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.center =MessageElementUtil.UnpackStructure<NamedPose2D>(MessageElement.FindElement(mm,"center"));
    s.size =MessageElementUtil.UnpackNamedArrayFromArray<Size2D>(MessageElement.FindElement(mm,"size"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class BoundingBox_stub : IStructureStub {
    public BoundingBox_stub(com__robotraconteur__geometryiFactory d) {def=d;}
    private com__robotraconteur__geometryiFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    BoundingBox s = (BoundingBox)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("center",s.center));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackNamedArrayToArray<Size>("size",ref s.size));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.geometryi.BoundingBox",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    BoundingBox s=new BoundingBox();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.center =MessageElementUtil.UnpackStructure<NamedPose>(MessageElement.FindElement(mm,"center"));
    s.size =MessageElementUtil.UnpackNamedArrayFromArray<Size>(MessageElement.FindElement(mm,"size"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class Vector2_stub : NamedArrayStub<Vector2,int> {
    public override int[] GetNumericArrayFromNamedArrayStruct(ref Vector2 s) {
    return s.GetNumericArray();
    }
    public override Vector2 GetNamedArrayStructFromNumericArray(int[] m) {
    if (m.Length != 2) throw new DataTypeException("Invalid namedarray array");
    var s = new Vector2();
    var a = new ArraySegment<int>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override int[] GetNumericArrayFromNamedArray(Vector2[] s) {
    return s.GetNumericArray();
    }
    public override Vector2[] GetNamedArrayFromNumericArray(int[] m) {
    if (m.Length % 2 != 0) throw new DataTypeException("Invalid namedarray array");
    Vector2[] s = new Vector2[m.Length / 2];
    var a = new ArraySegment<int>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometryi.Vector2"; } }}

public class Vector3_stub : NamedArrayStub<Vector3,int> {
    public override int[] GetNumericArrayFromNamedArrayStruct(ref Vector3 s) {
    return s.GetNumericArray();
    }
    public override Vector3 GetNamedArrayStructFromNumericArray(int[] m) {
    if (m.Length != 3) throw new DataTypeException("Invalid namedarray array");
    var s = new Vector3();
    var a = new ArraySegment<int>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override int[] GetNumericArrayFromNamedArray(Vector3[] s) {
    return s.GetNumericArray();
    }
    public override Vector3[] GetNamedArrayFromNumericArray(int[] m) {
    if (m.Length % 3 != 0) throw new DataTypeException("Invalid namedarray array");
    Vector3[] s = new Vector3[m.Length / 3];
    var a = new ArraySegment<int>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometryi.Vector3"; } }}

public class Vector6_stub : NamedArrayStub<Vector6,int> {
    public override int[] GetNumericArrayFromNamedArrayStruct(ref Vector6 s) {
    return s.GetNumericArray();
    }
    public override Vector6 GetNamedArrayStructFromNumericArray(int[] m) {
    if (m.Length != 6) throw new DataTypeException("Invalid namedarray array");
    var s = new Vector6();
    var a = new ArraySegment<int>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override int[] GetNumericArrayFromNamedArray(Vector6[] s) {
    return s.GetNumericArray();
    }
    public override Vector6[] GetNamedArrayFromNumericArray(int[] m) {
    if (m.Length % 6 != 0) throw new DataTypeException("Invalid namedarray array");
    Vector6[] s = new Vector6[m.Length / 6];
    var a = new ArraySegment<int>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometryi.Vector6"; } }}

public class Point2D_stub : NamedArrayStub<Point2D,int> {
    public override int[] GetNumericArrayFromNamedArrayStruct(ref Point2D s) {
    return s.GetNumericArray();
    }
    public override Point2D GetNamedArrayStructFromNumericArray(int[] m) {
    if (m.Length != 2) throw new DataTypeException("Invalid namedarray array");
    var s = new Point2D();
    var a = new ArraySegment<int>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override int[] GetNumericArrayFromNamedArray(Point2D[] s) {
    return s.GetNumericArray();
    }
    public override Point2D[] GetNamedArrayFromNumericArray(int[] m) {
    if (m.Length % 2 != 0) throw new DataTypeException("Invalid namedarray array");
    Point2D[] s = new Point2D[m.Length / 2];
    var a = new ArraySegment<int>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometryi.Point2D"; } }}

public class Point_stub : NamedArrayStub<Point,int> {
    public override int[] GetNumericArrayFromNamedArrayStruct(ref Point s) {
    return s.GetNumericArray();
    }
    public override Point GetNamedArrayStructFromNumericArray(int[] m) {
    if (m.Length != 3) throw new DataTypeException("Invalid namedarray array");
    var s = new Point();
    var a = new ArraySegment<int>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override int[] GetNumericArrayFromNamedArray(Point[] s) {
    return s.GetNumericArray();
    }
    public override Point[] GetNamedArrayFromNumericArray(int[] m) {
    if (m.Length % 3 != 0) throw new DataTypeException("Invalid namedarray array");
    Point[] s = new Point[m.Length / 3];
    var a = new ArraySegment<int>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometryi.Point"; } }}

public class Size2D_stub : NamedArrayStub<Size2D,int> {
    public override int[] GetNumericArrayFromNamedArrayStruct(ref Size2D s) {
    return s.GetNumericArray();
    }
    public override Size2D GetNamedArrayStructFromNumericArray(int[] m) {
    if (m.Length != 2) throw new DataTypeException("Invalid namedarray array");
    var s = new Size2D();
    var a = new ArraySegment<int>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override int[] GetNumericArrayFromNamedArray(Size2D[] s) {
    return s.GetNumericArray();
    }
    public override Size2D[] GetNamedArrayFromNumericArray(int[] m) {
    if (m.Length % 2 != 0) throw new DataTypeException("Invalid namedarray array");
    Size2D[] s = new Size2D[m.Length / 2];
    var a = new ArraySegment<int>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometryi.Size2D"; } }}

public class Size_stub : NamedArrayStub<Size,int> {
    public override int[] GetNumericArrayFromNamedArrayStruct(ref Size s) {
    return s.GetNumericArray();
    }
    public override Size GetNamedArrayStructFromNumericArray(int[] m) {
    if (m.Length != 3) throw new DataTypeException("Invalid namedarray array");
    var s = new Size();
    var a = new ArraySegment<int>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override int[] GetNumericArrayFromNamedArray(Size[] s) {
    return s.GetNumericArray();
    }
    public override Size[] GetNamedArrayFromNumericArray(int[] m) {
    if (m.Length % 3 != 0) throw new DataTypeException("Invalid namedarray array");
    Size[] s = new Size[m.Length / 3];
    var a = new ArraySegment<int>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometryi.Size"; } }}

public class Rect_stub : NamedArrayStub<Rect,int> {
    public override int[] GetNumericArrayFromNamedArrayStruct(ref Rect s) {
    return s.GetNumericArray();
    }
    public override Rect GetNamedArrayStructFromNumericArray(int[] m) {
    if (m.Length != 4) throw new DataTypeException("Invalid namedarray array");
    var s = new Rect();
    var a = new ArraySegment<int>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override int[] GetNumericArrayFromNamedArray(Rect[] s) {
    return s.GetNumericArray();
    }
    public override Rect[] GetNamedArrayFromNumericArray(int[] m) {
    if (m.Length % 4 != 0) throw new DataTypeException("Invalid namedarray array");
    Rect[] s = new Rect[m.Length / 4];
    var a = new ArraySegment<int>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometryi.Rect"; } }}

public class Box_stub : NamedArrayStub<Box,int> {
    public override int[] GetNumericArrayFromNamedArrayStruct(ref Box s) {
    return s.GetNumericArray();
    }
    public override Box GetNamedArrayStructFromNumericArray(int[] m) {
    if (m.Length != 6) throw new DataTypeException("Invalid namedarray array");
    var s = new Box();
    var a = new ArraySegment<int>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override int[] GetNumericArrayFromNamedArray(Box[] s) {
    return s.GetNumericArray();
    }
    public override Box[] GetNamedArrayFromNumericArray(int[] m) {
    if (m.Length % 6 != 0) throw new DataTypeException("Invalid namedarray array");
    Box[] s = new Box[m.Length / 6];
    var a = new ArraySegment<int>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometryi.Box"; } }}

public class Quaternion_stub : NamedArrayStub<Quaternion,int> {
    public override int[] GetNumericArrayFromNamedArrayStruct(ref Quaternion s) {
    return s.GetNumericArray();
    }
    public override Quaternion GetNamedArrayStructFromNumericArray(int[] m) {
    if (m.Length != 4) throw new DataTypeException("Invalid namedarray array");
    var s = new Quaternion();
    var a = new ArraySegment<int>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override int[] GetNumericArrayFromNamedArray(Quaternion[] s) {
    return s.GetNumericArray();
    }
    public override Quaternion[] GetNamedArrayFromNumericArray(int[] m) {
    if (m.Length % 4 != 0) throw new DataTypeException("Invalid namedarray array");
    Quaternion[] s = new Quaternion[m.Length / 4];
    var a = new ArraySegment<int>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometryi.Quaternion"; } }}

public class Plane_stub : NamedArrayStub<Plane,int> {
    public override int[] GetNumericArrayFromNamedArrayStruct(ref Plane s) {
    return s.GetNumericArray();
    }
    public override Plane GetNamedArrayStructFromNumericArray(int[] m) {
    if (m.Length != 4) throw new DataTypeException("Invalid namedarray array");
    var s = new Plane();
    var a = new ArraySegment<int>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override int[] GetNumericArrayFromNamedArray(Plane[] s) {
    return s.GetNumericArray();
    }
    public override Plane[] GetNamedArrayFromNumericArray(int[] m) {
    if (m.Length % 4 != 0) throw new DataTypeException("Invalid namedarray array");
    Plane[] s = new Plane[m.Length / 4];
    var a = new ArraySegment<int>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometryi.Plane"; } }}

public class Transform_stub : NamedArrayStub<Transform,int> {
    public override int[] GetNumericArrayFromNamedArrayStruct(ref Transform s) {
    return s.GetNumericArray();
    }
    public override Transform GetNamedArrayStructFromNumericArray(int[] m) {
    if (m.Length != 7) throw new DataTypeException("Invalid namedarray array");
    var s = new Transform();
    var a = new ArraySegment<int>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override int[] GetNumericArrayFromNamedArray(Transform[] s) {
    return s.GetNumericArray();
    }
    public override Transform[] GetNamedArrayFromNumericArray(int[] m) {
    if (m.Length % 7 != 0) throw new DataTypeException("Invalid namedarray array");
    Transform[] s = new Transform[m.Length / 7];
    var a = new ArraySegment<int>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometryi.Transform"; } }}

public class Pose_stub : NamedArrayStub<Pose,int> {
    public override int[] GetNumericArrayFromNamedArrayStruct(ref Pose s) {
    return s.GetNumericArray();
    }
    public override Pose GetNamedArrayStructFromNumericArray(int[] m) {
    if (m.Length != 7) throw new DataTypeException("Invalid namedarray array");
    var s = new Pose();
    var a = new ArraySegment<int>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override int[] GetNumericArrayFromNamedArray(Pose[] s) {
    return s.GetNumericArray();
    }
    public override Pose[] GetNamedArrayFromNumericArray(int[] m) {
    if (m.Length % 7 != 0) throw new DataTypeException("Invalid namedarray array");
    Pose[] s = new Pose[m.Length / 7];
    var a = new ArraySegment<int>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometryi.Pose"; } }}

public class Pose2D_stub : NamedArrayStub<Pose2D,int> {
    public override int[] GetNumericArrayFromNamedArrayStruct(ref Pose2D s) {
    return s.GetNumericArray();
    }
    public override Pose2D GetNamedArrayStructFromNumericArray(int[] m) {
    if (m.Length != 3) throw new DataTypeException("Invalid namedarray array");
    var s = new Pose2D();
    var a = new ArraySegment<int>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override int[] GetNumericArrayFromNamedArray(Pose2D[] s) {
    return s.GetNumericArray();
    }
    public override Pose2D[] GetNamedArrayFromNumericArray(int[] m) {
    if (m.Length % 3 != 0) throw new DataTypeException("Invalid namedarray array");
    Pose2D[] s = new Pose2D[m.Length / 3];
    var a = new ArraySegment<int>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometryi.Pose2D"; } }}

public class SpatialVelocity_stub : NamedArrayStub<SpatialVelocity,int> {
    public override int[] GetNumericArrayFromNamedArrayStruct(ref SpatialVelocity s) {
    return s.GetNumericArray();
    }
    public override SpatialVelocity GetNamedArrayStructFromNumericArray(int[] m) {
    if (m.Length != 6) throw new DataTypeException("Invalid namedarray array");
    var s = new SpatialVelocity();
    var a = new ArraySegment<int>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override int[] GetNumericArrayFromNamedArray(SpatialVelocity[] s) {
    return s.GetNumericArray();
    }
    public override SpatialVelocity[] GetNamedArrayFromNumericArray(int[] m) {
    if (m.Length % 6 != 0) throw new DataTypeException("Invalid namedarray array");
    SpatialVelocity[] s = new SpatialVelocity[m.Length / 6];
    var a = new ArraySegment<int>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometryi.SpatialVelocity"; } }}

public class SpatialAcceleration_stub : NamedArrayStub<SpatialAcceleration,int> {
    public override int[] GetNumericArrayFromNamedArrayStruct(ref SpatialAcceleration s) {
    return s.GetNumericArray();
    }
    public override SpatialAcceleration GetNamedArrayStructFromNumericArray(int[] m) {
    if (m.Length != 6) throw new DataTypeException("Invalid namedarray array");
    var s = new SpatialAcceleration();
    var a = new ArraySegment<int>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override int[] GetNumericArrayFromNamedArray(SpatialAcceleration[] s) {
    return s.GetNumericArray();
    }
    public override SpatialAcceleration[] GetNamedArrayFromNumericArray(int[] m) {
    if (m.Length % 6 != 0) throw new DataTypeException("Invalid namedarray array");
    SpatialAcceleration[] s = new SpatialAcceleration[m.Length / 6];
    var a = new ArraySegment<int>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometryi.SpatialAcceleration"; } }}

public class Wrench_stub : NamedArrayStub<Wrench,int> {
    public override int[] GetNumericArrayFromNamedArrayStruct(ref Wrench s) {
    return s.GetNumericArray();
    }
    public override Wrench GetNamedArrayStructFromNumericArray(int[] m) {
    if (m.Length != 6) throw new DataTypeException("Invalid namedarray array");
    var s = new Wrench();
    var a = new ArraySegment<int>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override int[] GetNumericArrayFromNamedArray(Wrench[] s) {
    return s.GetNumericArray();
    }
    public override Wrench[] GetNamedArrayFromNumericArray(int[] m) {
    if (m.Length % 6 != 0) throw new DataTypeException("Invalid namedarray array");
    Wrench[] s = new Wrench[m.Length / 6];
    var a = new ArraySegment<int>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometryi.Wrench"; } }}

public class SpatialInertia_stub : NamedArrayStub<SpatialInertia,int> {
    public override int[] GetNumericArrayFromNamedArrayStruct(ref SpatialInertia s) {
    return s.GetNumericArray();
    }
    public override SpatialInertia GetNamedArrayStructFromNumericArray(int[] m) {
    if (m.Length != 10) throw new DataTypeException("Invalid namedarray array");
    var s = new SpatialInertia();
    var a = new ArraySegment<int>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override int[] GetNumericArrayFromNamedArray(SpatialInertia[] s) {
    return s.GetNumericArray();
    }
    public override SpatialInertia[] GetNamedArrayFromNumericArray(int[] m) {
    if (m.Length % 10 != 0) throw new DataTypeException("Invalid namedarray array");
    SpatialInertia[] s = new SpatialInertia[m.Length / 10];
    var a = new ArraySegment<int>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometryi.SpatialInertia"; } }}

public static class RRExtensions{
    public static int[] GetNumericArray(this Vector2[] s)
    {
    var a=new ArraySegment<int>(new int[2 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this Vector2[] s, ref ArraySegment<int> a)
    {
    if(a.Count < 2 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<int>(a.Array, a.Offset + 2*i,2);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this Vector2[] s, ref ArraySegment<int> a)
    {
    if(a.Count < 2 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<int>(a.Array, a.Offset + 2*i,2);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static int[] GetNumericArray(this Vector3[] s)
    {
    var a=new ArraySegment<int>(new int[3 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this Vector3[] s, ref ArraySegment<int> a)
    {
    if(a.Count < 3 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<int>(a.Array, a.Offset + 3*i,3);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this Vector3[] s, ref ArraySegment<int> a)
    {
    if(a.Count < 3 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<int>(a.Array, a.Offset + 3*i,3);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static int[] GetNumericArray(this Vector6[] s)
    {
    var a=new ArraySegment<int>(new int[6 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this Vector6[] s, ref ArraySegment<int> a)
    {
    if(a.Count < 6 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<int>(a.Array, a.Offset + 6*i,6);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this Vector6[] s, ref ArraySegment<int> a)
    {
    if(a.Count < 6 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<int>(a.Array, a.Offset + 6*i,6);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static int[] GetNumericArray(this Point2D[] s)
    {
    var a=new ArraySegment<int>(new int[2 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this Point2D[] s, ref ArraySegment<int> a)
    {
    if(a.Count < 2 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<int>(a.Array, a.Offset + 2*i,2);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this Point2D[] s, ref ArraySegment<int> a)
    {
    if(a.Count < 2 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<int>(a.Array, a.Offset + 2*i,2);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static int[] GetNumericArray(this Point[] s)
    {
    var a=new ArraySegment<int>(new int[3 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this Point[] s, ref ArraySegment<int> a)
    {
    if(a.Count < 3 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<int>(a.Array, a.Offset + 3*i,3);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this Point[] s, ref ArraySegment<int> a)
    {
    if(a.Count < 3 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<int>(a.Array, a.Offset + 3*i,3);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static int[] GetNumericArray(this Size2D[] s)
    {
    var a=new ArraySegment<int>(new int[2 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this Size2D[] s, ref ArraySegment<int> a)
    {
    if(a.Count < 2 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<int>(a.Array, a.Offset + 2*i,2);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this Size2D[] s, ref ArraySegment<int> a)
    {
    if(a.Count < 2 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<int>(a.Array, a.Offset + 2*i,2);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static int[] GetNumericArray(this Size[] s)
    {
    var a=new ArraySegment<int>(new int[3 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this Size[] s, ref ArraySegment<int> a)
    {
    if(a.Count < 3 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<int>(a.Array, a.Offset + 3*i,3);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this Size[] s, ref ArraySegment<int> a)
    {
    if(a.Count < 3 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<int>(a.Array, a.Offset + 3*i,3);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static int[] GetNumericArray(this Rect[] s)
    {
    var a=new ArraySegment<int>(new int[4 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this Rect[] s, ref ArraySegment<int> a)
    {
    if(a.Count < 4 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<int>(a.Array, a.Offset + 4*i,4);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this Rect[] s, ref ArraySegment<int> a)
    {
    if(a.Count < 4 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<int>(a.Array, a.Offset + 4*i,4);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static int[] GetNumericArray(this Box[] s)
    {
    var a=new ArraySegment<int>(new int[6 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this Box[] s, ref ArraySegment<int> a)
    {
    if(a.Count < 6 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<int>(a.Array, a.Offset + 6*i,6);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this Box[] s, ref ArraySegment<int> a)
    {
    if(a.Count < 6 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<int>(a.Array, a.Offset + 6*i,6);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static int[] GetNumericArray(this Quaternion[] s)
    {
    var a=new ArraySegment<int>(new int[4 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this Quaternion[] s, ref ArraySegment<int> a)
    {
    if(a.Count < 4 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<int>(a.Array, a.Offset + 4*i,4);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this Quaternion[] s, ref ArraySegment<int> a)
    {
    if(a.Count < 4 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<int>(a.Array, a.Offset + 4*i,4);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static int[] GetNumericArray(this Plane[] s)
    {
    var a=new ArraySegment<int>(new int[4 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this Plane[] s, ref ArraySegment<int> a)
    {
    if(a.Count < 4 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<int>(a.Array, a.Offset + 4*i,4);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this Plane[] s, ref ArraySegment<int> a)
    {
    if(a.Count < 4 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<int>(a.Array, a.Offset + 4*i,4);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static int[] GetNumericArray(this Transform[] s)
    {
    var a=new ArraySegment<int>(new int[7 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this Transform[] s, ref ArraySegment<int> a)
    {
    if(a.Count < 7 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<int>(a.Array, a.Offset + 7*i,7);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this Transform[] s, ref ArraySegment<int> a)
    {
    if(a.Count < 7 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<int>(a.Array, a.Offset + 7*i,7);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static int[] GetNumericArray(this Pose[] s)
    {
    var a=new ArraySegment<int>(new int[7 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this Pose[] s, ref ArraySegment<int> a)
    {
    if(a.Count < 7 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<int>(a.Array, a.Offset + 7*i,7);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this Pose[] s, ref ArraySegment<int> a)
    {
    if(a.Count < 7 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<int>(a.Array, a.Offset + 7*i,7);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static int[] GetNumericArray(this Pose2D[] s)
    {
    var a=new ArraySegment<int>(new int[3 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this Pose2D[] s, ref ArraySegment<int> a)
    {
    if(a.Count < 3 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<int>(a.Array, a.Offset + 3*i,3);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this Pose2D[] s, ref ArraySegment<int> a)
    {
    if(a.Count < 3 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<int>(a.Array, a.Offset + 3*i,3);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static int[] GetNumericArray(this SpatialVelocity[] s)
    {
    var a=new ArraySegment<int>(new int[6 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this SpatialVelocity[] s, ref ArraySegment<int> a)
    {
    if(a.Count < 6 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<int>(a.Array, a.Offset + 6*i,6);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this SpatialVelocity[] s, ref ArraySegment<int> a)
    {
    if(a.Count < 6 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<int>(a.Array, a.Offset + 6*i,6);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static int[] GetNumericArray(this SpatialAcceleration[] s)
    {
    var a=new ArraySegment<int>(new int[6 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this SpatialAcceleration[] s, ref ArraySegment<int> a)
    {
    if(a.Count < 6 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<int>(a.Array, a.Offset + 6*i,6);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this SpatialAcceleration[] s, ref ArraySegment<int> a)
    {
    if(a.Count < 6 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<int>(a.Array, a.Offset + 6*i,6);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static int[] GetNumericArray(this Wrench[] s)
    {
    var a=new ArraySegment<int>(new int[6 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this Wrench[] s, ref ArraySegment<int> a)
    {
    if(a.Count < 6 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<int>(a.Array, a.Offset + 6*i,6);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this Wrench[] s, ref ArraySegment<int> a)
    {
    if(a.Count < 6 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<int>(a.Array, a.Offset + 6*i,6);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static int[] GetNumericArray(this SpatialInertia[] s)
    {
    var a=new ArraySegment<int>(new int[10 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this SpatialInertia[] s, ref ArraySegment<int> a)
    {
    if(a.Count < 10 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<int>(a.Array, a.Offset + 10*i,10);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this SpatialInertia[] s, ref ArraySegment<int> a)
    {
    if(a.Count < 10 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<int>(a.Array, a.Offset + 10*i,10);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
}
}
namespace com.robotraconteur.gps
{
public class GpsStatus
{
    public ushort satellites_used;
    public int[] satellite_used_prn;
    public ushort satellites_visible;
    public int[] satellite_visible_prn;
    public int[] satellite_visible_z;
    public int[] satellite_visible_azimuth;
    public int[] satellite_visible_snr;
    public GpsMeasurementStatusCode status_code;
    public ushort motion_source_flags;
    public ushort orientation_source_flags;
    public ushort position_source_flags;
}

public class GpsState
{
    public GpsStatus status;
    public com.robotraconteur.datetime.DateTimeUTC time;
    public double latitude_deg;
    public double longitude_deg;
    public double altitude;
    public double track_deg;
    public double speed;
    public double climb;
    public double pitch;
    public double roll;
    public double dip;
    public double gdop;
    public double pdop;
    public double hdop;
    public double vdop;
    public double tdop;
    public double err;
    public double err_horz;
    public double err_track;
    public double err_speed;
    public double err_climb;
    public double err_time;
    public double err_pitch;
    public double err_roll;
    public double err_dip;
    public MultiDimArray position_covariance;
    public GpsCovarianceTypeCode position_covariance_type;
}

[RobotRaconteurServiceObjectInterface()]
public interface GpsSensor : com.robotraconteur.sensor.Sensor, com.robotraconteur.device.Device
{
    com.robotraconteur.device.DeviceInfo device_info { get; 	}
    com.robotraconteur.sensor.SensorInfo sensor_info { get; 	}
    object getf_param(string param_name);
    void setf_param(string param_name, object value_);
    Pipe<com.robotraconteur.sensor.SensorData> sensor_data{ get; set; }
    Wire<double[]> sensor_value{ get; set; }
    Wire<GpsState> gps_state{ get; set; }
}

public static class com__robotraconteur__gpsConstants 
{
}
    public enum GpsMeasurementStatusCode
    {
    no_fix = -1,
    fix = 0,
    sbas_fix = 1,
    gbas_fix = 2,
    dgps_fix = 18,
    waas_fix = 33
    };
    public enum GpsMeasureSourceFlags
    {
    none = 0,
    gps = 0x1,
    points = 0x2,
    doppler = 0x4,
    altimeter = 0x8,
    magnetic = 0x10,
    gyro = 0x20,
    accel = 0x40
    };
    public enum GpsCovarianceTypeCode
    {
    unknown = 0,
    approximated = 1,
    diagonal_known = 2,
    known = 3
    };
}
namespace com.robotraconteur.gps
{
public class com__robotraconteur__gpsFactory : ServiceFactory
{
    public override string DefString()
{
    const string s="service com.robotraconteur.gps\n\nstdver 0.10\n\nimport com.robotraconteur.sensor\nimport com.robotraconteur.device\nimport com.robotraconteur.datetime\n\nusing com.robotraconteur.sensor.Sensor\nusing com.robotraconteur.sensor.SensorInfo\nusing com.robotraconteur.sensor.SensorData\nusing com.robotraconteur.device.Device\nusing com.robotraconteur.device.DeviceInfo\nusing com.robotraconteur.datetime.DateTimeUTC\n\nenum GpsMeasurementStatusCode\nno_fix = -1,\nfix = 0,\nsbas_fix = 1,\ngbas_fix = 2,\ndgps_fix = 18,\nwaas_fix = 33\nend\n\nenum GpsMeasureSourceFlags\nnone = 0,\ngps = 0x1,\npoints = 0x2,\ndoppler = 0x4,\naltimeter = 0x8,\nmagnetic = 0x10,\ngyro = 0x20,\naccel = 0x40\nend\n\nenum GpsCovarianceTypeCode\nunknown = 0,\napproximated = 1,\ndiagonal_known = 2,\nknown = 3\nend\n\nstruct GpsStatus\nfield uint16 satellites_used\nfield int32[] satellite_used_prn\nfield uint16 satellites_visible\nfield int32[] satellite_visible_prn\nfield int32[] satellite_visible_z\nfield int32[] satellite_visible_azimuth\nfield int32[] satellite_visible_snr\nfield GpsMeasurementStatusCode status_code\nfield uint16 motion_source_flags\nfield uint16 orientation_source_flags\nfield uint16 position_source_flags\nend\n\n\nstruct GpsState\nfield GpsStatus status\nfield DateTimeUTC time\nfield double latitude_deg\nfield double longitude_deg\nfield double altitude\nfield double track_deg\nfield double speed\nfield double climb\nfield double pitch\nfield double roll\nfield double dip\nfield double gdop\nfield double pdop\nfield double hdop\nfield double vdop\nfield double tdop\nfield double err\nfield double err_horz\nfield double err_track\nfield double err_speed\nfield double err_climb\nfield double err_time\nfield double err_pitch\nfield double err_roll\nfield double err_dip\nfield double[3,3] position_covariance\nfield GpsCovarianceTypeCode position_covariance_type\nend\n\nobject GpsSensor\nimplements Sensor\nimplements Device\nproperty DeviceInfo device_info [readonly,nolock]\nproperty SensorInfo sensor_info [readonly,nolock]\nwire double[] sensor_value [readonly,nolock]\npipe SensorData sensor_data [readonly,nolock]\nfunction varvalue getf_param(string param_name)\nfunction void setf_param(string param_name, varvalue value)\nwire GpsState gps_state [readonly,nolock]\nend\n\n";
    return s;
    }
    public override string GetServiceName() {return "com.robotraconteur.gps";}
    public GpsStatus_stub GpsStatus_stubentry;
    public GpsState_stub GpsState_stubentry;
    public com__robotraconteur__gpsFactory()
{
    GpsStatus_stubentry=new GpsStatus_stub(this);
    GpsState_stubentry=new GpsState_stub(this);
    }
    public override IStructureStub FindStructureStub(string objecttype)
    {
    if (objecttype=="GpsStatus")    return GpsStatus_stubentry;
    if (objecttype=="GpsState")    return GpsState_stubentry;
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public override IPodStub FindPodStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override INamedArrayStub FindNamedArrayStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override ServiceStub CreateStub(WrappedServiceStub innerstub) {
    string objecttype=innerstub.RR_objecttype.GetServiceDefinition().Name + "." + innerstub.RR_objecttype.Name;    string objshort;
    if (CompareNamespace(objecttype, out objshort)) {
    switch (objshort) {
    case "GpsSensor":
    return new GpsSensor_stub(innerstub);
    default:
    break;
    }
    } else {
    string ext_service_type=RobotRaconteurNode.SplitQualifiedName(objecttype).Item1;
    return RobotRaconteurNode.s.GetServiceType(ext_service_type).CreateStub(innerstub);
    }
    throw new ServiceException("Could not create stub");
    }
    public override ServiceSkel CreateSkel(object obj) {
    string objtype = RobotRaconteurNode.GetTypeString(ServiceSkelUtil.FindParentInterface(obj.GetType()));
    string objshort;
    if (CompareNamespace(objtype, out objshort)) {
    switch(objshort) {
    case "GpsSensor":
    return new GpsSensor_skel((GpsSensor)obj);
    default:
    break;
    }
    } else {
    string ext_service_type=RobotRaconteurNode.SplitQualifiedName(objtype).Item1;
    return RobotRaconteurNode.s.GetServiceFactory(ext_service_type).CreateSkel(obj);
    }
    throw new ServiceException("Could not create skel");
    }
    public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp){
    if (rr_exp==null) return rr_exp;
    string rr_type=rr_exp.Error;
    if (!rr_type.Contains(".")) return rr_exp;
    string rr_stype;
    if (CompareNamespace(rr_type, out rr_stype)) {
    } else {
    return RobotRaconteurNode.s.DownCastException(rr_exp); 
    }
    return rr_exp;
    }
}

public class GpsStatus_stub : IStructureStub {
    public GpsStatus_stub(com__robotraconteur__gpsFactory d) {def=d;}
    private com__robotraconteur__gpsFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    GpsStatus s = (GpsStatus)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<ushort>("satellites_used",s.satellites_used));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackArray<int>("satellite_used_prn",s.satellite_used_prn));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<ushort>("satellites_visible",s.satellites_visible));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackArray<int>("satellite_visible_prn",s.satellite_visible_prn));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackArray<int>("satellite_visible_z",s.satellite_visible_z));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackArray<int>("satellite_visible_azimuth",s.satellite_visible_azimuth));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackArray<int>("satellite_visible_snr",s.satellite_visible_snr));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackEnum<GpsMeasurementStatusCode>("status_code",s.status_code));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<ushort>("motion_source_flags",s.motion_source_flags));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<ushort>("orientation_source_flags",s.orientation_source_flags));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<ushort>("position_source_flags",s.position_source_flags));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.gps.GpsStatus",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    GpsStatus s=new GpsStatus();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.satellites_used =(MessageElementUtil.UnpackScalar<ushort>(MessageElement.FindElement(mm,"satellites_used")));
    s.satellite_used_prn =MessageElementUtil.UnpackArray<int>(MessageElement.FindElement(mm,"satellite_used_prn"));
    s.satellites_visible =(MessageElementUtil.UnpackScalar<ushort>(MessageElement.FindElement(mm,"satellites_visible")));
    s.satellite_visible_prn =MessageElementUtil.UnpackArray<int>(MessageElement.FindElement(mm,"satellite_visible_prn"));
    s.satellite_visible_z =MessageElementUtil.UnpackArray<int>(MessageElement.FindElement(mm,"satellite_visible_z"));
    s.satellite_visible_azimuth =MessageElementUtil.UnpackArray<int>(MessageElement.FindElement(mm,"satellite_visible_azimuth"));
    s.satellite_visible_snr =MessageElementUtil.UnpackArray<int>(MessageElement.FindElement(mm,"satellite_visible_snr"));
    s.status_code =MessageElementUtil.UnpackEnum<GpsMeasurementStatusCode>(MessageElement.FindElement(mm,"status_code"));
    s.motion_source_flags =(MessageElementUtil.UnpackScalar<ushort>(MessageElement.FindElement(mm,"motion_source_flags")));
    s.orientation_source_flags =(MessageElementUtil.UnpackScalar<ushort>(MessageElement.FindElement(mm,"orientation_source_flags")));
    s.position_source_flags =(MessageElementUtil.UnpackScalar<ushort>(MessageElement.FindElement(mm,"position_source_flags")));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class GpsState_stub : IStructureStub {
    public GpsState_stub(com__robotraconteur__gpsFactory d) {def=d;}
    private com__robotraconteur__gpsFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    GpsState s = (GpsState)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("status",s.status));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.DateTimeUTC>("time",ref s.time));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<double>("latitude_deg",s.latitude_deg));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<double>("longitude_deg",s.longitude_deg));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<double>("altitude",s.altitude));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<double>("track_deg",s.track_deg));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<double>("speed",s.speed));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<double>("climb",s.climb));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<double>("pitch",s.pitch));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<double>("roll",s.roll));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<double>("dip",s.dip));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<double>("gdop",s.gdop));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<double>("pdop",s.pdop));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<double>("hdop",s.hdop));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<double>("vdop",s.vdop));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<double>("tdop",s.tdop));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<double>("err",s.err));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<double>("err_horz",s.err_horz));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<double>("err_track",s.err_track));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<double>("err_speed",s.err_speed));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<double>("err_climb",s.err_climb));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<double>("err_time",s.err_time));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<double>("err_pitch",s.err_pitch));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<double>("err_roll",s.err_roll));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<double>("err_dip",s.err_dip));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackMultiDimArray("position_covariance",(MultiDimArray)DataTypeUtil.VerifyArrayLength(s.position_covariance,9,new uint[] {3,3})));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackEnum<GpsCovarianceTypeCode>("position_covariance_type",s.position_covariance_type));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.gps.GpsState",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    GpsState s=new GpsState();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.status =MessageElementUtil.UnpackStructure<GpsStatus>(MessageElement.FindElement(mm,"status"));
    s.time =MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.DateTimeUTC>(MessageElement.FindElement(mm,"time"));
    s.latitude_deg =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(mm,"latitude_deg")));
    s.longitude_deg =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(mm,"longitude_deg")));
    s.altitude =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(mm,"altitude")));
    s.track_deg =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(mm,"track_deg")));
    s.speed =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(mm,"speed")));
    s.climb =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(mm,"climb")));
    s.pitch =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(mm,"pitch")));
    s.roll =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(mm,"roll")));
    s.dip =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(mm,"dip")));
    s.gdop =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(mm,"gdop")));
    s.pdop =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(mm,"pdop")));
    s.hdop =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(mm,"hdop")));
    s.vdop =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(mm,"vdop")));
    s.tdop =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(mm,"tdop")));
    s.err =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(mm,"err")));
    s.err_horz =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(mm,"err_horz")));
    s.err_track =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(mm,"err_track")));
    s.err_speed =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(mm,"err_speed")));
    s.err_climb =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(mm,"err_climb")));
    s.err_time =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(mm,"err_time")));
    s.err_pitch =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(mm,"err_pitch")));
    s.err_roll =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(mm,"err_roll")));
    s.err_dip =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(mm,"err_dip")));
    s.position_covariance =DataTypeUtil.VerifyArrayLength(MessageElementUtil.UnpackMultiDimArray(MessageElement.FindElement(mm,"position_covariance")),9,new uint[] {3,3});
    s.position_covariance_type =MessageElementUtil.UnpackEnum<GpsCovarianceTypeCode>(MessageElement.FindElement(mm,"position_covariance_type"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public interface async_GpsSensor : com.robotraconteur.sensor.async_Sensor, com.robotraconteur.device.async_Device
{
    Task<com.robotraconteur.device.DeviceInfo> async_get_device_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<com.robotraconteur.sensor.SensorInfo> async_get_sensor_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<object> async_getf_param(string param_name,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_setf_param(string param_name, object value_,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
}
public class GpsSensor_stub : ServiceStub , GpsSensor, async_GpsSensor{
    private Pipe<com.robotraconteur.sensor.SensorData> rr_sensor_data;
    private Wire<double[]> rr_sensor_value;
    private Wire<GpsState> rr_gps_state;
    public GpsSensor_stub(WrappedServiceStub innerstub) : base(innerstub) {
    rr_sensor_data=new Pipe<com.robotraconteur.sensor.SensorData>(innerstub.GetPipe("sensor_data"));
    rr_sensor_value=new Wire<double[]>(innerstub.GetWire("sensor_value"));
    rr_gps_state=new Wire<GpsState>(innerstub.GetWire("gps_state"));
    }
    public com.robotraconteur.device.DeviceInfo device_info {
    get {
    return MessageElementUtil.UnpackStructure<com.robotraconteur.device.DeviceInfo>(rr_innerstub.PropertyGet("device_info"));
    }
    }
    public com.robotraconteur.sensor.SensorInfo sensor_info {
    get {
    return MessageElementUtil.UnpackStructure<com.robotraconteur.sensor.SensorInfo>(rr_innerstub.PropertyGet("sensor_info"));
    }
    }
    public object getf_param(string param_name) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("param_name",param_name));
    using(MessageElement rr_me=rr_innerstub.FunctionCall("getf_param",rr_param))
    {
    return MessageElementUtil.UnpackVarType(rr_me);
    }
    }
    }
    public void setf_param(string param_name, object value_) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("param_name",param_name));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackVarType("value",value_));
    using(MessageElement rr_me=rr_innerstub.FunctionCall("setf_param",rr_param))
    {
    }
    }
    }
    public override void DispatchEvent(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    }
    public Pipe<com.robotraconteur.sensor.SensorData> sensor_data {
    get { return rr_sensor_data;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<double[]> sensor_value {
    get { return rr_sensor_value;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<GpsState> gps_state {
    get { return rr_gps_state;  }
    set { throw new InvalidOperationException();}
    }
    public override MessageElement CallbackCall(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public virtual async Task<com.robotraconteur.device.DeviceInfo> async_get_device_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("device_info",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<com.robotraconteur.device.DeviceInfo>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<com.robotraconteur.sensor.SensorInfo> async_get_sensor_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("sensor_info",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<com.robotraconteur.sensor.SensorInfo>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<object> async_getf_param(string param_name,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("param_name",param_name));
    using(var rr_return = await rr_async_FunctionCall("getf_param",rr_param,rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackVarType(rr_return);
    return rr_ret;
    } } }
    public virtual async Task async_setf_param(string param_name, object value_,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("param_name",param_name));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackVarType("value",value_));
    using(var rr_return = await rr_async_FunctionCall("setf_param",rr_param,rr_timeout)) {
    } } }
}
public class GpsSensor_skel : ServiceSkel {
    protected GpsSensor obj;
    protected async_GpsSensor async_obj;
    public GpsSensor_skel(object o) : base(o)    {
    obj=(GpsSensor)o;
    async_obj = o as async_GpsSensor;
    }
    public override void ReleaseCastObject() { 
    obj=null;
    async_obj=null;
    base.ReleaseCastObject();
    }
    public override MessageElement CallGetProperty(string membername, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    case "device_info":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_device_info().ContinueWith(t => async_adapter.EndTask<com.robotraconteur.device.DeviceInfo>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    com.robotraconteur.device.DeviceInfo ret=obj.device_info;
    return MessageElementUtil.PackStructure("return",ret);
    }
    case "sensor_info":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_sensor_info().ContinueWith(t => async_adapter.EndTask<com.robotraconteur.sensor.SensorInfo>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    com.robotraconteur.sensor.SensorInfo ret=obj.sensor_info;
    return MessageElementUtil.PackStructure("return",ret);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void CallSetProperty(string membername, MessageElement m, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override MessageElement CallFunction(string rr_membername, vectorptr_messageelement rr_m, WrappedServiceSkelAsyncAdapter rr_async_adapter) {
    switch (rr_membername) {
    case "getf_param":
    {
    string param_name=MessageElementUtil.UnpackString(vectorptr_messageelement_util.FindElement(rr_m,"param_name"));
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_getf_param(param_name).ContinueWith(t => rr_async_adapter.EndTask<object>(t,async_ret => MessageElementUtil.PackVarType("return",async_ret)));
    return null;
    }
    object rr_ret=this.obj.getf_param(param_name);
    return MessageElementUtil.PackVarType("return",rr_ret);
    }
    case "setf_param":
    {
    string param_name=MessageElementUtil.UnpackString(vectorptr_messageelement_util.FindElement(rr_m,"param_name"));
    object value_=MessageElementUtil.UnpackVarType(vectorptr_messageelement_util.FindElement(rr_m,"value"));
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_setf_param(param_name, value_).ContinueWith(t => rr_async_adapter.EndTask(t,new MessageElement("return",(int)0)));
    return null;
    }
    this.obj.setf_param(param_name, value_);
    return new MessageElement("return",(int)0);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override object GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(GpsSensor)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(GpsSensor)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void InitPipeServers(object rrobj1) {
    obj=(GpsSensor)rrobj1;
    obj.sensor_data=new Pipe<com.robotraconteur.sensor.SensorData>(innerskel.GetPipe("sensor_data"));
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(GpsSensor)rrobj1;
    }
    public override void InitWireServers(object rrobj1) {
    obj=(GpsSensor)rrobj1;
    obj.sensor_value=new Wire<double[]>(innerskel.GetWire("sensor_value"));
    obj.gps_state=new Wire<GpsState>(innerskel.GetWire("gps_state"));
    }
    public override WrappedArrayMemoryDirector GetArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedMultiDimArrayMemoryDirector GetMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodArrayMemoryDirector GetPodArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodMultiDimArrayMemoryDirector GetPodMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedArrayMemoryDirector GetNamedArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedMultiDimArrayMemoryDirector GetNamedMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override string RRType { get { return "com.robotraconteur.gps.GpsSensor"; } }
}
public class GpsSensor_default_impl : GpsSensor{
    protected PipeBroadcaster<com.robotraconteur.sensor.SensorData> rrvar_sensor_data;
    protected WireBroadcaster<double[]> rrvar_sensor_value;
    protected WireBroadcaster<GpsState> rrvar_gps_state;
    public virtual com.robotraconteur.device.DeviceInfo device_info {get; set;} = default(com.robotraconteur.device.DeviceInfo);
    public virtual com.robotraconteur.sensor.SensorInfo sensor_info {get; set;} = default(com.robotraconteur.sensor.SensorInfo);
    public virtual object getf_param(string param_name) {
    throw new NotImplementedException();    }
    public virtual void setf_param(string param_name, object value_) {
    throw new NotImplementedException();    }
    public virtual Pipe<com.robotraconteur.sensor.SensorData> sensor_data {
    get { return rrvar_sensor_data.Pipe;  }
    set {
    if (rrvar_sensor_data!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_sensor_data= new PipeBroadcaster<com.robotraconteur.sensor.SensorData>(value);
    }
    }
    public virtual Wire<double[]> sensor_value {
    get { return rrvar_sensor_value.Wire;  }
    set {
    if (rrvar_sensor_value!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_sensor_value= new WireBroadcaster<double[]>(value);
    }
    }
    public virtual Wire<GpsState> gps_state {
    get { return rrvar_gps_state.Wire;  }
    set {
    if (rrvar_gps_state!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_gps_state= new WireBroadcaster<GpsState>(value);
    }
    }
}
public static class RRExtensions{
}
}
namespace com.robotraconteur.hid.joystick
{
public class JoystickInfo
{
    public com.robotraconteur.device.DeviceInfo device_info;
    public uint id;
    public uint axes_count;
    public uint button_count;
    public uint hat_count;
    public uint joystick_capabilities;
    public ushort joystick_device_vendor;
    public ushort joystick_device_product;
    public ushort joystick_device_version;
    public com.robotraconteur.uuid.UUID joystick_uuid;
    public Dictionary<string,object> extended;
}

public class JoystickState
{
    public short[] axes;
    public byte[] buttons;
    public byte[] hats;
}

public class GamepadState
{
    public short left_x;
    public short left_y;
    public short right_x;
    public short right_y;
    public short trigger_left;
    public short trigger_right;
    public ushort buttons;
}

public class JoystickStateSensorData
{
    public com.robotraconteur.sensordata.SensorDataHeader data_header;
    public JoystickState joystick_state;
    public GamepadState gamepad_state;
}

[RobotRaconteurServiceObjectInterface()]
public interface Joystick : com.robotraconteur.device.Device, com.robotraconteur.device.clock.DeviceClock, com.robotraconteur.device.isoch.IsochDevice
{
    com.robotraconteur.device.DeviceInfo device_info { get; 	}
    JoystickInfo joystick_info { get; 	}
    com.robotraconteur.device.isoch.IsochInfo isoch_info { get; 	}
    uint isoch_downsample { get;  set; 	}
    void rumble(double intensity, double duration);
    void force_feedback(com.robotraconteur.geometry.Vector2 force, double duration);
    Pipe<JoystickStateSensorData> joystick_sensor_data{ get; set; }
    Wire<com.robotraconteur.device.clock.DeviceTime> device_clock_now{ get; set; }
    Wire<JoystickState> joystick_state{ get; set; }
    Wire<GamepadState> gamepad_state{ get; set; }
}

public static class com__robotraconteur__hid__joystickConstants 
{
}
    public enum JoystickCapabilities
    {
    none = 0,
    rumble = 0x1,
    force_feedback = 0x2,
    standard_gamepad = 0x4
    };
    public enum GamepadButtons
    {
    button_A = 0x1,
    button_B = 0x2,
    button_X = 0x4,
    button_Y = 0x8,
    button_back = 0x10,
    button_guide = 0x20,
    button_start = 0x40,
    button_left_stick = 0x80,
    button_right_stick = 0x100,
    button_left_shoulder = 0x200,
    button_right_shoulder = 0x400,
    button_dpad_up = 0x800,
    button_dpad_down = 0x1000,
    button_dpad_left = 0x2000,
    button_dpad_right = 0x4000
    };
    public enum JoystickHatState
    {
    hat_centered = 0,
    hat_up = 0x1,
    hat_right = 0x2,
    hat_down = 0x4,
    hat_left = 0x8,
    hat_rightup = 0x3,
    hat_rightdown = 0x6,
    hat_leftup = 0x9,
    hat_leftdown = 0xc
    };
}
namespace com.robotraconteur.hid.joystick
{
public class com__robotraconteur__hid__joystickFactory : ServiceFactory
{
    public override string DefString()
{
    const string s="service com.robotraconteur.hid.joystick\n\nstdver 0.10\n\nimport com.robotraconteur.device\nimport com.robotraconteur.sensordata\nimport com.robotraconteur.geometry\nimport com.robotraconteur.uuid\nimport com.robotraconteur.device.isoch\nimport com.robotraconteur.device.clock\n\nusing com.robotraconteur.device.DeviceInfo\nusing com.robotraconteur.device.Device\nusing com.robotraconteur.sensordata.SensorDataHeader\nusing com.robotraconteur.geometry.Vector2\nusing com.robotraconteur.uuid.UUID\nusing com.robotraconteur.device.isoch.IsochDevice\nusing com.robotraconteur.device.isoch.IsochInfo\nusing com.robotraconteur.device.clock.DeviceClock\nusing com.robotraconteur.device.clock.DeviceTime\n\nenum JoystickCapabilities\nnone = 0,\nrumble = 0x1,\nforce_feedback = 0x2,\nstandard_gamepad = 0x4\nend\n\nenum GamepadButtons\nbutton_A = 0x1,\nbutton_B = 0x2,\nbutton_X = 0x4,\nbutton_Y = 0x8,\nbutton_back = 0x10,\nbutton_guide = 0x20,\nbutton_start = 0x40,\nbutton_left_stick = 0x80,\nbutton_right_stick = 0x100,\nbutton_left_shoulder = 0x200,\nbutton_right_shoulder = 0x400,\nbutton_dpad_up = 0x800,\nbutton_dpad_down = 0x1000,\nbutton_dpad_left = 0x2000,\nbutton_dpad_right = 0x4000\nend\n\nenum JoystickHatState\nhat_centered = 0,\nhat_up = 0x01,\nhat_right = 0x02,\nhat_down = 0x04,\nhat_left = 0x08,\nhat_rightup = 0x03,\nhat_rightdown = 0x06,\nhat_leftup = 0x09,\nhat_leftdown = 0x0C\nend\n\nstruct JoystickInfo\nfield DeviceInfo device_info\nfield uint32 id\nfield uint32 axes_count\nfield uint32 button_count\nfield uint32 hat_count\nfield uint32 joystick_capabilities\nfield uint16 joystick_device_vendor\nfield uint16 joystick_device_product\nfield uint16 joystick_device_version\nfield UUID joystick_uuid\nfield varvalue{string} extended\nend\n\nstruct JoystickState\nfield int16[] axes\nfield uint8[] buttons\nfield uint8[] hats\nend\n\nstruct GamepadState\nfield int16 left_x\nfield int16 left_y\nfield int16 right_x\nfield int16 right_y\nfield int16 trigger_left\nfield int16 trigger_right\nfield uint16 buttons\nend\n\nstruct JoystickStateSensorData\nfield SensorDataHeader data_header\nfield JoystickState joystick_state\nfield GamepadState gamepad_state\nend\n\nobject Joystick\nimplements Device\nimplements DeviceClock\nimplements IsochDevice\nproperty DeviceInfo device_info [readonly,nolock]\nproperty JoystickInfo joystick_info [readonly,nolock]\nproperty IsochInfo isoch_info [readonly,nolock]\nproperty uint32 isoch_downsample [perclient]\nwire DeviceTime device_clock_now [readonly,nolock]\nwire JoystickState joystick_state [readonly,nolock]\nwire GamepadState gamepad_state [readonly,nolock]\npipe JoystickStateSensorData joystick_sensor_data [readonly,nolock]\nfunction void rumble(double intensity, double duration)\nfunction void force_feedback(Vector2 force, double duration)\nend\n\n";
    return s;
    }
    public override string GetServiceName() {return "com.robotraconteur.hid.joystick";}
    public JoystickInfo_stub JoystickInfo_stubentry;
    public JoystickState_stub JoystickState_stubentry;
    public GamepadState_stub GamepadState_stubentry;
    public JoystickStateSensorData_stub JoystickStateSensorData_stubentry;
    public com__robotraconteur__hid__joystickFactory()
{
    JoystickInfo_stubentry=new JoystickInfo_stub(this);
    JoystickState_stubentry=new JoystickState_stub(this);
    GamepadState_stubentry=new GamepadState_stub(this);
    JoystickStateSensorData_stubentry=new JoystickStateSensorData_stub(this);
    }
    public override IStructureStub FindStructureStub(string objecttype)
    {
    if (objecttype=="JoystickInfo")    return JoystickInfo_stubentry;
    if (objecttype=="JoystickState")    return JoystickState_stubentry;
    if (objecttype=="GamepadState")    return GamepadState_stubentry;
    if (objecttype=="JoystickStateSensorData")    return JoystickStateSensorData_stubentry;
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public override IPodStub FindPodStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override INamedArrayStub FindNamedArrayStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override ServiceStub CreateStub(WrappedServiceStub innerstub) {
    string objecttype=innerstub.RR_objecttype.GetServiceDefinition().Name + "." + innerstub.RR_objecttype.Name;    string objshort;
    if (CompareNamespace(objecttype, out objshort)) {
    switch (objshort) {
    case "Joystick":
    return new Joystick_stub(innerstub);
    default:
    break;
    }
    } else {
    string ext_service_type=RobotRaconteurNode.SplitQualifiedName(objecttype).Item1;
    return RobotRaconteurNode.s.GetServiceType(ext_service_type).CreateStub(innerstub);
    }
    throw new ServiceException("Could not create stub");
    }
    public override ServiceSkel CreateSkel(object obj) {
    string objtype = RobotRaconteurNode.GetTypeString(ServiceSkelUtil.FindParentInterface(obj.GetType()));
    string objshort;
    if (CompareNamespace(objtype, out objshort)) {
    switch(objshort) {
    case "Joystick":
    return new Joystick_skel((Joystick)obj);
    default:
    break;
    }
    } else {
    string ext_service_type=RobotRaconteurNode.SplitQualifiedName(objtype).Item1;
    return RobotRaconteurNode.s.GetServiceFactory(ext_service_type).CreateSkel(obj);
    }
    throw new ServiceException("Could not create skel");
    }
    public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp){
    if (rr_exp==null) return rr_exp;
    string rr_type=rr_exp.Error;
    if (!rr_type.Contains(".")) return rr_exp;
    string rr_stype;
    if (CompareNamespace(rr_type, out rr_stype)) {
    } else {
    return RobotRaconteurNode.s.DownCastException(rr_exp); 
    }
    return rr_exp;
    }
}

public class JoystickInfo_stub : IStructureStub {
    public JoystickInfo_stub(com__robotraconteur__hid__joystickFactory d) {def=d;}
    private com__robotraconteur__hid__joystickFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    JoystickInfo s = (JoystickInfo)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("device_info",s.device_info));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<uint>("id",s.id));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<uint>("axes_count",s.axes_count));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<uint>("button_count",s.button_count));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<uint>("hat_count",s.hat_count));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<uint>("joystick_capabilities",s.joystick_capabilities));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<ushort>("joystick_device_vendor",s.joystick_device_vendor));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<ushort>("joystick_device_product",s.joystick_device_product));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<ushort>("joystick_device_version",s.joystick_device_version));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.uuid.UUID>("joystick_uuid",ref s.joystick_uuid));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackMapType<string,object>("extended",s.extended));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.hid.joystick.JoystickInfo",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    JoystickInfo s=new JoystickInfo();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.device_info =MessageElementUtil.UnpackStructure<com.robotraconteur.device.DeviceInfo>(MessageElement.FindElement(mm,"device_info"));
    s.id =(MessageElementUtil.UnpackScalar<uint>(MessageElement.FindElement(mm,"id")));
    s.axes_count =(MessageElementUtil.UnpackScalar<uint>(MessageElement.FindElement(mm,"axes_count")));
    s.button_count =(MessageElementUtil.UnpackScalar<uint>(MessageElement.FindElement(mm,"button_count")));
    s.hat_count =(MessageElementUtil.UnpackScalar<uint>(MessageElement.FindElement(mm,"hat_count")));
    s.joystick_capabilities =(MessageElementUtil.UnpackScalar<uint>(MessageElement.FindElement(mm,"joystick_capabilities")));
    s.joystick_device_vendor =(MessageElementUtil.UnpackScalar<ushort>(MessageElement.FindElement(mm,"joystick_device_vendor")));
    s.joystick_device_product =(MessageElementUtil.UnpackScalar<ushort>(MessageElement.FindElement(mm,"joystick_device_product")));
    s.joystick_device_version =(MessageElementUtil.UnpackScalar<ushort>(MessageElement.FindElement(mm,"joystick_device_version")));
    s.joystick_uuid =MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.uuid.UUID>(MessageElement.FindElement(mm,"joystick_uuid"));
    s.extended =MessageElementUtil.UnpackMap<string,object>(MessageElement.FindElement(mm,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class JoystickState_stub : IStructureStub {
    public JoystickState_stub(com__robotraconteur__hid__joystickFactory d) {def=d;}
    private com__robotraconteur__hid__joystickFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    JoystickState s = (JoystickState)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackArray<short>("axes",s.axes));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackArray<byte>("buttons",s.buttons));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackArray<byte>("hats",s.hats));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.hid.joystick.JoystickState",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    JoystickState s=new JoystickState();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.axes =MessageElementUtil.UnpackArray<short>(MessageElement.FindElement(mm,"axes"));
    s.buttons =MessageElementUtil.UnpackArray<byte>(MessageElement.FindElement(mm,"buttons"));
    s.hats =MessageElementUtil.UnpackArray<byte>(MessageElement.FindElement(mm,"hats"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class GamepadState_stub : IStructureStub {
    public GamepadState_stub(com__robotraconteur__hid__joystickFactory d) {def=d;}
    private com__robotraconteur__hid__joystickFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    GamepadState s = (GamepadState)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<short>("left_x",s.left_x));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<short>("left_y",s.left_y));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<short>("right_x",s.right_x));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<short>("right_y",s.right_y));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<short>("trigger_left",s.trigger_left));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<short>("trigger_right",s.trigger_right));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<ushort>("buttons",s.buttons));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.hid.joystick.GamepadState",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    GamepadState s=new GamepadState();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.left_x =(MessageElementUtil.UnpackScalar<short>(MessageElement.FindElement(mm,"left_x")));
    s.left_y =(MessageElementUtil.UnpackScalar<short>(MessageElement.FindElement(mm,"left_y")));
    s.right_x =(MessageElementUtil.UnpackScalar<short>(MessageElement.FindElement(mm,"right_x")));
    s.right_y =(MessageElementUtil.UnpackScalar<short>(MessageElement.FindElement(mm,"right_y")));
    s.trigger_left =(MessageElementUtil.UnpackScalar<short>(MessageElement.FindElement(mm,"trigger_left")));
    s.trigger_right =(MessageElementUtil.UnpackScalar<short>(MessageElement.FindElement(mm,"trigger_right")));
    s.buttons =(MessageElementUtil.UnpackScalar<ushort>(MessageElement.FindElement(mm,"buttons")));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class JoystickStateSensorData_stub : IStructureStub {
    public JoystickStateSensorData_stub(com__robotraconteur__hid__joystickFactory d) {def=d;}
    private com__robotraconteur__hid__joystickFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    JoystickStateSensorData s = (JoystickStateSensorData)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("data_header",s.data_header));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("joystick_state",s.joystick_state));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("gamepad_state",s.gamepad_state));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.hid.joystick.JoystickStateSensorData",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    JoystickStateSensorData s=new JoystickStateSensorData();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.data_header =MessageElementUtil.UnpackStructure<com.robotraconteur.sensordata.SensorDataHeader>(MessageElement.FindElement(mm,"data_header"));
    s.joystick_state =MessageElementUtil.UnpackStructure<JoystickState>(MessageElement.FindElement(mm,"joystick_state"));
    s.gamepad_state =MessageElementUtil.UnpackStructure<GamepadState>(MessageElement.FindElement(mm,"gamepad_state"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public interface async_Joystick : com.robotraconteur.device.async_Device, com.robotraconteur.device.clock.async_DeviceClock, com.robotraconteur.device.isoch.async_IsochDevice
{
    Task<com.robotraconteur.device.DeviceInfo> async_get_device_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<JoystickInfo> async_get_joystick_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<com.robotraconteur.device.isoch.IsochInfo> async_get_isoch_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<uint> async_get_isoch_downsample(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_isoch_downsample(uint value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_rumble(double intensity, double duration,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_force_feedback(com.robotraconteur.geometry.Vector2 force, double duration,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
}
public class Joystick_stub : ServiceStub , Joystick, async_Joystick{
    private Pipe<JoystickStateSensorData> rr_joystick_sensor_data;
    private Wire<com.robotraconteur.device.clock.DeviceTime> rr_device_clock_now;
    private Wire<JoystickState> rr_joystick_state;
    private Wire<GamepadState> rr_gamepad_state;
    public Joystick_stub(WrappedServiceStub innerstub) : base(innerstub) {
    rr_joystick_sensor_data=new Pipe<JoystickStateSensorData>(innerstub.GetPipe("joystick_sensor_data"));
    rr_device_clock_now=new Wire<com.robotraconteur.device.clock.DeviceTime>(innerstub.GetWire("device_clock_now"));
    rr_joystick_state=new Wire<JoystickState>(innerstub.GetWire("joystick_state"));
    rr_gamepad_state=new Wire<GamepadState>(innerstub.GetWire("gamepad_state"));
    }
    public com.robotraconteur.device.DeviceInfo device_info {
    get {
    return MessageElementUtil.UnpackStructure<com.robotraconteur.device.DeviceInfo>(rr_innerstub.PropertyGet("device_info"));
    }
    }
    public JoystickInfo joystick_info {
    get {
    return MessageElementUtil.UnpackStructure<JoystickInfo>(rr_innerstub.PropertyGet("joystick_info"));
    }
    }
    public com.robotraconteur.device.isoch.IsochInfo isoch_info {
    get {
    return MessageElementUtil.UnpackStructure<com.robotraconteur.device.isoch.IsochInfo>(rr_innerstub.PropertyGet("isoch_info"));
    }
    }
    public uint isoch_downsample {
    get {
    return (MessageElementUtil.UnpackScalar<uint>(rr_innerstub.PropertyGet("isoch_downsample")));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackScalar<uint>("value",value))
    {
    rr_innerstub.PropertySet("isoch_downsample", m);
    }
    }
    }
    public void rumble(double intensity, double duration) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackScalar<double>("intensity",intensity));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackScalar<double>("duration",duration));
    using(MessageElement rr_me=rr_innerstub.FunctionCall("rumble",rr_param))
    {
    }
    }
    }
    public void force_feedback(com.robotraconteur.geometry.Vector2 force, double duration) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Vector2>("force",ref force));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackScalar<double>("duration",duration));
    using(MessageElement rr_me=rr_innerstub.FunctionCall("force_feedback",rr_param))
    {
    }
    }
    }
    public override void DispatchEvent(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    }
    public Pipe<JoystickStateSensorData> joystick_sensor_data {
    get { return rr_joystick_sensor_data;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<com.robotraconteur.device.clock.DeviceTime> device_clock_now {
    get { return rr_device_clock_now;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<JoystickState> joystick_state {
    get { return rr_joystick_state;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<GamepadState> gamepad_state {
    get { return rr_gamepad_state;  }
    set { throw new InvalidOperationException();}
    }
    public override MessageElement CallbackCall(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public virtual async Task<com.robotraconteur.device.DeviceInfo> async_get_device_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("device_info",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<com.robotraconteur.device.DeviceInfo>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<JoystickInfo> async_get_joystick_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("joystick_info",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<JoystickInfo>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<com.robotraconteur.device.isoch.IsochInfo> async_get_isoch_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("isoch_info",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<com.robotraconteur.device.isoch.IsochInfo>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<uint> async_get_isoch_downsample(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("isoch_downsample",rr_timeout)) {
    var rr_ret=(MessageElementUtil.UnpackScalar<uint>(rr_value));
    return rr_ret;
    } }
    public virtual async Task async_set_isoch_downsample(uint value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackScalar<uint>("value",value))
    {
    await rr_async_PropertySet("isoch_downsample",mm,rr_timeout);
    }
    }
    public virtual async Task async_rumble(double intensity, double duration,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackScalar<double>("intensity",intensity));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackScalar<double>("duration",duration));
    using(var rr_return = await rr_async_FunctionCall("rumble",rr_param,rr_timeout)) {
    } } }
    public virtual async Task async_force_feedback(com.robotraconteur.geometry.Vector2 force, double duration,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Vector2>("force",ref force));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackScalar<double>("duration",duration));
    using(var rr_return = await rr_async_FunctionCall("force_feedback",rr_param,rr_timeout)) {
    } } }
}
public class Joystick_skel : ServiceSkel {
    protected Joystick obj;
    protected async_Joystick async_obj;
    public Joystick_skel(object o) : base(o)    {
    obj=(Joystick)o;
    async_obj = o as async_Joystick;
    }
    public override void ReleaseCastObject() { 
    obj=null;
    async_obj=null;
    base.ReleaseCastObject();
    }
    public override MessageElement CallGetProperty(string membername, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    case "device_info":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_device_info().ContinueWith(t => async_adapter.EndTask<com.robotraconteur.device.DeviceInfo>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    com.robotraconteur.device.DeviceInfo ret=obj.device_info;
    return MessageElementUtil.PackStructure("return",ret);
    }
    case "joystick_info":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_joystick_info().ContinueWith(t => async_adapter.EndTask<JoystickInfo>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    JoystickInfo ret=obj.joystick_info;
    return MessageElementUtil.PackStructure("return",ret);
    }
    case "isoch_info":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_isoch_info().ContinueWith(t => async_adapter.EndTask<com.robotraconteur.device.isoch.IsochInfo>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    com.robotraconteur.device.isoch.IsochInfo ret=obj.isoch_info;
    return MessageElementUtil.PackStructure("return",ret);
    }
    case "isoch_downsample":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_isoch_downsample().ContinueWith(t => async_adapter.EndTask<uint>(t,async_ret => MessageElementUtil.PackScalar<uint>("return",async_ret)));
    return null;
    }
    uint ret=obj.isoch_downsample;
    return MessageElementUtil.PackScalar<uint>("return",ret);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void CallSetProperty(string membername, MessageElement m, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    case "isoch_downsample":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_isoch_downsample((MessageElementUtil.UnpackScalar<uint>(m))).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.isoch_downsample=(MessageElementUtil.UnpackScalar<uint>(m));
    return;
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override MessageElement CallFunction(string rr_membername, vectorptr_messageelement rr_m, WrappedServiceSkelAsyncAdapter rr_async_adapter) {
    switch (rr_membername) {
    case "rumble":
    {
    double intensity=(MessageElementUtil.UnpackScalar<double>(vectorptr_messageelement_util.FindElement(rr_m,"intensity")));
    double duration=(MessageElementUtil.UnpackScalar<double>(vectorptr_messageelement_util.FindElement(rr_m,"duration")));
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_rumble(intensity, duration).ContinueWith(t => rr_async_adapter.EndTask(t,new MessageElement("return",(int)0)));
    return null;
    }
    this.obj.rumble(intensity, duration);
    return new MessageElement("return",(int)0);
    }
    case "force_feedback":
    {
    com.robotraconteur.geometry.Vector2 force=MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.Vector2>(vectorptr_messageelement_util.FindElement(rr_m,"force"));
    double duration=(MessageElementUtil.UnpackScalar<double>(vectorptr_messageelement_util.FindElement(rr_m,"duration")));
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_force_feedback(force, duration).ContinueWith(t => rr_async_adapter.EndTask(t,new MessageElement("return",(int)0)));
    return null;
    }
    this.obj.force_feedback(force, duration);
    return new MessageElement("return",(int)0);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override object GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(Joystick)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(Joystick)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void InitPipeServers(object rrobj1) {
    obj=(Joystick)rrobj1;
    obj.joystick_sensor_data=new Pipe<JoystickStateSensorData>(innerskel.GetPipe("joystick_sensor_data"));
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(Joystick)rrobj1;
    }
    public override void InitWireServers(object rrobj1) {
    obj=(Joystick)rrobj1;
    obj.device_clock_now=new Wire<com.robotraconteur.device.clock.DeviceTime>(innerskel.GetWire("device_clock_now"));
    obj.joystick_state=new Wire<JoystickState>(innerskel.GetWire("joystick_state"));
    obj.gamepad_state=new Wire<GamepadState>(innerskel.GetWire("gamepad_state"));
    }
    public override WrappedArrayMemoryDirector GetArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedMultiDimArrayMemoryDirector GetMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodArrayMemoryDirector GetPodArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodMultiDimArrayMemoryDirector GetPodMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedArrayMemoryDirector GetNamedArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedMultiDimArrayMemoryDirector GetNamedMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override string RRType { get { return "com.robotraconteur.hid.joystick.Joystick"; } }
}
public class Joystick_default_impl : Joystick{
    protected PipeBroadcaster<JoystickStateSensorData> rrvar_joystick_sensor_data;
    protected WireBroadcaster<com.robotraconteur.device.clock.DeviceTime> rrvar_device_clock_now;
    protected WireBroadcaster<JoystickState> rrvar_joystick_state;
    protected WireBroadcaster<GamepadState> rrvar_gamepad_state;
    public virtual com.robotraconteur.device.DeviceInfo device_info {get; set;} = default(com.robotraconteur.device.DeviceInfo);
    public virtual JoystickInfo joystick_info {get; set;} = default(JoystickInfo);
    public virtual com.robotraconteur.device.isoch.IsochInfo isoch_info {get; set;} = default(com.robotraconteur.device.isoch.IsochInfo);
    public virtual uint isoch_downsample {get; set;} = default(uint);
    public virtual void rumble(double intensity, double duration) {
    throw new NotImplementedException();    }
    public virtual void force_feedback(com.robotraconteur.geometry.Vector2 force, double duration) {
    throw new NotImplementedException();    }
    public virtual Pipe<JoystickStateSensorData> joystick_sensor_data {
    get { return rrvar_joystick_sensor_data.Pipe;  }
    set {
    if (rrvar_joystick_sensor_data!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_joystick_sensor_data= new PipeBroadcaster<JoystickStateSensorData>(value);
    }
    }
    public virtual Wire<com.robotraconteur.device.clock.DeviceTime> device_clock_now {
    get { return rrvar_device_clock_now.Wire;  }
    set {
    if (rrvar_device_clock_now!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_device_clock_now= new WireBroadcaster<com.robotraconteur.device.clock.DeviceTime>(value);
    }
    }
    public virtual Wire<JoystickState> joystick_state {
    get { return rrvar_joystick_state.Wire;  }
    set {
    if (rrvar_joystick_state!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_joystick_state= new WireBroadcaster<JoystickState>(value);
    }
    }
    public virtual Wire<GamepadState> gamepad_state {
    get { return rrvar_gamepad_state.Wire;  }
    set {
    if (rrvar_gamepad_state!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_gamepad_state= new WireBroadcaster<GamepadState>(value);
    }
    }
}
public static class RRExtensions{
}
}
namespace com.robotraconteur.identifier
{
public class Identifier
{
    public string name;
    public com.robotraconteur.uuid.UUID uuid;
}

}
namespace com.robotraconteur.identifier
{
public class com__robotraconteur__identifierFactory : ServiceFactory
{
    public override string DefString()
{
    const string s="service com.robotraconteur.identifier\n\nstdver 0.10\n\nimport com.robotraconteur.uuid\n\nusing com.robotraconteur.uuid.UUID\n\nstruct Identifier\nfield string name\nfield UUID uuid\nend\n\n";
    return s;
    }
    public override string GetServiceName() {return "com.robotraconteur.identifier";}
    public Identifier_stub Identifier_stubentry;
    public com__robotraconteur__identifierFactory()
{
    Identifier_stubentry=new Identifier_stub(this);
    }
    public override IStructureStub FindStructureStub(string objecttype)
    {
    if (objecttype=="Identifier")    return Identifier_stubentry;
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public override IPodStub FindPodStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override INamedArrayStub FindNamedArrayStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override ServiceStub CreateStub(WrappedServiceStub innerstub) {
    string objecttype=innerstub.RR_objecttype.GetServiceDefinition().Name + "." + innerstub.RR_objecttype.Name;    string objshort;
    if (CompareNamespace(objecttype, out objshort)) {
    switch (objshort) {
    default:
    break;
    }
    } else {
    string ext_service_type=RobotRaconteurNode.SplitQualifiedName(objecttype).Item1;
    return RobotRaconteurNode.s.GetServiceType(ext_service_type).CreateStub(innerstub);
    }
    throw new ServiceException("Could not create stub");
    }
    public override ServiceSkel CreateSkel(object obj) {
    string objtype = RobotRaconteurNode.GetTypeString(ServiceSkelUtil.FindParentInterface(obj.GetType()));
    string objshort;
    if (CompareNamespace(objtype, out objshort)) {
    switch(objshort) {
    default:
    break;
    }
    } else {
    string ext_service_type=RobotRaconteurNode.SplitQualifiedName(objtype).Item1;
    return RobotRaconteurNode.s.GetServiceFactory(ext_service_type).CreateSkel(obj);
    }
    throw new ServiceException("Could not create skel");
    }
    public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp){
    if (rr_exp==null) return rr_exp;
    string rr_type=rr_exp.Error;
    if (!rr_type.Contains(".")) return rr_exp;
    string rr_stype;
    if (CompareNamespace(rr_type, out rr_stype)) {
    } else {
    return RobotRaconteurNode.s.DownCastException(rr_exp); 
    }
    return rr_exp;
    }
}

public class Identifier_stub : IStructureStub {
    public Identifier_stub(com__robotraconteur__identifierFactory d) {def=d;}
    private com__robotraconteur__identifierFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    Identifier s = (Identifier)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackString("name",s.name));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.uuid.UUID>("uuid",ref s.uuid));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.identifier.Identifier",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    Identifier s=new Identifier();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.name =MessageElementUtil.UnpackString(MessageElement.FindElement(mm,"name"));
    s.uuid =MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.uuid.UUID>(MessageElement.FindElement(mm,"uuid"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public static class RRExtensions{
}
}
namespace com.robotraconteur.image
{
public class ImageInfo
{
    public com.robotraconteur.sensordata.SensorDataHeader data_header;
    public uint height;
    public uint width;
    public uint step;
    public ImageEncoding encoding;
    public Dictionary<string,object> extended;
}

public class FreeformImageInfo
{
    public ImageInfo image_info;
    public string encoding;
    public Dictionary<string,object> extended;
}

public class Image
{
    public ImageInfo image_info;
    public byte[] data;
}

public class CompressedImage
{
    public ImageInfo image_info;
    public byte[] data;
}

public class FreeformImage
{
    public FreeformImageInfo image_info;
    public object data;
    public Dictionary<string,object> extended;
}

public class ImagePart
{
    public ImageInfo image_info;
    public uint data_offset;
    public uint data_total_len;
    public byte[] data_part;
}

public class CompressedImagePart
{
    public ImageInfo image_info;
    public uint data_offset;
    public uint data_total_len;
    public byte[] data_part;
}

public class FreeformImagePart
{
    public FreeformImageInfo image_info;
    public uint data_offset;
    public uint data_total_len;
    public object data_part;
    public Dictionary<string,object> extended;
}

public class ImageResource
{
    public com.robotraconteur.resource.ResourceIdentifier image_resource;
}

[NamedArrayElementTypeAndCount(typeof(byte), 3)]
public struct PixelRGB
{
    public byte r;
    public byte g;
    public byte b;
    public byte[] GetNumericArray()
    {
    var a=new ArraySegment<byte>(new byte[3]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<byte> rr_a)
    {
    if(rr_a.Count < 3) throw new ArgumentException("ArraySegment invalid length");
    rr_a.Array[rr_a.Offset + 0] = r;
    rr_a.Array[rr_a.Offset + 1] = g;
    rr_a.Array[rr_a.Offset + 2] = b;
    }
    public void AssignFromNumericArray(ref ArraySegment<byte> rr_a)
    {
    if(rr_a.Count < 3) throw new ArgumentException("ArraySegment invalid length");
    r = rr_a.Array[rr_a.Offset + 0];
    g = rr_a.Array[rr_a.Offset + 1];
    b = rr_a.Array[rr_a.Offset + 2];
    }
}

[NamedArrayElementTypeAndCount(typeof(byte), 4)]
public struct PixelRGBA
{
    public byte r;
    public byte g;
    public byte b;
    public byte a;
    public byte[] GetNumericArray()
    {
    var a=new ArraySegment<byte>(new byte[4]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<byte> rr_a)
    {
    if(rr_a.Count < 4) throw new ArgumentException("ArraySegment invalid length");
    rr_a.Array[rr_a.Offset + 0] = r;
    rr_a.Array[rr_a.Offset + 1] = g;
    rr_a.Array[rr_a.Offset + 2] = b;
    rr_a.Array[rr_a.Offset + 3] = a;
    }
    public void AssignFromNumericArray(ref ArraySegment<byte> rr_a)
    {
    if(rr_a.Count < 4) throw new ArgumentException("ArraySegment invalid length");
    r = rr_a.Array[rr_a.Offset + 0];
    g = rr_a.Array[rr_a.Offset + 1];
    b = rr_a.Array[rr_a.Offset + 2];
    a = rr_a.Array[rr_a.Offset + 3];
    }
}

[NamedArrayElementTypeAndCount(typeof(double), 1)]
public struct PixelRGBFloatPacked
{
    public double rgb;
    public double[] GetNumericArray()
    {
    var a=new ArraySegment<double>(new double[1]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<double> rr_a)
    {
    if(rr_a.Count < 1) throw new ArgumentException("ArraySegment invalid length");
    rr_a.Array[rr_a.Offset + 0] = rgb;
    }
    public void AssignFromNumericArray(ref ArraySegment<double> rr_a)
    {
    if(rr_a.Count < 1) throw new ArgumentException("ArraySegment invalid length");
    rgb = rr_a.Array[rr_a.Offset + 0];
    }
}

[NamedArrayElementTypeAndCount(typeof(float), 1)]
public struct PixelRGBFloatPackedf
{
    public float rgb;
    public float[] GetNumericArray()
    {
    var a=new ArraySegment<float>(new float[1]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<float> rr_a)
    {
    if(rr_a.Count < 1) throw new ArgumentException("ArraySegment invalid length");
    rr_a.Array[rr_a.Offset + 0] = rgb;
    }
    public void AssignFromNumericArray(ref ArraySegment<float> rr_a)
    {
    if(rr_a.Count < 1) throw new ArgumentException("ArraySegment invalid length");
    rgb = rr_a.Array[rr_a.Offset + 0];
    }
}

public static class com__robotraconteur__imageConstants 
{
}
    public enum ImageEncoding
    {
    unknown = 0,
    rgb888 = 0x1000,
    rgba8888 = 0x1001,
    bgr888 = 0x1002,
    bgra8888 = 0x1003,
    rgba16_16_16_16 = 0x1004,
    bgra16_16_16_16 = 0x1005,
    mono8 = 0x2000,
    mono16 = 0x2001,
    mono32 = 0x2002,
    mono_f16 = 0x2003,
    mono_f32 = 0x2004,
    mono_f64 = 0x2005,
    bayer_rggb8888 = 0x3000,
    bayer_bggr8888 = 0x3001,
    bayer_gbrg8888 = 0x3002,
    bayer_grbg8888 = 0x3003,
    depth_u16 = 0x4000,
    depth_i16 = 0x4001,
    depth_u32 = 0x4002,
    depth_i32 = 0x4003,
    depth_u64 = 0x4004,
    depth_i64 = 0x4005,
    depth_f32 = 0x4006,
    depth_f64 = 0x4007,
    freeform = 0x5000,
    compressed = 0x6000,
    other = 0x8000
    };
}
namespace com.robotraconteur.image
{
public class com__robotraconteur__imageFactory : ServiceFactory
{
    public override string DefString()
{
    const string s="service com.robotraconteur.image\n\nstdver 0.10\n\nimport com.robotraconteur.sensordata\nimport com.robotraconteur.identifier\nimport com.robotraconteur.resource\n\nusing com.robotraconteur.sensordata.SensorDataHeader\nusing com.robotraconteur.identifier.Identifier\nusing com.robotraconteur.resource.ResourceIdentifier\n\nenum ImageEncoding\nunknown = 0,\nrgb888 = 0x1000,\nrgba8888,\nbgr888,\nbgra8888,\nrgba16_16_16_16,\nbgra16_16_16_16,\nmono8 = 0x2000,\nmono16,\nmono32,\nmono_f16,\nmono_f32,\nmono_f64,\nbayer_rggb8888 = 0x3000,\nbayer_bggr8888,\nbayer_gbrg8888,\nbayer_grbg8888,\ndepth_u16 = 0x4000,\ndepth_i16,\ndepth_u32,\ndepth_i32,\ndepth_u64,\ndepth_i64,\ndepth_f32,\ndepth_f64,\nfreeform = 0x5000,\ncompressed = 0x6000,\nother = 0x8000\nend\n\nnamedarray PixelRGB\nfield uint8 r\nfield uint8 g\nfield uint8 b\nend\n\nnamedarray PixelRGBA\nfield uint8 r\nfield uint8 g\nfield uint8 b\nfield uint8 a\nend\n\n# Used with laser scan and point cloud\nnamedarray PixelRGBFloatPacked\nfield double rgb\nend\nnamedarray PixelRGBFloatPackedf\nfield single rgb\nend\n\nstruct ImageInfo\nfield SensorDataHeader data_header\nfield uint32 height\nfield uint32 width\nfield uint32 step\nfield ImageEncoding encoding\nfield varvalue{string} extended\nend\n\nstruct FreeformImageInfo\nfield ImageInfo image_info\nfield string encoding\nfield varvalue{string} extended\nend\n\nstruct Image\nfield ImageInfo image_info\n# Data is always little-endian\nfield uint8[] data\nend\n\nstruct CompressedImage\nfield ImageInfo image_info\n# Use magic to determine data type\nfield uint8[] data\nend\n\nstruct FreeformImage\nfield FreeformImageInfo image_info\nfield varvalue data\nfield varvalue{string} extended\nend\n\nstruct ImagePart\nfield ImageInfo image_info\n# Data is always little-endian\nfield uint32 data_offset\nfield uint32 data_total_len\nfield uint8[] data_part\nend\n\nstruct CompressedImagePart\nfield ImageInfo image_info\n# Data is always little-endian\nfield uint32 data_offset\nfield uint32 data_total_len\nfield uint8[] data_part\nend\n\nstruct FreeformImagePart\nfield FreeformImageInfo image_info\nfield uint32 data_offset\nfield uint32 data_total_len\nfield varvalue data_part\nfield varvalue{string} extended\nend\n\nstruct ImageResource\nfield ResourceIdentifier image_resource\nend\n\n";
    return s;
    }
    public override string GetServiceName() {return "com.robotraconteur.image";}
    public ImageInfo_stub ImageInfo_stubentry;
    public FreeformImageInfo_stub FreeformImageInfo_stubentry;
    public Image_stub Image_stubentry;
    public CompressedImage_stub CompressedImage_stubentry;
    public FreeformImage_stub FreeformImage_stubentry;
    public ImagePart_stub ImagePart_stubentry;
    public CompressedImagePart_stub CompressedImagePart_stubentry;
    public FreeformImagePart_stub FreeformImagePart_stubentry;
    public ImageResource_stub ImageResource_stubentry;
    public PixelRGB_stub PixelRGB_stubentry;
    public PixelRGBA_stub PixelRGBA_stubentry;
    public PixelRGBFloatPacked_stub PixelRGBFloatPacked_stubentry;
    public PixelRGBFloatPackedf_stub PixelRGBFloatPackedf_stubentry;
    public com__robotraconteur__imageFactory()
{
    ImageInfo_stubentry=new ImageInfo_stub(this);
    FreeformImageInfo_stubentry=new FreeformImageInfo_stub(this);
    Image_stubentry=new Image_stub(this);
    CompressedImage_stubentry=new CompressedImage_stub(this);
    FreeformImage_stubentry=new FreeformImage_stub(this);
    ImagePart_stubentry=new ImagePart_stub(this);
    CompressedImagePart_stubentry=new CompressedImagePart_stub(this);
    FreeformImagePart_stubentry=new FreeformImagePart_stub(this);
    ImageResource_stubentry=new ImageResource_stub(this);
    PixelRGB_stubentry=new PixelRGB_stub();
    PixelRGBA_stubentry=new PixelRGBA_stub();
    PixelRGBFloatPacked_stubentry=new PixelRGBFloatPacked_stub();
    PixelRGBFloatPackedf_stubentry=new PixelRGBFloatPackedf_stub();
    }
    public override IStructureStub FindStructureStub(string objecttype)
    {
    if (objecttype=="ImageInfo")    return ImageInfo_stubentry;
    if (objecttype=="FreeformImageInfo")    return FreeformImageInfo_stubentry;
    if (objecttype=="Image")    return Image_stubentry;
    if (objecttype=="CompressedImage")    return CompressedImage_stubentry;
    if (objecttype=="FreeformImage")    return FreeformImage_stubentry;
    if (objecttype=="ImagePart")    return ImagePart_stubentry;
    if (objecttype=="CompressedImagePart")    return CompressedImagePart_stubentry;
    if (objecttype=="FreeformImagePart")    return FreeformImagePart_stubentry;
    if (objecttype=="ImageResource")    return ImageResource_stubentry;
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public override IPodStub FindPodStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override INamedArrayStub FindNamedArrayStub(string objecttype)
    {
    if (objecttype=="PixelRGB")    return PixelRGB_stubentry;
    if (objecttype=="PixelRGBA")    return PixelRGBA_stubentry;
    if (objecttype=="PixelRGBFloatPacked")    return PixelRGBFloatPacked_stubentry;
    if (objecttype=="PixelRGBFloatPackedf")    return PixelRGBFloatPackedf_stubentry;
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override ServiceStub CreateStub(WrappedServiceStub innerstub) {
    string objecttype=innerstub.RR_objecttype.GetServiceDefinition().Name + "." + innerstub.RR_objecttype.Name;    string objshort;
    if (CompareNamespace(objecttype, out objshort)) {
    switch (objshort) {
    default:
    break;
    }
    } else {
    string ext_service_type=RobotRaconteurNode.SplitQualifiedName(objecttype).Item1;
    return RobotRaconteurNode.s.GetServiceType(ext_service_type).CreateStub(innerstub);
    }
    throw new ServiceException("Could not create stub");
    }
    public override ServiceSkel CreateSkel(object obj) {
    string objtype = RobotRaconteurNode.GetTypeString(ServiceSkelUtil.FindParentInterface(obj.GetType()));
    string objshort;
    if (CompareNamespace(objtype, out objshort)) {
    switch(objshort) {
    default:
    break;
    }
    } else {
    string ext_service_type=RobotRaconteurNode.SplitQualifiedName(objtype).Item1;
    return RobotRaconteurNode.s.GetServiceFactory(ext_service_type).CreateSkel(obj);
    }
    throw new ServiceException("Could not create skel");
    }
    public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp){
    if (rr_exp==null) return rr_exp;
    string rr_type=rr_exp.Error;
    if (!rr_type.Contains(".")) return rr_exp;
    string rr_stype;
    if (CompareNamespace(rr_type, out rr_stype)) {
    } else {
    return RobotRaconteurNode.s.DownCastException(rr_exp); 
    }
    return rr_exp;
    }
}

public class ImageInfo_stub : IStructureStub {
    public ImageInfo_stub(com__robotraconteur__imageFactory d) {def=d;}
    private com__robotraconteur__imageFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    ImageInfo s = (ImageInfo)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("data_header",s.data_header));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<uint>("height",s.height));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<uint>("width",s.width));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<uint>("step",s.step));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackEnum<ImageEncoding>("encoding",s.encoding));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackMapType<string,object>("extended",s.extended));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.image.ImageInfo",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    ImageInfo s=new ImageInfo();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.data_header =MessageElementUtil.UnpackStructure<com.robotraconteur.sensordata.SensorDataHeader>(MessageElement.FindElement(mm,"data_header"));
    s.height =(MessageElementUtil.UnpackScalar<uint>(MessageElement.FindElement(mm,"height")));
    s.width =(MessageElementUtil.UnpackScalar<uint>(MessageElement.FindElement(mm,"width")));
    s.step =(MessageElementUtil.UnpackScalar<uint>(MessageElement.FindElement(mm,"step")));
    s.encoding =MessageElementUtil.UnpackEnum<ImageEncoding>(MessageElement.FindElement(mm,"encoding"));
    s.extended =MessageElementUtil.UnpackMap<string,object>(MessageElement.FindElement(mm,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class FreeformImageInfo_stub : IStructureStub {
    public FreeformImageInfo_stub(com__robotraconteur__imageFactory d) {def=d;}
    private com__robotraconteur__imageFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    FreeformImageInfo s = (FreeformImageInfo)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("image_info",s.image_info));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackString("encoding",s.encoding));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackMapType<string,object>("extended",s.extended));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.image.FreeformImageInfo",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    FreeformImageInfo s=new FreeformImageInfo();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.image_info =MessageElementUtil.UnpackStructure<ImageInfo>(MessageElement.FindElement(mm,"image_info"));
    s.encoding =MessageElementUtil.UnpackString(MessageElement.FindElement(mm,"encoding"));
    s.extended =MessageElementUtil.UnpackMap<string,object>(MessageElement.FindElement(mm,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class Image_stub : IStructureStub {
    public Image_stub(com__robotraconteur__imageFactory d) {def=d;}
    private com__robotraconteur__imageFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    Image s = (Image)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("image_info",s.image_info));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackArray<byte>("data",s.data));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.image.Image",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    Image s=new Image();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.image_info =MessageElementUtil.UnpackStructure<ImageInfo>(MessageElement.FindElement(mm,"image_info"));
    s.data =MessageElementUtil.UnpackArray<byte>(MessageElement.FindElement(mm,"data"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class CompressedImage_stub : IStructureStub {
    public CompressedImage_stub(com__robotraconteur__imageFactory d) {def=d;}
    private com__robotraconteur__imageFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    CompressedImage s = (CompressedImage)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("image_info",s.image_info));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackArray<byte>("data",s.data));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.image.CompressedImage",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    CompressedImage s=new CompressedImage();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.image_info =MessageElementUtil.UnpackStructure<ImageInfo>(MessageElement.FindElement(mm,"image_info"));
    s.data =MessageElementUtil.UnpackArray<byte>(MessageElement.FindElement(mm,"data"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class FreeformImage_stub : IStructureStub {
    public FreeformImage_stub(com__robotraconteur__imageFactory d) {def=d;}
    private com__robotraconteur__imageFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    FreeformImage s = (FreeformImage)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("image_info",s.image_info));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackVarType("data",s.data));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackMapType<string,object>("extended",s.extended));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.image.FreeformImage",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    FreeformImage s=new FreeformImage();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.image_info =MessageElementUtil.UnpackStructure<FreeformImageInfo>(MessageElement.FindElement(mm,"image_info"));
    s.data =MessageElementUtil.UnpackVarType(MessageElement.FindElement(mm,"data"));
    s.extended =MessageElementUtil.UnpackMap<string,object>(MessageElement.FindElement(mm,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class ImagePart_stub : IStructureStub {
    public ImagePart_stub(com__robotraconteur__imageFactory d) {def=d;}
    private com__robotraconteur__imageFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    ImagePart s = (ImagePart)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("image_info",s.image_info));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<uint>("data_offset",s.data_offset));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<uint>("data_total_len",s.data_total_len));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackArray<byte>("data_part",s.data_part));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.image.ImagePart",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    ImagePart s=new ImagePart();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.image_info =MessageElementUtil.UnpackStructure<ImageInfo>(MessageElement.FindElement(mm,"image_info"));
    s.data_offset =(MessageElementUtil.UnpackScalar<uint>(MessageElement.FindElement(mm,"data_offset")));
    s.data_total_len =(MessageElementUtil.UnpackScalar<uint>(MessageElement.FindElement(mm,"data_total_len")));
    s.data_part =MessageElementUtil.UnpackArray<byte>(MessageElement.FindElement(mm,"data_part"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class CompressedImagePart_stub : IStructureStub {
    public CompressedImagePart_stub(com__robotraconteur__imageFactory d) {def=d;}
    private com__robotraconteur__imageFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    CompressedImagePart s = (CompressedImagePart)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("image_info",s.image_info));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<uint>("data_offset",s.data_offset));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<uint>("data_total_len",s.data_total_len));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackArray<byte>("data_part",s.data_part));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.image.CompressedImagePart",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    CompressedImagePart s=new CompressedImagePart();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.image_info =MessageElementUtil.UnpackStructure<ImageInfo>(MessageElement.FindElement(mm,"image_info"));
    s.data_offset =(MessageElementUtil.UnpackScalar<uint>(MessageElement.FindElement(mm,"data_offset")));
    s.data_total_len =(MessageElementUtil.UnpackScalar<uint>(MessageElement.FindElement(mm,"data_total_len")));
    s.data_part =MessageElementUtil.UnpackArray<byte>(MessageElement.FindElement(mm,"data_part"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class FreeformImagePart_stub : IStructureStub {
    public FreeformImagePart_stub(com__robotraconteur__imageFactory d) {def=d;}
    private com__robotraconteur__imageFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    FreeformImagePart s = (FreeformImagePart)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("image_info",s.image_info));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<uint>("data_offset",s.data_offset));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<uint>("data_total_len",s.data_total_len));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackVarType("data_part",s.data_part));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackMapType<string,object>("extended",s.extended));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.image.FreeformImagePart",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    FreeformImagePart s=new FreeformImagePart();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.image_info =MessageElementUtil.UnpackStructure<FreeformImageInfo>(MessageElement.FindElement(mm,"image_info"));
    s.data_offset =(MessageElementUtil.UnpackScalar<uint>(MessageElement.FindElement(mm,"data_offset")));
    s.data_total_len =(MessageElementUtil.UnpackScalar<uint>(MessageElement.FindElement(mm,"data_total_len")));
    s.data_part =MessageElementUtil.UnpackVarType(MessageElement.FindElement(mm,"data_part"));
    s.extended =MessageElementUtil.UnpackMap<string,object>(MessageElement.FindElement(mm,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class ImageResource_stub : IStructureStub {
    public ImageResource_stub(com__robotraconteur__imageFactory d) {def=d;}
    private com__robotraconteur__imageFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    ImageResource s = (ImageResource)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("image_resource",s.image_resource));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.image.ImageResource",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    ImageResource s=new ImageResource();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.image_resource =MessageElementUtil.UnpackStructure<com.robotraconteur.resource.ResourceIdentifier>(MessageElement.FindElement(mm,"image_resource"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class PixelRGB_stub : NamedArrayStub<PixelRGB,byte> {
    public override byte[] GetNumericArrayFromNamedArrayStruct(ref PixelRGB s) {
    return s.GetNumericArray();
    }
    public override PixelRGB GetNamedArrayStructFromNumericArray(byte[] m) {
    if (m.Length != 3) throw new DataTypeException("Invalid namedarray array");
    var s = new PixelRGB();
    var a = new ArraySegment<byte>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override byte[] GetNumericArrayFromNamedArray(PixelRGB[] s) {
    return s.GetNumericArray();
    }
    public override PixelRGB[] GetNamedArrayFromNumericArray(byte[] m) {
    if (m.Length % 3 != 0) throw new DataTypeException("Invalid namedarray array");
    PixelRGB[] s = new PixelRGB[m.Length / 3];
    var a = new ArraySegment<byte>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.image.PixelRGB"; } }}

public class PixelRGBA_stub : NamedArrayStub<PixelRGBA,byte> {
    public override byte[] GetNumericArrayFromNamedArrayStruct(ref PixelRGBA s) {
    return s.GetNumericArray();
    }
    public override PixelRGBA GetNamedArrayStructFromNumericArray(byte[] m) {
    if (m.Length != 4) throw new DataTypeException("Invalid namedarray array");
    var s = new PixelRGBA();
    var a = new ArraySegment<byte>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override byte[] GetNumericArrayFromNamedArray(PixelRGBA[] s) {
    return s.GetNumericArray();
    }
    public override PixelRGBA[] GetNamedArrayFromNumericArray(byte[] m) {
    if (m.Length % 4 != 0) throw new DataTypeException("Invalid namedarray array");
    PixelRGBA[] s = new PixelRGBA[m.Length / 4];
    var a = new ArraySegment<byte>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.image.PixelRGBA"; } }}

public class PixelRGBFloatPacked_stub : NamedArrayStub<PixelRGBFloatPacked,double> {
    public override double[] GetNumericArrayFromNamedArrayStruct(ref PixelRGBFloatPacked s) {
    return s.GetNumericArray();
    }
    public override PixelRGBFloatPacked GetNamedArrayStructFromNumericArray(double[] m) {
    if (m.Length != 1) throw new DataTypeException("Invalid namedarray array");
    var s = new PixelRGBFloatPacked();
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override double[] GetNumericArrayFromNamedArray(PixelRGBFloatPacked[] s) {
    return s.GetNumericArray();
    }
    public override PixelRGBFloatPacked[] GetNamedArrayFromNumericArray(double[] m) {
    if (m.Length % 1 != 0) throw new DataTypeException("Invalid namedarray array");
    PixelRGBFloatPacked[] s = new PixelRGBFloatPacked[m.Length / 1];
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.image.PixelRGBFloatPacked"; } }}

public class PixelRGBFloatPackedf_stub : NamedArrayStub<PixelRGBFloatPackedf,float> {
    public override float[] GetNumericArrayFromNamedArrayStruct(ref PixelRGBFloatPackedf s) {
    return s.GetNumericArray();
    }
    public override PixelRGBFloatPackedf GetNamedArrayStructFromNumericArray(float[] m) {
    if (m.Length != 1) throw new DataTypeException("Invalid namedarray array");
    var s = new PixelRGBFloatPackedf();
    var a = new ArraySegment<float>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override float[] GetNumericArrayFromNamedArray(PixelRGBFloatPackedf[] s) {
    return s.GetNumericArray();
    }
    public override PixelRGBFloatPackedf[] GetNamedArrayFromNumericArray(float[] m) {
    if (m.Length % 1 != 0) throw new DataTypeException("Invalid namedarray array");
    PixelRGBFloatPackedf[] s = new PixelRGBFloatPackedf[m.Length / 1];
    var a = new ArraySegment<float>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.image.PixelRGBFloatPackedf"; } }}

public static class RRExtensions{
    public static byte[] GetNumericArray(this PixelRGB[] s)
    {
    var a=new ArraySegment<byte>(new byte[3 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this PixelRGB[] s, ref ArraySegment<byte> a)
    {
    if(a.Count < 3 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<byte>(a.Array, a.Offset + 3*i,3);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this PixelRGB[] s, ref ArraySegment<byte> a)
    {
    if(a.Count < 3 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<byte>(a.Array, a.Offset + 3*i,3);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static byte[] GetNumericArray(this PixelRGBA[] s)
    {
    var a=new ArraySegment<byte>(new byte[4 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this PixelRGBA[] s, ref ArraySegment<byte> a)
    {
    if(a.Count < 4 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<byte>(a.Array, a.Offset + 4*i,4);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this PixelRGBA[] s, ref ArraySegment<byte> a)
    {
    if(a.Count < 4 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<byte>(a.Array, a.Offset + 4*i,4);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static double[] GetNumericArray(this PixelRGBFloatPacked[] s)
    {
    var a=new ArraySegment<double>(new double[1 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this PixelRGBFloatPacked[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 1 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 1*i,1);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this PixelRGBFloatPacked[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 1 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 1*i,1);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static float[] GetNumericArray(this PixelRGBFloatPackedf[] s)
    {
    var a=new ArraySegment<float>(new float[1 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this PixelRGBFloatPackedf[] s, ref ArraySegment<float> a)
    {
    if(a.Count < 1 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<float>(a.Array, a.Offset + 1*i,1);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this PixelRGBFloatPackedf[] s, ref ArraySegment<float> a)
    {
    if(a.Count < 1 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<float>(a.Array, a.Offset + 1*i,1);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
}
}
namespace com.robotraconteur.imaging.camerainfo
{
public class PlumbBobDistortionInfo
{
    public double k1;
    public double k2;
    public double p1;
    public double p2;
    public double k3;
}

public class CameraCalibration
{
    public com.robotraconteur.geometryi.Size2D image_size;
    public object distortion_info;
    public MultiDimArray K;
    public com.robotraconteur.identifier.Identifier parent_device;
    public com.robotraconteur.geometry.NamedPose camera_pose;
    public Dictionary<string,object> extended;
}

public class CameraInfo
{
    public com.robotraconteur.device.DeviceInfo device_info;
    public CameraCalibration calibration;
    public Dictionary<string,object> extended;
}

public class MultiCameraInfo
{
    public com.robotraconteur.device.DeviceInfo device_info;
    public Dictionary<int,CameraInfo> camera_info_all;
    public Dictionary<string,object> extended;
}

}
namespace com.robotraconteur.imaging.camerainfo
{
public class com__robotraconteur__imaging__camerainfoFactory : ServiceFactory
{
    public override string DefString()
{
    const string s="service com.robotraconteur.imaging.camerainfo\n\nstdver 0.10\n\nimport com.robotraconteur.identifier\nimport com.robotraconteur.geometry\nimport com.robotraconteur.geometryi\nimport com.robotraconteur.device\n\nusing com.robotraconteur.identifier.Identifier\nusing com.robotraconteur.geometry.NamedPose\nusing com.robotraconteur.geometryi.Size2D\nusing com.robotraconteur.device.DeviceInfo\n\nstruct PlumbBobDistortionInfo\nfield double k1\nfield double k2\nfield double p1\nfield double p2\nfield double k3\nend\n\nstruct CameraCalibration\nfield Size2D image_size\nfield varvalue distortion_info\nfield double[3,3] K\nfield Identifier parent_device\nfield NamedPose camera_pose\nfield varvalue{string} extended\nend\n\nstruct CameraInfo\nfield DeviceInfo device_info\nfield CameraCalibration calibration\nfield varvalue{string} extended\nend\n\nstruct MultiCameraInfo\nfield DeviceInfo device_info\nfield CameraInfo{int32} camera_info_all\nfield varvalue{string} extended\nend\n\n";
    return s;
    }
    public override string GetServiceName() {return "com.robotraconteur.imaging.camerainfo";}
    public PlumbBobDistortionInfo_stub PlumbBobDistortionInfo_stubentry;
    public CameraCalibration_stub CameraCalibration_stubentry;
    public CameraInfo_stub CameraInfo_stubentry;
    public MultiCameraInfo_stub MultiCameraInfo_stubentry;
    public com__robotraconteur__imaging__camerainfoFactory()
{
    PlumbBobDistortionInfo_stubentry=new PlumbBobDistortionInfo_stub(this);
    CameraCalibration_stubentry=new CameraCalibration_stub(this);
    CameraInfo_stubentry=new CameraInfo_stub(this);
    MultiCameraInfo_stubentry=new MultiCameraInfo_stub(this);
    }
    public override IStructureStub FindStructureStub(string objecttype)
    {
    if (objecttype=="PlumbBobDistortionInfo")    return PlumbBobDistortionInfo_stubentry;
    if (objecttype=="CameraCalibration")    return CameraCalibration_stubentry;
    if (objecttype=="CameraInfo")    return CameraInfo_stubentry;
    if (objecttype=="MultiCameraInfo")    return MultiCameraInfo_stubentry;
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public override IPodStub FindPodStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override INamedArrayStub FindNamedArrayStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override ServiceStub CreateStub(WrappedServiceStub innerstub) {
    string objecttype=innerstub.RR_objecttype.GetServiceDefinition().Name + "." + innerstub.RR_objecttype.Name;    string objshort;
    if (CompareNamespace(objecttype, out objshort)) {
    switch (objshort) {
    default:
    break;
    }
    } else {
    string ext_service_type=RobotRaconteurNode.SplitQualifiedName(objecttype).Item1;
    return RobotRaconteurNode.s.GetServiceType(ext_service_type).CreateStub(innerstub);
    }
    throw new ServiceException("Could not create stub");
    }
    public override ServiceSkel CreateSkel(object obj) {
    string objtype = RobotRaconteurNode.GetTypeString(ServiceSkelUtil.FindParentInterface(obj.GetType()));
    string objshort;
    if (CompareNamespace(objtype, out objshort)) {
    switch(objshort) {
    default:
    break;
    }
    } else {
    string ext_service_type=RobotRaconteurNode.SplitQualifiedName(objtype).Item1;
    return RobotRaconteurNode.s.GetServiceFactory(ext_service_type).CreateSkel(obj);
    }
    throw new ServiceException("Could not create skel");
    }
    public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp){
    if (rr_exp==null) return rr_exp;
    string rr_type=rr_exp.Error;
    if (!rr_type.Contains(".")) return rr_exp;
    string rr_stype;
    if (CompareNamespace(rr_type, out rr_stype)) {
    } else {
    return RobotRaconteurNode.s.DownCastException(rr_exp); 
    }
    return rr_exp;
    }
}

public class PlumbBobDistortionInfo_stub : IStructureStub {
    public PlumbBobDistortionInfo_stub(com__robotraconteur__imaging__camerainfoFactory d) {def=d;}
    private com__robotraconteur__imaging__camerainfoFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    PlumbBobDistortionInfo s = (PlumbBobDistortionInfo)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<double>("k1",s.k1));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<double>("k2",s.k2));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<double>("p1",s.p1));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<double>("p2",s.p2));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<double>("k3",s.k3));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.imaging.camerainfo.PlumbBobDistortionInfo",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    PlumbBobDistortionInfo s=new PlumbBobDistortionInfo();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.k1 =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(mm,"k1")));
    s.k2 =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(mm,"k2")));
    s.p1 =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(mm,"p1")));
    s.p2 =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(mm,"p2")));
    s.k3 =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(mm,"k3")));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class CameraCalibration_stub : IStructureStub {
    public CameraCalibration_stub(com__robotraconteur__imaging__camerainfoFactory d) {def=d;}
    private com__robotraconteur__imaging__camerainfoFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    CameraCalibration s = (CameraCalibration)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometryi.Size2D>("image_size",ref s.image_size));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackVarType("distortion_info",s.distortion_info));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackMultiDimArray("K",(MultiDimArray)DataTypeUtil.VerifyArrayLength(s.K,9,new uint[] {3,3})));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("parent_device",s.parent_device));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("camera_pose",s.camera_pose));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackMapType<string,object>("extended",s.extended));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.imaging.camerainfo.CameraCalibration",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    CameraCalibration s=new CameraCalibration();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.image_size =MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometryi.Size2D>(MessageElement.FindElement(mm,"image_size"));
    s.distortion_info =MessageElementUtil.UnpackVarType(MessageElement.FindElement(mm,"distortion_info"));
    s.K =DataTypeUtil.VerifyArrayLength(MessageElementUtil.UnpackMultiDimArray(MessageElement.FindElement(mm,"K")),9,new uint[] {3,3});
    s.parent_device =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(MessageElement.FindElement(mm,"parent_device"));
    s.camera_pose =MessageElementUtil.UnpackStructure<com.robotraconteur.geometry.NamedPose>(MessageElement.FindElement(mm,"camera_pose"));
    s.extended =MessageElementUtil.UnpackMap<string,object>(MessageElement.FindElement(mm,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class CameraInfo_stub : IStructureStub {
    public CameraInfo_stub(com__robotraconteur__imaging__camerainfoFactory d) {def=d;}
    private com__robotraconteur__imaging__camerainfoFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    CameraInfo s = (CameraInfo)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("device_info",s.device_info));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("calibration",s.calibration));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackMapType<string,object>("extended",s.extended));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.imaging.camerainfo.CameraInfo",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    CameraInfo s=new CameraInfo();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.device_info =MessageElementUtil.UnpackStructure<com.robotraconteur.device.DeviceInfo>(MessageElement.FindElement(mm,"device_info"));
    s.calibration =MessageElementUtil.UnpackStructure<CameraCalibration>(MessageElement.FindElement(mm,"calibration"));
    s.extended =MessageElementUtil.UnpackMap<string,object>(MessageElement.FindElement(mm,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class MultiCameraInfo_stub : IStructureStub {
    public MultiCameraInfo_stub(com__robotraconteur__imaging__camerainfoFactory d) {def=d;}
    private com__robotraconteur__imaging__camerainfoFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    MultiCameraInfo s = (MultiCameraInfo)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("device_info",s.device_info));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackMapType<int,CameraInfo>("camera_info_all",s.camera_info_all));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackMapType<string,object>("extended",s.extended));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.imaging.camerainfo.MultiCameraInfo",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    MultiCameraInfo s=new MultiCameraInfo();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.device_info =MessageElementUtil.UnpackStructure<com.robotraconteur.device.DeviceInfo>(MessageElement.FindElement(mm,"device_info"));
    s.camera_info_all =MessageElementUtil.UnpackMap<int,CameraInfo>(MessageElement.FindElement(mm,"camera_info_all"));
    s.extended =MessageElementUtil.UnpackMap<string,object>(MessageElement.FindElement(mm,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public static class RRExtensions{
}
}
namespace com.robotraconteur.imaging
{
public class CameraState
{
    public com.robotraconteur.datetime.TimeSpec3 ts;
    public ulong seqno;
    public int state_flags;
    public Dictionary<string,object> extended;
}

[RobotRaconteurServiceObjectInterface()]
public interface Camera : com.robotraconteur.device.Device, com.robotraconteur.device.clock.DeviceClock, com.robotraconteur.device.isoch.IsochDevice
{
    com.robotraconteur.device.DeviceInfo device_info { get; 	}
    com.robotraconteur.imaging.camerainfo.CameraInfo camera_info { get; 	}
    uint capabilities { get; 	}
    TriggerMode trigger_mode { get;  set; 	}
    List<com.robotraconteur.param.ParameterInfo> param_info { get; 	}
    com.robotraconteur.device.isoch.IsochInfo isoch_info { get; 	}
    uint isoch_downsample { get;  set; 	}
    com.robotraconteur.image.Image capture_frame();
    com.robotraconteur.image.CompressedImage capture_frame_compressed();
    void trigger();
    void start_streaming();
    void stop_streaming();
    object getf_param(string param_name);
    void setf_param(string param_name, object value_);
    Pipe<com.robotraconteur.image.Image> frame_stream{ get; set; }
    Pipe<com.robotraconteur.image.CompressedImage> frame_stream_compressed{ get; set; }
    Pipe<com.robotraconteur.image.CompressedImage> preview_stream{ get; set; }
    Wire<CameraState> camera_state{ get; set; }
    Wire<com.robotraconteur.device.clock.DeviceTime> device_clock_now{ get; set; }
}

[RobotRaconteurServiceObjectInterface()]
public interface MultiCamera : com.robotraconteur.device.Device
{
    com.robotraconteur.device.DeviceInfo device_info { get; 	}
    com.robotraconteur.imaging.camerainfo.MultiCameraInfo multicamera_info { get; 	}
    Dictionary<int,string> camera_names { get; 	}
    List<com.robotraconteur.param.ParameterInfo> param_info { get; 	}
    Dictionary<int,com.robotraconteur.image.Image> capture_frame_all();
    void trigger_all();
    object getf_param(string param_name);
    void setf_param(string param_name, object value_);
    Camera get_cameras(int ind);
    Pipe<Dictionary<int,com.robotraconteur.image.Image>> frame_stream_all{ get; set; }
    Pipe<Dictionary<int,com.robotraconteur.image.CompressedImage>> frame_stream_compressed_all{ get; set; }
    Pipe<Dictionary<int,com.robotraconteur.image.CompressedImage>> preview_stream_all{ get; set; }
}

[RobotRaconteurServiceObjectInterface()]
public interface ImagePartCamera : com.robotraconteur.device.Device, com.robotraconteur.device.clock.DeviceClock, com.robotraconteur.device.isoch.IsochDevice
{
    com.robotraconteur.device.DeviceInfo device_info { get; 	}
    com.robotraconteur.imaging.camerainfo.CameraInfo camera_info { get; 	}
    uint capabilities { get; 	}
    TriggerMode trigger_mode { get;  set; 	}
    List<com.robotraconteur.param.ParameterInfo> param_info { get; 	}
    com.robotraconteur.device.isoch.IsochInfo isoch_info { get; 	}
    uint isoch_downsample { get;  set; 	}
    Generator2<com.robotraconteur.image.ImagePart> capture_frame();
    void trigger();
    void start_streaming();
    void stop_streaming();
    object getf_param(string param_name);
    void setf_param(string param_name, object value_);
    Pipe<com.robotraconteur.image.CompressedImage> preview_stream{ get; set; }
    Wire<CameraState> camera_state{ get; set; }
    Wire<com.robotraconteur.device.clock.DeviceTime> device_clock_now{ get; set; }
}

public static class com__robotraconteur__imagingConstants 
{
}
    public enum TriggerMode
    {
    unknown = 0,
    software = 1,
    continuous = 2,
    external = 3,
    aux1 = 4,
    aux2 = 5,
    aux3 = 6,
    aux4 = 7
    };
    public enum Capabilities
    {
    unknown = 0,
    still = 0x1,
    stream = 0x2,
    preview = 0x4,
    software_trigger = 0x10,
    continuous_trigger = 0x20,
    external_trigger = 0x40,
    aux_trigger = 0x80
    };
    public enum CameraStateFlags
    {
    unknown = 0,
    ready = 0x1,
    streaming = 0x2,
    warning = 0x4,
    error = 0x8,
    fatal_error = 0x10
    };
}
namespace com.robotraconteur.imaging
{
public class com__robotraconteur__imagingFactory : ServiceFactory
{
    public override string DefString()
{
    const string s="service com.robotraconteur.imaging\n\nstdver 0.10\n\nimport com.robotraconteur.image\nimport com.robotraconteur.imaging.camerainfo\nimport com.robotraconteur.param\nimport com.robotraconteur.device\nimport com.robotraconteur.device.isoch\nimport com.robotraconteur.device.clock\nimport com.robotraconteur.datetime\n\nusing com.robotraconteur.image.Image\nusing com.robotraconteur.image.ImagePart\nusing com.robotraconteur.image.CompressedImage\nusing com.robotraconteur.imaging.camerainfo.CameraInfo\nusing com.robotraconteur.imaging.camerainfo.MultiCameraInfo\nusing com.robotraconteur.param.ParameterInfo\nusing com.robotraconteur.device.Device\nusing com.robotraconteur.device.DeviceInfo\nusing com.robotraconteur.device.isoch.IsochDevice\nusing com.robotraconteur.device.isoch.IsochInfo\nusing com.robotraconteur.device.clock.DeviceClock\nusing com.robotraconteur.device.clock.DeviceTime\nusing com.robotraconteur.datetime.TimeSpec3\n\nenum TriggerMode\nunknown = 0,\nsoftware,\ncontinuous,\nexternal,\naux1,\naux2,\naux3,\naux4\nend\n\nenum Capabilities\nunknown = 0,\nstill = 0x1,\nstream = 0x2,\npreview = 0x4,\nsoftware_trigger = 0x10,\ncontinuous_trigger = 0x20,\nexternal_trigger = 0x40,\naux_trigger = 0x80\nend\n\nenum CameraStateFlags\nunknown = 0,\nready = 0x1,\nstreaming = 0x2,\nwarning = 0x4,\nerror = 0x8,\nfatal_error = 0x10\nend\n\nstruct CameraState\nfield TimeSpec3 ts\nfield uint64 seqno\nfield int32 state_flags\nfield varvalue{string} extended\nend\n\nobject Camera\nimplements Device\nimplements DeviceClock\nimplements IsochDevice\nproperty DeviceInfo device_info [readonly,nolock]\nproperty CameraInfo camera_info [readonly,nolock]\nproperty uint32 capabilities [readonly]\nfunction Image capture_frame()\nfunction CompressedImage capture_frame_compressed()\nproperty TriggerMode trigger_mode [nolockread]\nfunction void trigger()\nfunction void start_streaming()\nfunction void stop_streaming()\nwire CameraState camera_state [readonly,nolock]\npipe Image frame_stream [readonly]\npipe CompressedImage frame_stream_compressed [readonly]\npipe CompressedImage preview_stream [readonly,nolock]\nproperty ParameterInfo{list} param_info [readonly]\nfunction varvalue getf_param(string param_name)\nfunction void setf_param(string param_name, varvalue value)\nproperty IsochInfo isoch_info [readonly,nolock]\nproperty uint32 isoch_downsample [perclient]\nwire DeviceTime device_clock_now [readonly,nolock]\nend\n\nobject MultiCamera\nimplements Device\nproperty DeviceInfo device_info [readonly,nolock]\nproperty MultiCameraInfo multicamera_info [readonly,nolock]\nproperty string{int32} camera_names [readonly,nolock]\nobjref Camera{int32} cameras\nfunction Image{int32} capture_frame_all()\nfunction void trigger_all()\npipe Image{int32} frame_stream_all [readonly]\npipe CompressedImage{int32} frame_stream_compressed_all [readonly]\npipe CompressedImage{int32} preview_stream_all [readonly,nolock]\nproperty ParameterInfo{list} param_info [readonly]\nfunction varvalue getf_param(string param_name)\nfunction void setf_param(string param_name, varvalue value)\nend\n\nobject ImagePartCamera\nimplements Device\nimplements DeviceClock\nimplements IsochDevice\nproperty DeviceInfo device_info [readonly,nolock]\nproperty CameraInfo camera_info [readonly,nolock]\nproperty uint32 capabilities [readonly]\nfunction ImagePart{generator} capture_frame()\nproperty TriggerMode trigger_mode [nolockread]\nfunction void trigger()\nfunction void start_streaming()\nfunction void stop_streaming()\nwire CameraState camera_state [readonly,nolock]\npipe CompressedImage preview_stream [readonly,nolock]\nproperty ParameterInfo{list} param_info [readonly]\nfunction varvalue getf_param(string param_name)\nfunction void setf_param(string param_name, varvalue value)\nproperty IsochInfo isoch_info [readonly,nolock]\nproperty uint32 isoch_downsample [perclient]\nwire DeviceTime device_clock_now [readonly,nolock]\nend\n\n";
    return s;
    }
    public override string GetServiceName() {return "com.robotraconteur.imaging";}
    public CameraState_stub CameraState_stubentry;
    public com__robotraconteur__imagingFactory()
{
    CameraState_stubentry=new CameraState_stub(this);
    }
    public override IStructureStub FindStructureStub(string objecttype)
    {
    if (objecttype=="CameraState")    return CameraState_stubentry;
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public override IPodStub FindPodStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override INamedArrayStub FindNamedArrayStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override ServiceStub CreateStub(WrappedServiceStub innerstub) {
    string objecttype=innerstub.RR_objecttype.GetServiceDefinition().Name + "." + innerstub.RR_objecttype.Name;    string objshort;
    if (CompareNamespace(objecttype, out objshort)) {
    switch (objshort) {
    case "Camera":
    return new Camera_stub(innerstub);
    case "MultiCamera":
    return new MultiCamera_stub(innerstub);
    case "ImagePartCamera":
    return new ImagePartCamera_stub(innerstub);
    default:
    break;
    }
    } else {
    string ext_service_type=RobotRaconteurNode.SplitQualifiedName(objecttype).Item1;
    return RobotRaconteurNode.s.GetServiceType(ext_service_type).CreateStub(innerstub);
    }
    throw new ServiceException("Could not create stub");
    }
    public override ServiceSkel CreateSkel(object obj) {
    string objtype = RobotRaconteurNode.GetTypeString(ServiceSkelUtil.FindParentInterface(obj.GetType()));
    string objshort;
    if (CompareNamespace(objtype, out objshort)) {
    switch(objshort) {
    case "Camera":
    return new Camera_skel((Camera)obj);
    case "MultiCamera":
    return new MultiCamera_skel((MultiCamera)obj);
    case "ImagePartCamera":
    return new ImagePartCamera_skel((ImagePartCamera)obj);
    default:
    break;
    }
    } else {
    string ext_service_type=RobotRaconteurNode.SplitQualifiedName(objtype).Item1;
    return RobotRaconteurNode.s.GetServiceFactory(ext_service_type).CreateSkel(obj);
    }
    throw new ServiceException("Could not create skel");
    }
    public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp){
    if (rr_exp==null) return rr_exp;
    string rr_type=rr_exp.Error;
    if (!rr_type.Contains(".")) return rr_exp;
    string rr_stype;
    if (CompareNamespace(rr_type, out rr_stype)) {
    } else {
    return RobotRaconteurNode.s.DownCastException(rr_exp); 
    }
    return rr_exp;
    }
}

public class CameraState_stub : IStructureStub {
    public CameraState_stub(com__robotraconteur__imagingFactory d) {def=d;}
    private com__robotraconteur__imagingFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    CameraState s = (CameraState)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.datetime.TimeSpec3>("ts",ref s.ts));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<ulong>("seqno",s.seqno));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<int>("state_flags",s.state_flags));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackMapType<string,object>("extended",s.extended));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.imaging.CameraState",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    CameraState s=new CameraState();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.ts =MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.datetime.TimeSpec3>(MessageElement.FindElement(mm,"ts"));
    s.seqno =(MessageElementUtil.UnpackScalar<ulong>(MessageElement.FindElement(mm,"seqno")));
    s.state_flags =(MessageElementUtil.UnpackScalar<int>(MessageElement.FindElement(mm,"state_flags")));
    s.extended =MessageElementUtil.UnpackMap<string,object>(MessageElement.FindElement(mm,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public interface async_Camera : com.robotraconteur.device.async_Device, com.robotraconteur.device.clock.async_DeviceClock, com.robotraconteur.device.isoch.async_IsochDevice
{
    Task<com.robotraconteur.device.DeviceInfo> async_get_device_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<com.robotraconteur.imaging.camerainfo.CameraInfo> async_get_camera_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<uint> async_get_capabilities(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<TriggerMode> async_get_trigger_mode(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_trigger_mode(TriggerMode value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<List<com.robotraconteur.param.ParameterInfo>> async_get_param_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<com.robotraconteur.device.isoch.IsochInfo> async_get_isoch_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<uint> async_get_isoch_downsample(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_isoch_downsample(uint value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<com.robotraconteur.image.Image> async_capture_frame(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<com.robotraconteur.image.CompressedImage> async_capture_frame_compressed(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_trigger(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_start_streaming(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_stop_streaming(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<object> async_getf_param(string param_name,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_setf_param(string param_name, object value_,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
}
public class Camera_stub : ServiceStub , Camera, async_Camera{
    private Pipe<com.robotraconteur.image.Image> rr_frame_stream;
    private Pipe<com.robotraconteur.image.CompressedImage> rr_frame_stream_compressed;
    private Pipe<com.robotraconteur.image.CompressedImage> rr_preview_stream;
    private Wire<CameraState> rr_camera_state;
    private Wire<com.robotraconteur.device.clock.DeviceTime> rr_device_clock_now;
    public Camera_stub(WrappedServiceStub innerstub) : base(innerstub) {
    rr_frame_stream=new Pipe<com.robotraconteur.image.Image>(innerstub.GetPipe("frame_stream"));
    rr_frame_stream_compressed=new Pipe<com.robotraconteur.image.CompressedImage>(innerstub.GetPipe("frame_stream_compressed"));
    rr_preview_stream=new Pipe<com.robotraconteur.image.CompressedImage>(innerstub.GetPipe("preview_stream"));
    rr_camera_state=new Wire<CameraState>(innerstub.GetWire("camera_state"));
    rr_device_clock_now=new Wire<com.robotraconteur.device.clock.DeviceTime>(innerstub.GetWire("device_clock_now"));
    }
    public com.robotraconteur.device.DeviceInfo device_info {
    get {
    return MessageElementUtil.UnpackStructure<com.robotraconteur.device.DeviceInfo>(rr_innerstub.PropertyGet("device_info"));
    }
    }
    public com.robotraconteur.imaging.camerainfo.CameraInfo camera_info {
    get {
    return MessageElementUtil.UnpackStructure<com.robotraconteur.imaging.camerainfo.CameraInfo>(rr_innerstub.PropertyGet("camera_info"));
    }
    }
    public uint capabilities {
    get {
    return (MessageElementUtil.UnpackScalar<uint>(rr_innerstub.PropertyGet("capabilities")));
    }
    }
    public TriggerMode trigger_mode {
    get {
    return MessageElementUtil.UnpackEnum<TriggerMode>(rr_innerstub.PropertyGet("trigger_mode"));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackEnum<TriggerMode>("value",value))
    {
    rr_innerstub.PropertySet("trigger_mode", m);
    }
    }
    }
    public List<com.robotraconteur.param.ParameterInfo> param_info {
    get {
    return MessageElementUtil.UnpackList<com.robotraconteur.param.ParameterInfo>(rr_innerstub.PropertyGet("param_info"));
    }
    }
    public com.robotraconteur.device.isoch.IsochInfo isoch_info {
    get {
    return MessageElementUtil.UnpackStructure<com.robotraconteur.device.isoch.IsochInfo>(rr_innerstub.PropertyGet("isoch_info"));
    }
    }
    public uint isoch_downsample {
    get {
    return (MessageElementUtil.UnpackScalar<uint>(rr_innerstub.PropertyGet("isoch_downsample")));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackScalar<uint>("value",value))
    {
    rr_innerstub.PropertySet("isoch_downsample", m);
    }
    }
    }
    public com.robotraconteur.image.Image capture_frame() {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    using(MessageElement rr_me=rr_innerstub.FunctionCall("capture_frame",rr_param))
    {
    return MessageElementUtil.UnpackStructure<com.robotraconteur.image.Image>(rr_me);
    }
    }
    }
    public com.robotraconteur.image.CompressedImage capture_frame_compressed() {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    using(MessageElement rr_me=rr_innerstub.FunctionCall("capture_frame_compressed",rr_param))
    {
    return MessageElementUtil.UnpackStructure<com.robotraconteur.image.CompressedImage>(rr_me);
    }
    }
    }
    public void trigger() {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    using(MessageElement rr_me=rr_innerstub.FunctionCall("trigger",rr_param))
    {
    }
    }
    }
    public void start_streaming() {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    using(MessageElement rr_me=rr_innerstub.FunctionCall("start_streaming",rr_param))
    {
    }
    }
    }
    public void stop_streaming() {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    using(MessageElement rr_me=rr_innerstub.FunctionCall("stop_streaming",rr_param))
    {
    }
    }
    }
    public object getf_param(string param_name) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("param_name",param_name));
    using(MessageElement rr_me=rr_innerstub.FunctionCall("getf_param",rr_param))
    {
    return MessageElementUtil.UnpackVarType(rr_me);
    }
    }
    }
    public void setf_param(string param_name, object value_) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("param_name",param_name));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackVarType("value",value_));
    using(MessageElement rr_me=rr_innerstub.FunctionCall("setf_param",rr_param))
    {
    }
    }
    }
    public override void DispatchEvent(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    }
    public Pipe<com.robotraconteur.image.Image> frame_stream {
    get { return rr_frame_stream;  }
    set { throw new InvalidOperationException();}
    }
    public Pipe<com.robotraconteur.image.CompressedImage> frame_stream_compressed {
    get { return rr_frame_stream_compressed;  }
    set { throw new InvalidOperationException();}
    }
    public Pipe<com.robotraconteur.image.CompressedImage> preview_stream {
    get { return rr_preview_stream;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<CameraState> camera_state {
    get { return rr_camera_state;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<com.robotraconteur.device.clock.DeviceTime> device_clock_now {
    get { return rr_device_clock_now;  }
    set { throw new InvalidOperationException();}
    }
    public override MessageElement CallbackCall(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public virtual async Task<com.robotraconteur.device.DeviceInfo> async_get_device_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("device_info",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<com.robotraconteur.device.DeviceInfo>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<com.robotraconteur.imaging.camerainfo.CameraInfo> async_get_camera_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("camera_info",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<com.robotraconteur.imaging.camerainfo.CameraInfo>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<uint> async_get_capabilities(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("capabilities",rr_timeout)) {
    var rr_ret=(MessageElementUtil.UnpackScalar<uint>(rr_value));
    return rr_ret;
    } }
    public virtual async Task<TriggerMode> async_get_trigger_mode(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("trigger_mode",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackEnum<TriggerMode>(rr_value);
    return rr_ret;
    } }
    public virtual async Task async_set_trigger_mode(TriggerMode value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackEnum<TriggerMode>("value",value))
    {
    await rr_async_PropertySet("trigger_mode",mm,rr_timeout);
    }
    }
    public virtual async Task<List<com.robotraconteur.param.ParameterInfo>> async_get_param_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("param_info",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackList<com.robotraconteur.param.ParameterInfo>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<com.robotraconteur.device.isoch.IsochInfo> async_get_isoch_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("isoch_info",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<com.robotraconteur.device.isoch.IsochInfo>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<uint> async_get_isoch_downsample(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("isoch_downsample",rr_timeout)) {
    var rr_ret=(MessageElementUtil.UnpackScalar<uint>(rr_value));
    return rr_ret;
    } }
    public virtual async Task async_set_isoch_downsample(uint value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackScalar<uint>("value",value))
    {
    await rr_async_PropertySet("isoch_downsample",mm,rr_timeout);
    }
    }
    public virtual async Task<com.robotraconteur.image.Image> async_capture_frame(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    using(var rr_return = await rr_async_FunctionCall("capture_frame",rr_param,rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<com.robotraconteur.image.Image>(rr_return);
    return rr_ret;
    } } }
    public virtual async Task<com.robotraconteur.image.CompressedImage> async_capture_frame_compressed(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    using(var rr_return = await rr_async_FunctionCall("capture_frame_compressed",rr_param,rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<com.robotraconteur.image.CompressedImage>(rr_return);
    return rr_ret;
    } } }
    public virtual async Task async_trigger(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    using(var rr_return = await rr_async_FunctionCall("trigger",rr_param,rr_timeout)) {
    } } }
    public virtual async Task async_start_streaming(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    using(var rr_return = await rr_async_FunctionCall("start_streaming",rr_param,rr_timeout)) {
    } } }
    public virtual async Task async_stop_streaming(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    using(var rr_return = await rr_async_FunctionCall("stop_streaming",rr_param,rr_timeout)) {
    } } }
    public virtual async Task<object> async_getf_param(string param_name,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("param_name",param_name));
    using(var rr_return = await rr_async_FunctionCall("getf_param",rr_param,rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackVarType(rr_return);
    return rr_ret;
    } } }
    public virtual async Task async_setf_param(string param_name, object value_,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("param_name",param_name));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackVarType("value",value_));
    using(var rr_return = await rr_async_FunctionCall("setf_param",rr_param,rr_timeout)) {
    } } }
}
public interface async_MultiCamera : com.robotraconteur.device.async_Device
{
    Task<com.robotraconteur.device.DeviceInfo> async_get_device_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<com.robotraconteur.imaging.camerainfo.MultiCameraInfo> async_get_multicamera_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<Dictionary<int,string>> async_get_camera_names(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<List<com.robotraconteur.param.ParameterInfo>> async_get_param_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<Dictionary<int,com.robotraconteur.image.Image>> async_capture_frame_all(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_trigger_all(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<object> async_getf_param(string param_name,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_setf_param(string param_name, object value_,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<Camera> async_get_cameras(int ind, int timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
}
public class MultiCamera_stub : ServiceStub , MultiCamera, async_MultiCamera{
    private Pipe<Dictionary<int,com.robotraconteur.image.Image>> rr_frame_stream_all;
    private Pipe<Dictionary<int,com.robotraconteur.image.CompressedImage>> rr_frame_stream_compressed_all;
    private Pipe<Dictionary<int,com.robotraconteur.image.CompressedImage>> rr_preview_stream_all;
    public MultiCamera_stub(WrappedServiceStub innerstub) : base(innerstub) {
    rr_frame_stream_all=new Pipe<Dictionary<int,com.robotraconteur.image.Image>>(innerstub.GetPipe("frame_stream_all"));
    rr_frame_stream_compressed_all=new Pipe<Dictionary<int,com.robotraconteur.image.CompressedImage>>(innerstub.GetPipe("frame_stream_compressed_all"));
    rr_preview_stream_all=new Pipe<Dictionary<int,com.robotraconteur.image.CompressedImage>>(innerstub.GetPipe("preview_stream_all"));
    }
    public com.robotraconteur.device.DeviceInfo device_info {
    get {
    return MessageElementUtil.UnpackStructure<com.robotraconteur.device.DeviceInfo>(rr_innerstub.PropertyGet("device_info"));
    }
    }
    public com.robotraconteur.imaging.camerainfo.MultiCameraInfo multicamera_info {
    get {
    return MessageElementUtil.UnpackStructure<com.robotraconteur.imaging.camerainfo.MultiCameraInfo>(rr_innerstub.PropertyGet("multicamera_info"));
    }
    }
    public Dictionary<int,string> camera_names {
    get {
    return MessageElementUtil.UnpackMap<int,string>(rr_innerstub.PropertyGet("camera_names"));
    }
    }
    public List<com.robotraconteur.param.ParameterInfo> param_info {
    get {
    return MessageElementUtil.UnpackList<com.robotraconteur.param.ParameterInfo>(rr_innerstub.PropertyGet("param_info"));
    }
    }
    public Dictionary<int,com.robotraconteur.image.Image> capture_frame_all() {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    using(MessageElement rr_me=rr_innerstub.FunctionCall("capture_frame_all",rr_param))
    {
    return MessageElementUtil.UnpackMap<int,com.robotraconteur.image.Image>(rr_me);
    }
    }
    }
    public void trigger_all() {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    using(MessageElement rr_me=rr_innerstub.FunctionCall("trigger_all",rr_param))
    {
    }
    }
    }
    public object getf_param(string param_name) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("param_name",param_name));
    using(MessageElement rr_me=rr_innerstub.FunctionCall("getf_param",rr_param))
    {
    return MessageElementUtil.UnpackVarType(rr_me);
    }
    }
    }
    public void setf_param(string param_name, object value_) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("param_name",param_name));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackVarType("value",value_));
    using(MessageElement rr_me=rr_innerstub.FunctionCall("setf_param",rr_param))
    {
    }
    }
    }
    public override void DispatchEvent(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    }
    public Camera get_cameras(int ind) {
    return (Camera)FindObjRefTyped("cameras",ind.ToString(),"com.robotraconteur.imaging.Camera");
    }
    public Pipe<Dictionary<int,com.robotraconteur.image.Image>> frame_stream_all {
    get { return rr_frame_stream_all;  }
    set { throw new InvalidOperationException();}
    }
    public Pipe<Dictionary<int,com.robotraconteur.image.CompressedImage>> frame_stream_compressed_all {
    get { return rr_frame_stream_compressed_all;  }
    set { throw new InvalidOperationException();}
    }
    public Pipe<Dictionary<int,com.robotraconteur.image.CompressedImage>> preview_stream_all {
    get { return rr_preview_stream_all;  }
    set { throw new InvalidOperationException();}
    }
    public override MessageElement CallbackCall(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public virtual async Task<com.robotraconteur.device.DeviceInfo> async_get_device_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("device_info",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<com.robotraconteur.device.DeviceInfo>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<com.robotraconteur.imaging.camerainfo.MultiCameraInfo> async_get_multicamera_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("multicamera_info",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<com.robotraconteur.imaging.camerainfo.MultiCameraInfo>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<Dictionary<int,string>> async_get_camera_names(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("camera_names",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackMap<int,string>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<List<com.robotraconteur.param.ParameterInfo>> async_get_param_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("param_info",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackList<com.robotraconteur.param.ParameterInfo>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<Dictionary<int,com.robotraconteur.image.Image>> async_capture_frame_all(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    using(var rr_return = await rr_async_FunctionCall("capture_frame_all",rr_param,rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackMap<int,com.robotraconteur.image.Image>(rr_return);
    return rr_ret;
    } } }
    public virtual async Task async_trigger_all(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    using(var rr_return = await rr_async_FunctionCall("trigger_all",rr_param,rr_timeout)) {
    } } }
    public virtual async Task<object> async_getf_param(string param_name,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("param_name",param_name));
    using(var rr_return = await rr_async_FunctionCall("getf_param",rr_param,rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackVarType(rr_return);
    return rr_ret;
    } } }
    public virtual async Task async_setf_param(string param_name, object value_,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("param_name",param_name));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackVarType("value",value_));
    using(var rr_return = await rr_async_FunctionCall("setf_param",rr_param,rr_timeout)) {
    } } }
    public Task<Camera>  async_get_cameras(int ind, int timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    return AsyncFindObjRefTyped<Camera>("cameras",ind.ToString(),"com.robotraconteur.imaging.Camera",timeout);
    }
}
public interface async_ImagePartCamera : com.robotraconteur.device.async_Device, com.robotraconteur.device.clock.async_DeviceClock, com.robotraconteur.device.isoch.async_IsochDevice
{
    Task<com.robotraconteur.device.DeviceInfo> async_get_device_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<com.robotraconteur.imaging.camerainfo.CameraInfo> async_get_camera_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<uint> async_get_capabilities(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<TriggerMode> async_get_trigger_mode(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_trigger_mode(TriggerMode value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<List<com.robotraconteur.param.ParameterInfo>> async_get_param_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<com.robotraconteur.device.isoch.IsochInfo> async_get_isoch_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<uint> async_get_isoch_downsample(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_isoch_downsample(uint value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<Generator2<com.robotraconteur.image.ImagePart>> async_capture_frame(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_trigger(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_start_streaming(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_stop_streaming(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<object> async_getf_param(string param_name,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_setf_param(string param_name, object value_,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
}
public class ImagePartCamera_stub : ServiceStub , ImagePartCamera, async_ImagePartCamera{
    private Pipe<com.robotraconteur.image.CompressedImage> rr_preview_stream;
    private Wire<CameraState> rr_camera_state;
    private Wire<com.robotraconteur.device.clock.DeviceTime> rr_device_clock_now;
    public ImagePartCamera_stub(WrappedServiceStub innerstub) : base(innerstub) {
    rr_preview_stream=new Pipe<com.robotraconteur.image.CompressedImage>(innerstub.GetPipe("preview_stream"));
    rr_camera_state=new Wire<CameraState>(innerstub.GetWire("camera_state"));
    rr_device_clock_now=new Wire<com.robotraconteur.device.clock.DeviceTime>(innerstub.GetWire("device_clock_now"));
    }
    public com.robotraconteur.device.DeviceInfo device_info {
    get {
    return MessageElementUtil.UnpackStructure<com.robotraconteur.device.DeviceInfo>(rr_innerstub.PropertyGet("device_info"));
    }
    }
    public com.robotraconteur.imaging.camerainfo.CameraInfo camera_info {
    get {
    return MessageElementUtil.UnpackStructure<com.robotraconteur.imaging.camerainfo.CameraInfo>(rr_innerstub.PropertyGet("camera_info"));
    }
    }
    public uint capabilities {
    get {
    return (MessageElementUtil.UnpackScalar<uint>(rr_innerstub.PropertyGet("capabilities")));
    }
    }
    public TriggerMode trigger_mode {
    get {
    return MessageElementUtil.UnpackEnum<TriggerMode>(rr_innerstub.PropertyGet("trigger_mode"));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackEnum<TriggerMode>("value",value))
    {
    rr_innerstub.PropertySet("trigger_mode", m);
    }
    }
    }
    public List<com.robotraconteur.param.ParameterInfo> param_info {
    get {
    return MessageElementUtil.UnpackList<com.robotraconteur.param.ParameterInfo>(rr_innerstub.PropertyGet("param_info"));
    }
    }
    public com.robotraconteur.device.isoch.IsochInfo isoch_info {
    get {
    return MessageElementUtil.UnpackStructure<com.robotraconteur.device.isoch.IsochInfo>(rr_innerstub.PropertyGet("isoch_info"));
    }
    }
    public uint isoch_downsample {
    get {
    return (MessageElementUtil.UnpackScalar<uint>(rr_innerstub.PropertyGet("isoch_downsample")));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackScalar<uint>("value",value))
    {
    rr_innerstub.PropertySet("isoch_downsample", m);
    }
    }
    }
    public Generator2<com.robotraconteur.image.ImagePart> capture_frame() {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    WrappedGeneratorClient generator_client = rr_innerstub.GeneratorFunctionCall("capture_frame",rr_param);
    return new Generator2Client<com.robotraconteur.image.ImagePart>(generator_client);
    }
    }
    public void trigger() {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    using(MessageElement rr_me=rr_innerstub.FunctionCall("trigger",rr_param))
    {
    }
    }
    }
    public void start_streaming() {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    using(MessageElement rr_me=rr_innerstub.FunctionCall("start_streaming",rr_param))
    {
    }
    }
    }
    public void stop_streaming() {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    using(MessageElement rr_me=rr_innerstub.FunctionCall("stop_streaming",rr_param))
    {
    }
    }
    }
    public object getf_param(string param_name) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("param_name",param_name));
    using(MessageElement rr_me=rr_innerstub.FunctionCall("getf_param",rr_param))
    {
    return MessageElementUtil.UnpackVarType(rr_me);
    }
    }
    }
    public void setf_param(string param_name, object value_) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("param_name",param_name));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackVarType("value",value_));
    using(MessageElement rr_me=rr_innerstub.FunctionCall("setf_param",rr_param))
    {
    }
    }
    }
    public override void DispatchEvent(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    }
    public Pipe<com.robotraconteur.image.CompressedImage> preview_stream {
    get { return rr_preview_stream;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<CameraState> camera_state {
    get { return rr_camera_state;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<com.robotraconteur.device.clock.DeviceTime> device_clock_now {
    get { return rr_device_clock_now;  }
    set { throw new InvalidOperationException();}
    }
    public override MessageElement CallbackCall(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public virtual async Task<com.robotraconteur.device.DeviceInfo> async_get_device_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("device_info",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<com.robotraconteur.device.DeviceInfo>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<com.robotraconteur.imaging.camerainfo.CameraInfo> async_get_camera_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("camera_info",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<com.robotraconteur.imaging.camerainfo.CameraInfo>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<uint> async_get_capabilities(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("capabilities",rr_timeout)) {
    var rr_ret=(MessageElementUtil.UnpackScalar<uint>(rr_value));
    return rr_ret;
    } }
    public virtual async Task<TriggerMode> async_get_trigger_mode(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("trigger_mode",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackEnum<TriggerMode>(rr_value);
    return rr_ret;
    } }
    public virtual async Task async_set_trigger_mode(TriggerMode value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackEnum<TriggerMode>("value",value))
    {
    await rr_async_PropertySet("trigger_mode",mm,rr_timeout);
    }
    }
    public virtual async Task<List<com.robotraconteur.param.ParameterInfo>> async_get_param_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("param_info",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackList<com.robotraconteur.param.ParameterInfo>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<com.robotraconteur.device.isoch.IsochInfo> async_get_isoch_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("isoch_info",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<com.robotraconteur.device.isoch.IsochInfo>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<uint> async_get_isoch_downsample(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("isoch_downsample",rr_timeout)) {
    var rr_ret=(MessageElementUtil.UnpackScalar<uint>(rr_value));
    return rr_ret;
    } }
    public virtual async Task async_set_isoch_downsample(uint value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackScalar<uint>("value",value))
    {
    await rr_async_PropertySet("isoch_downsample",mm,rr_timeout);
    }
    }
    public virtual async Task<Generator2<com.robotraconteur.image.ImagePart>> async_capture_frame(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    var rr_return = await rr_async_GeneratorFunctionCall("capture_frame",rr_param,rr_timeout);
    Generator2Client< com.robotraconteur.image.ImagePart> rr_ret=new Generator2Client< com.robotraconteur.image.ImagePart>(rr_return);
    return rr_ret;
    } }
    public virtual async Task async_trigger(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    using(var rr_return = await rr_async_FunctionCall("trigger",rr_param,rr_timeout)) {
    } } }
    public virtual async Task async_start_streaming(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    using(var rr_return = await rr_async_FunctionCall("start_streaming",rr_param,rr_timeout)) {
    } } }
    public virtual async Task async_stop_streaming(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    using(var rr_return = await rr_async_FunctionCall("stop_streaming",rr_param,rr_timeout)) {
    } } }
    public virtual async Task<object> async_getf_param(string param_name,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("param_name",param_name));
    using(var rr_return = await rr_async_FunctionCall("getf_param",rr_param,rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackVarType(rr_return);
    return rr_ret;
    } } }
    public virtual async Task async_setf_param(string param_name, object value_,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("param_name",param_name));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackVarType("value",value_));
    using(var rr_return = await rr_async_FunctionCall("setf_param",rr_param,rr_timeout)) {
    } } }
}
public class Camera_skel : ServiceSkel {
    protected Camera obj;
    protected async_Camera async_obj;
    public Camera_skel(object o) : base(o)    {
    obj=(Camera)o;
    async_obj = o as async_Camera;
    }
    public override void ReleaseCastObject() { 
    obj=null;
    async_obj=null;
    base.ReleaseCastObject();
    }
    public override MessageElement CallGetProperty(string membername, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    case "device_info":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_device_info().ContinueWith(t => async_adapter.EndTask<com.robotraconteur.device.DeviceInfo>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    com.robotraconteur.device.DeviceInfo ret=obj.device_info;
    return MessageElementUtil.PackStructure("return",ret);
    }
    case "camera_info":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_camera_info().ContinueWith(t => async_adapter.EndTask<com.robotraconteur.imaging.camerainfo.CameraInfo>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    com.robotraconteur.imaging.camerainfo.CameraInfo ret=obj.camera_info;
    return MessageElementUtil.PackStructure("return",ret);
    }
    case "capabilities":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_capabilities().ContinueWith(t => async_adapter.EndTask<uint>(t,async_ret => MessageElementUtil.PackScalar<uint>("return",async_ret)));
    return null;
    }
    uint ret=obj.capabilities;
    return MessageElementUtil.PackScalar<uint>("return",ret);
    }
    case "trigger_mode":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_trigger_mode().ContinueWith(t => async_adapter.EndTask<TriggerMode>(t,async_ret => MessageElementUtil.PackEnum<TriggerMode>("return",async_ret)));
    return null;
    }
    TriggerMode ret=obj.trigger_mode;
    return MessageElementUtil.PackEnum<TriggerMode>("return",ret);
    }
    case "param_info":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_param_info().ContinueWith(t => async_adapter.EndTask<List<com.robotraconteur.param.ParameterInfo>>(t,async_ret => MessageElementUtil.PackListType<com.robotraconteur.param.ParameterInfo>("return",async_ret)));
    return null;
    }
    List<com.robotraconteur.param.ParameterInfo> ret=obj.param_info;
    return MessageElementUtil.PackListType<com.robotraconteur.param.ParameterInfo>("return",ret);
    }
    case "isoch_info":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_isoch_info().ContinueWith(t => async_adapter.EndTask<com.robotraconteur.device.isoch.IsochInfo>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    com.robotraconteur.device.isoch.IsochInfo ret=obj.isoch_info;
    return MessageElementUtil.PackStructure("return",ret);
    }
    case "isoch_downsample":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_isoch_downsample().ContinueWith(t => async_adapter.EndTask<uint>(t,async_ret => MessageElementUtil.PackScalar<uint>("return",async_ret)));
    return null;
    }
    uint ret=obj.isoch_downsample;
    return MessageElementUtil.PackScalar<uint>("return",ret);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void CallSetProperty(string membername, MessageElement m, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    case "trigger_mode":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_trigger_mode(MessageElementUtil.UnpackEnum<TriggerMode>(m)).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.trigger_mode=MessageElementUtil.UnpackEnum<TriggerMode>(m);
    return;
    }
    case "isoch_downsample":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_isoch_downsample((MessageElementUtil.UnpackScalar<uint>(m))).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.isoch_downsample=(MessageElementUtil.UnpackScalar<uint>(m));
    return;
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override MessageElement CallFunction(string rr_membername, vectorptr_messageelement rr_m, WrappedServiceSkelAsyncAdapter rr_async_adapter) {
    switch (rr_membername) {
    case "capture_frame":
    {
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_capture_frame().ContinueWith(t => rr_async_adapter.EndTask<com.robotraconteur.image.Image>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    com.robotraconteur.image.Image rr_ret=this.obj.capture_frame();
    return MessageElementUtil.PackStructure("return",rr_ret);
    }
    case "capture_frame_compressed":
    {
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_capture_frame_compressed().ContinueWith(t => rr_async_adapter.EndTask<com.robotraconteur.image.CompressedImage>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    com.robotraconteur.image.CompressedImage rr_ret=this.obj.capture_frame_compressed();
    return MessageElementUtil.PackStructure("return",rr_ret);
    }
    case "trigger":
    {
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_trigger().ContinueWith(t => rr_async_adapter.EndTask(t,new MessageElement("return",(int)0)));
    return null;
    }
    this.obj.trigger();
    return new MessageElement("return",(int)0);
    }
    case "start_streaming":
    {
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_start_streaming().ContinueWith(t => rr_async_adapter.EndTask(t,new MessageElement("return",(int)0)));
    return null;
    }
    this.obj.start_streaming();
    return new MessageElement("return",(int)0);
    }
    case "stop_streaming":
    {
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_stop_streaming().ContinueWith(t => rr_async_adapter.EndTask(t,new MessageElement("return",(int)0)));
    return null;
    }
    this.obj.stop_streaming();
    return new MessageElement("return",(int)0);
    }
    case "getf_param":
    {
    string param_name=MessageElementUtil.UnpackString(vectorptr_messageelement_util.FindElement(rr_m,"param_name"));
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_getf_param(param_name).ContinueWith(t => rr_async_adapter.EndTask<object>(t,async_ret => MessageElementUtil.PackVarType("return",async_ret)));
    return null;
    }
    object rr_ret=this.obj.getf_param(param_name);
    return MessageElementUtil.PackVarType("return",rr_ret);
    }
    case "setf_param":
    {
    string param_name=MessageElementUtil.UnpackString(vectorptr_messageelement_util.FindElement(rr_m,"param_name"));
    object value_=MessageElementUtil.UnpackVarType(vectorptr_messageelement_util.FindElement(rr_m,"value"));
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_setf_param(param_name, value_).ContinueWith(t => rr_async_adapter.EndTask(t,new MessageElement("return",(int)0)));
    return null;
    }
    this.obj.setf_param(param_name, value_);
    return new MessageElement("return",(int)0);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override object GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(Camera)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(Camera)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void InitPipeServers(object rrobj1) {
    obj=(Camera)rrobj1;
    obj.frame_stream=new Pipe<com.robotraconteur.image.Image>(innerskel.GetPipe("frame_stream"));
    obj.frame_stream_compressed=new Pipe<com.robotraconteur.image.CompressedImage>(innerskel.GetPipe("frame_stream_compressed"));
    obj.preview_stream=new Pipe<com.robotraconteur.image.CompressedImage>(innerskel.GetPipe("preview_stream"));
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(Camera)rrobj1;
    }
    public override void InitWireServers(object rrobj1) {
    obj=(Camera)rrobj1;
    obj.camera_state=new Wire<CameraState>(innerskel.GetWire("camera_state"));
    obj.device_clock_now=new Wire<com.robotraconteur.device.clock.DeviceTime>(innerskel.GetWire("device_clock_now"));
    }
    public override WrappedArrayMemoryDirector GetArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedMultiDimArrayMemoryDirector GetMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodArrayMemoryDirector GetPodArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodMultiDimArrayMemoryDirector GetPodMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedArrayMemoryDirector GetNamedArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedMultiDimArrayMemoryDirector GetNamedMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override string RRType { get { return "com.robotraconteur.imaging.Camera"; } }
}
public class MultiCamera_skel : ServiceSkel {
    protected MultiCamera obj;
    protected async_MultiCamera async_obj;
    public MultiCamera_skel(object o) : base(o)    {
    obj=(MultiCamera)o;
    async_obj = o as async_MultiCamera;
    }
    public override void ReleaseCastObject() { 
    obj=null;
    async_obj=null;
    base.ReleaseCastObject();
    }
    public override MessageElement CallGetProperty(string membername, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    case "device_info":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_device_info().ContinueWith(t => async_adapter.EndTask<com.robotraconteur.device.DeviceInfo>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    com.robotraconteur.device.DeviceInfo ret=obj.device_info;
    return MessageElementUtil.PackStructure("return",ret);
    }
    case "multicamera_info":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_multicamera_info().ContinueWith(t => async_adapter.EndTask<com.robotraconteur.imaging.camerainfo.MultiCameraInfo>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    com.robotraconteur.imaging.camerainfo.MultiCameraInfo ret=obj.multicamera_info;
    return MessageElementUtil.PackStructure("return",ret);
    }
    case "camera_names":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_camera_names().ContinueWith(t => async_adapter.EndTask<Dictionary<int,string>>(t,async_ret => MessageElementUtil.PackMapType<int,string>("return",async_ret)));
    return null;
    }
    Dictionary<int,string> ret=obj.camera_names;
    return MessageElementUtil.PackMapType<int,string>("return",ret);
    }
    case "param_info":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_param_info().ContinueWith(t => async_adapter.EndTask<List<com.robotraconteur.param.ParameterInfo>>(t,async_ret => MessageElementUtil.PackListType<com.robotraconteur.param.ParameterInfo>("return",async_ret)));
    return null;
    }
    List<com.robotraconteur.param.ParameterInfo> ret=obj.param_info;
    return MessageElementUtil.PackListType<com.robotraconteur.param.ParameterInfo>("return",ret);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void CallSetProperty(string membername, MessageElement m, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override MessageElement CallFunction(string rr_membername, vectorptr_messageelement rr_m, WrappedServiceSkelAsyncAdapter rr_async_adapter) {
    switch (rr_membername) {
    case "capture_frame_all":
    {
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_capture_frame_all().ContinueWith(t => rr_async_adapter.EndTask<Dictionary<int,com.robotraconteur.image.Image>>(t,async_ret => MessageElementUtil.PackMapType<int,com.robotraconteur.image.Image>("return",async_ret)));
    return null;
    }
    Dictionary<int,com.robotraconteur.image.Image> rr_ret=this.obj.capture_frame_all();
    return MessageElementUtil.PackMapType<int,com.robotraconteur.image.Image>("return",rr_ret);
    }
    case "trigger_all":
    {
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_trigger_all().ContinueWith(t => rr_async_adapter.EndTask(t,new MessageElement("return",(int)0)));
    return null;
    }
    this.obj.trigger_all();
    return new MessageElement("return",(int)0);
    }
    case "getf_param":
    {
    string param_name=MessageElementUtil.UnpackString(vectorptr_messageelement_util.FindElement(rr_m,"param_name"));
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_getf_param(param_name).ContinueWith(t => rr_async_adapter.EndTask<object>(t,async_ret => MessageElementUtil.PackVarType("return",async_ret)));
    return null;
    }
    object rr_ret=this.obj.getf_param(param_name);
    return MessageElementUtil.PackVarType("return",rr_ret);
    }
    case "setf_param":
    {
    string param_name=MessageElementUtil.UnpackString(vectorptr_messageelement_util.FindElement(rr_m,"param_name"));
    object value_=MessageElementUtil.UnpackVarType(vectorptr_messageelement_util.FindElement(rr_m,"value"));
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_setf_param(param_name, value_).ContinueWith(t => rr_async_adapter.EndTask(t,new MessageElement("return",(int)0)));
    return null;
    }
    this.obj.setf_param(param_name, value_);
    return new MessageElement("return",(int)0);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override object GetSubObj(string name, string ind) {
    switch (name) {
    case "cameras": {
    return obj.get_cameras(Int32.Parse(ind));
    }
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(MultiCamera)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(MultiCamera)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void InitPipeServers(object rrobj1) {
    obj=(MultiCamera)rrobj1;
    obj.frame_stream_all=new Pipe<Dictionary<int,com.robotraconteur.image.Image>>(innerskel.GetPipe("frame_stream_all"));
    obj.frame_stream_compressed_all=new Pipe<Dictionary<int,com.robotraconteur.image.CompressedImage>>(innerskel.GetPipe("frame_stream_compressed_all"));
    obj.preview_stream_all=new Pipe<Dictionary<int,com.robotraconteur.image.CompressedImage>>(innerskel.GetPipe("preview_stream_all"));
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(MultiCamera)rrobj1;
    }
    public override void InitWireServers(object rrobj1) {
    obj=(MultiCamera)rrobj1;
    }
    public override WrappedArrayMemoryDirector GetArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedMultiDimArrayMemoryDirector GetMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodArrayMemoryDirector GetPodArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodMultiDimArrayMemoryDirector GetPodMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedArrayMemoryDirector GetNamedArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedMultiDimArrayMemoryDirector GetNamedMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override string RRType { get { return "com.robotraconteur.imaging.MultiCamera"; } }
}
public class ImagePartCamera_skel : ServiceSkel {
    protected ImagePartCamera obj;
    protected async_ImagePartCamera async_obj;
    public ImagePartCamera_skel(object o) : base(o)    {
    obj=(ImagePartCamera)o;
    async_obj = o as async_ImagePartCamera;
    }
    public override void ReleaseCastObject() { 
    obj=null;
    async_obj=null;
    base.ReleaseCastObject();
    }
    public override MessageElement CallGetProperty(string membername, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    case "device_info":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_device_info().ContinueWith(t => async_adapter.EndTask<com.robotraconteur.device.DeviceInfo>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    com.robotraconteur.device.DeviceInfo ret=obj.device_info;
    return MessageElementUtil.PackStructure("return",ret);
    }
    case "camera_info":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_camera_info().ContinueWith(t => async_adapter.EndTask<com.robotraconteur.imaging.camerainfo.CameraInfo>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    com.robotraconteur.imaging.camerainfo.CameraInfo ret=obj.camera_info;
    return MessageElementUtil.PackStructure("return",ret);
    }
    case "capabilities":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_capabilities().ContinueWith(t => async_adapter.EndTask<uint>(t,async_ret => MessageElementUtil.PackScalar<uint>("return",async_ret)));
    return null;
    }
    uint ret=obj.capabilities;
    return MessageElementUtil.PackScalar<uint>("return",ret);
    }
    case "trigger_mode":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_trigger_mode().ContinueWith(t => async_adapter.EndTask<TriggerMode>(t,async_ret => MessageElementUtil.PackEnum<TriggerMode>("return",async_ret)));
    return null;
    }
    TriggerMode ret=obj.trigger_mode;
    return MessageElementUtil.PackEnum<TriggerMode>("return",ret);
    }
    case "param_info":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_param_info().ContinueWith(t => async_adapter.EndTask<List<com.robotraconteur.param.ParameterInfo>>(t,async_ret => MessageElementUtil.PackListType<com.robotraconteur.param.ParameterInfo>("return",async_ret)));
    return null;
    }
    List<com.robotraconteur.param.ParameterInfo> ret=obj.param_info;
    return MessageElementUtil.PackListType<com.robotraconteur.param.ParameterInfo>("return",ret);
    }
    case "isoch_info":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_isoch_info().ContinueWith(t => async_adapter.EndTask<com.robotraconteur.device.isoch.IsochInfo>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    com.robotraconteur.device.isoch.IsochInfo ret=obj.isoch_info;
    return MessageElementUtil.PackStructure("return",ret);
    }
    case "isoch_downsample":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_isoch_downsample().ContinueWith(t => async_adapter.EndTask<uint>(t,async_ret => MessageElementUtil.PackScalar<uint>("return",async_ret)));
    return null;
    }
    uint ret=obj.isoch_downsample;
    return MessageElementUtil.PackScalar<uint>("return",ret);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void CallSetProperty(string membername, MessageElement m, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    case "trigger_mode":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_trigger_mode(MessageElementUtil.UnpackEnum<TriggerMode>(m)).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.trigger_mode=MessageElementUtil.UnpackEnum<TriggerMode>(m);
    return;
    }
    case "isoch_downsample":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_isoch_downsample((MessageElementUtil.UnpackScalar<uint>(m))).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.isoch_downsample=(MessageElementUtil.UnpackScalar<uint>(m));
    return;
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override MessageElement CallFunction(string rr_membername, vectorptr_messageelement rr_m, WrappedServiceSkelAsyncAdapter rr_async_adapter) {
    switch (rr_membername) {
    case "capture_frame":
    {
    Generator2<com.robotraconteur.image.ImagePart> rr_ret=this.obj.capture_frame();
    int generator_index = innerskel.RegisterGeneratorServer("capture_frame", new WrappedGenerator2ServerDirectorNET<com.robotraconteur.image.ImagePart>(rr_ret));
    return new MessageElement("index",generator_index);
    }
    case "trigger":
    {
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_trigger().ContinueWith(t => rr_async_adapter.EndTask(t,new MessageElement("return",(int)0)));
    return null;
    }
    this.obj.trigger();
    return new MessageElement("return",(int)0);
    }
    case "start_streaming":
    {
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_start_streaming().ContinueWith(t => rr_async_adapter.EndTask(t,new MessageElement("return",(int)0)));
    return null;
    }
    this.obj.start_streaming();
    return new MessageElement("return",(int)0);
    }
    case "stop_streaming":
    {
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_stop_streaming().ContinueWith(t => rr_async_adapter.EndTask(t,new MessageElement("return",(int)0)));
    return null;
    }
    this.obj.stop_streaming();
    return new MessageElement("return",(int)0);
    }
    case "getf_param":
    {
    string param_name=MessageElementUtil.UnpackString(vectorptr_messageelement_util.FindElement(rr_m,"param_name"));
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_getf_param(param_name).ContinueWith(t => rr_async_adapter.EndTask<object>(t,async_ret => MessageElementUtil.PackVarType("return",async_ret)));
    return null;
    }
    object rr_ret=this.obj.getf_param(param_name);
    return MessageElementUtil.PackVarType("return",rr_ret);
    }
    case "setf_param":
    {
    string param_name=MessageElementUtil.UnpackString(vectorptr_messageelement_util.FindElement(rr_m,"param_name"));
    object value_=MessageElementUtil.UnpackVarType(vectorptr_messageelement_util.FindElement(rr_m,"value"));
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_setf_param(param_name, value_).ContinueWith(t => rr_async_adapter.EndTask(t,new MessageElement("return",(int)0)));
    return null;
    }
    this.obj.setf_param(param_name, value_);
    return new MessageElement("return",(int)0);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override object GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(ImagePartCamera)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(ImagePartCamera)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void InitPipeServers(object rrobj1) {
    obj=(ImagePartCamera)rrobj1;
    obj.preview_stream=new Pipe<com.robotraconteur.image.CompressedImage>(innerskel.GetPipe("preview_stream"));
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(ImagePartCamera)rrobj1;
    }
    public override void InitWireServers(object rrobj1) {
    obj=(ImagePartCamera)rrobj1;
    obj.camera_state=new Wire<CameraState>(innerskel.GetWire("camera_state"));
    obj.device_clock_now=new Wire<com.robotraconteur.device.clock.DeviceTime>(innerskel.GetWire("device_clock_now"));
    }
    public override WrappedArrayMemoryDirector GetArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedMultiDimArrayMemoryDirector GetMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodArrayMemoryDirector GetPodArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodMultiDimArrayMemoryDirector GetPodMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedArrayMemoryDirector GetNamedArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedMultiDimArrayMemoryDirector GetNamedMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override string RRType { get { return "com.robotraconteur.imaging.ImagePartCamera"; } }
}
public class Camera_default_impl : Camera{
    protected PipeBroadcaster<com.robotraconteur.image.Image> rrvar_frame_stream;
    protected PipeBroadcaster<com.robotraconteur.image.CompressedImage> rrvar_frame_stream_compressed;
    protected PipeBroadcaster<com.robotraconteur.image.CompressedImage> rrvar_preview_stream;
    protected WireBroadcaster<CameraState> rrvar_camera_state;
    protected WireBroadcaster<com.robotraconteur.device.clock.DeviceTime> rrvar_device_clock_now;
    public virtual com.robotraconteur.device.DeviceInfo device_info {get; set;} = default(com.robotraconteur.device.DeviceInfo);
    public virtual com.robotraconteur.imaging.camerainfo.CameraInfo camera_info {get; set;} = default(com.robotraconteur.imaging.camerainfo.CameraInfo);
    public virtual uint capabilities {get; set;} = default(uint);
    public virtual TriggerMode trigger_mode {get; set;} = default(TriggerMode);
    public virtual List<com.robotraconteur.param.ParameterInfo> param_info {get; set;} = default(List<com.robotraconteur.param.ParameterInfo>);
    public virtual com.robotraconteur.device.isoch.IsochInfo isoch_info {get; set;} = default(com.robotraconteur.device.isoch.IsochInfo);
    public virtual uint isoch_downsample {get; set;} = default(uint);
    public virtual com.robotraconteur.image.Image capture_frame() {
    throw new NotImplementedException();    }
    public virtual com.robotraconteur.image.CompressedImage capture_frame_compressed() {
    throw new NotImplementedException();    }
    public virtual void trigger() {
    throw new NotImplementedException();    }
    public virtual void start_streaming() {
    throw new NotImplementedException();    }
    public virtual void stop_streaming() {
    throw new NotImplementedException();    }
    public virtual object getf_param(string param_name) {
    throw new NotImplementedException();    }
    public virtual void setf_param(string param_name, object value_) {
    throw new NotImplementedException();    }
    public virtual Pipe<com.robotraconteur.image.Image> frame_stream {
    get { return rrvar_frame_stream.Pipe;  }
    set {
    if (rrvar_frame_stream!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_frame_stream= new PipeBroadcaster<com.robotraconteur.image.Image>(value);
    }
    }
    public virtual Pipe<com.robotraconteur.image.CompressedImage> frame_stream_compressed {
    get { return rrvar_frame_stream_compressed.Pipe;  }
    set {
    if (rrvar_frame_stream_compressed!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_frame_stream_compressed= new PipeBroadcaster<com.robotraconteur.image.CompressedImage>(value);
    }
    }
    public virtual Pipe<com.robotraconteur.image.CompressedImage> preview_stream {
    get { return rrvar_preview_stream.Pipe;  }
    set {
    if (rrvar_preview_stream!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_preview_stream= new PipeBroadcaster<com.robotraconteur.image.CompressedImage>(value);
    }
    }
    public virtual Wire<CameraState> camera_state {
    get { return rrvar_camera_state.Wire;  }
    set {
    if (rrvar_camera_state!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_camera_state= new WireBroadcaster<CameraState>(value);
    }
    }
    public virtual Wire<com.robotraconteur.device.clock.DeviceTime> device_clock_now {
    get { return rrvar_device_clock_now.Wire;  }
    set {
    if (rrvar_device_clock_now!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_device_clock_now= new WireBroadcaster<com.robotraconteur.device.clock.DeviceTime>(value);
    }
    }
}
public class MultiCamera_default_impl : MultiCamera{
    protected PipeBroadcaster<Dictionary<int,com.robotraconteur.image.Image>> rrvar_frame_stream_all;
    protected PipeBroadcaster<Dictionary<int,com.robotraconteur.image.CompressedImage>> rrvar_frame_stream_compressed_all;
    protected PipeBroadcaster<Dictionary<int,com.robotraconteur.image.CompressedImage>> rrvar_preview_stream_all;
    public virtual com.robotraconteur.device.DeviceInfo device_info {get; set;} = default(com.robotraconteur.device.DeviceInfo);
    public virtual com.robotraconteur.imaging.camerainfo.MultiCameraInfo multicamera_info {get; set;} = default(com.robotraconteur.imaging.camerainfo.MultiCameraInfo);
    public virtual Dictionary<int,string> camera_names {get; set;} = default(Dictionary<int,string>);
    public virtual List<com.robotraconteur.param.ParameterInfo> param_info {get; set;} = default(List<com.robotraconteur.param.ParameterInfo>);
    public virtual Dictionary<int,com.robotraconteur.image.Image> capture_frame_all() {
    throw new NotImplementedException();    }
    public virtual void trigger_all() {
    throw new NotImplementedException();    }
    public virtual object getf_param(string param_name) {
    throw new NotImplementedException();    }
    public virtual void setf_param(string param_name, object value_) {
    throw new NotImplementedException();    }
    public virtual Camera get_cameras(int ind) {
    throw new NotImplementedException();
    }
    public virtual Pipe<Dictionary<int,com.robotraconteur.image.Image>> frame_stream_all {
    get { return rrvar_frame_stream_all.Pipe;  }
    set {
    if (rrvar_frame_stream_all!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_frame_stream_all= new PipeBroadcaster<Dictionary<int,com.robotraconteur.image.Image>>(value);
    }
    }
    public virtual Pipe<Dictionary<int,com.robotraconteur.image.CompressedImage>> frame_stream_compressed_all {
    get { return rrvar_frame_stream_compressed_all.Pipe;  }
    set {
    if (rrvar_frame_stream_compressed_all!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_frame_stream_compressed_all= new PipeBroadcaster<Dictionary<int,com.robotraconteur.image.CompressedImage>>(value);
    }
    }
    public virtual Pipe<Dictionary<int,com.robotraconteur.image.CompressedImage>> preview_stream_all {
    get { return rrvar_preview_stream_all.Pipe;  }
    set {
    if (rrvar_preview_stream_all!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_preview_stream_all= new PipeBroadcaster<Dictionary<int,com.robotraconteur.image.CompressedImage>>(value);
    }
    }
}
public class ImagePartCamera_default_impl : ImagePartCamera{
    protected PipeBroadcaster<com.robotraconteur.image.CompressedImage> rrvar_preview_stream;
    protected WireBroadcaster<CameraState> rrvar_camera_state;
    protected WireBroadcaster<com.robotraconteur.device.clock.DeviceTime> rrvar_device_clock_now;
    public virtual com.robotraconteur.device.DeviceInfo device_info {get; set;} = default(com.robotraconteur.device.DeviceInfo);
    public virtual com.robotraconteur.imaging.camerainfo.CameraInfo camera_info {get; set;} = default(com.robotraconteur.imaging.camerainfo.CameraInfo);
    public virtual uint capabilities {get; set;} = default(uint);
    public virtual TriggerMode trigger_mode {get; set;} = default(TriggerMode);
    public virtual List<com.robotraconteur.param.ParameterInfo> param_info {get; set;} = default(List<com.robotraconteur.param.ParameterInfo>);
    public virtual com.robotraconteur.device.isoch.IsochInfo isoch_info {get; set;} = default(com.robotraconteur.device.isoch.IsochInfo);
    public virtual uint isoch_downsample {get; set;} = default(uint);
    public virtual Generator2<com.robotraconteur.image.ImagePart> capture_frame() {
    throw new NotImplementedException();    }
    public virtual void trigger() {
    throw new NotImplementedException();    }
    public virtual void start_streaming() {
    throw new NotImplementedException();    }
    public virtual void stop_streaming() {
    throw new NotImplementedException();    }
    public virtual object getf_param(string param_name) {
    throw new NotImplementedException();    }
    public virtual void setf_param(string param_name, object value_) {
    throw new NotImplementedException();    }
    public virtual Pipe<com.robotraconteur.image.CompressedImage> preview_stream {
    get { return rrvar_preview_stream.Pipe;  }
    set {
    if (rrvar_preview_stream!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_preview_stream= new PipeBroadcaster<com.robotraconteur.image.CompressedImage>(value);
    }
    }
    public virtual Wire<CameraState> camera_state {
    get { return rrvar_camera_state.Wire;  }
    set {
    if (rrvar_camera_state!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_camera_state= new WireBroadcaster<CameraState>(value);
    }
    }
    public virtual Wire<com.robotraconteur.device.clock.DeviceTime> device_clock_now {
    get { return rrvar_device_clock_now.Wire;  }
    set {
    if (rrvar_device_clock_now!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_device_clock_now= new WireBroadcaster<com.robotraconteur.device.clock.DeviceTime>(value);
    }
    }
}
public static class RRExtensions{
}
}
namespace com.robotraconteur.imu
{
public class ImuState
{
    public com.robotraconteur.geometry.Vector3 angular_velocity;
    public MultiDimArray angular_velocity_covariance;
    public com.robotraconteur.geometry.Vector3 linear_acceleration;
    public MultiDimArray linear_acceleration_covariance;
    public com.robotraconteur.geometry.Quaternion orientation;
    public MultiDimArray orientation_covariance;
}

[RobotRaconteurServiceObjectInterface()]
public interface ImuSensor : com.robotraconteur.device.Device, com.robotraconteur.sensor.Sensor
{
    com.robotraconteur.device.DeviceInfo device_info { get; 	}
    com.robotraconteur.sensor.SensorInfo sensor_info { get; 	}
    object getf_param(string param_name);
    void setf_param(string param_name, object value_);
    Pipe<com.robotraconteur.sensor.SensorData> sensor_data{ get; set; }
    Wire<double[]> sensor_value{ get; set; }
    Wire<ImuState> imu_state{ get; set; }
}

}
namespace com.robotraconteur.imu
{
public class com__robotraconteur__imuFactory : ServiceFactory
{
    public override string DefString()
{
    const string s="service com.robotraconteur.imu\n\nstdver 0.10\n\nimport com.robotraconteur.sensor\nimport com.robotraconteur.geometry\nimport com.robotraconteur.device\n\nusing com.robotraconteur.sensor.Sensor\nusing com.robotraconteur.sensor.SensorInfo\nusing com.robotraconteur.sensor.SensorData\nusing com.robotraconteur.geometry.Vector3\nusing com.robotraconteur.geometry.Quaternion\nusing com.robotraconteur.device.Device\nusing com.robotraconteur.device.DeviceInfo\n\nstruct ImuState\nfield Vector3 angular_velocity\nfield double[3,3] angular_velocity_covariance\nfield Vector3 linear_acceleration\nfield double[3,3] linear_acceleration_covariance\nfield Quaternion orientation\nfield double[3,3] orientation_covariance\nend\n\nobject ImuSensor\nimplements Device\nimplements Sensor\nproperty DeviceInfo device_info [readonly,nolock]\nproperty SensorInfo sensor_info [readonly,nolock]\nwire double[] sensor_value [readonly,nolock]\npipe SensorData sensor_data [readonly,nolock]\nfunction varvalue getf_param(string param_name)\nfunction void setf_param(string param_name, varvalue value)\nwire ImuState imu_state [readonly,nolock]\nend\n\n";
    return s;
    }
    public override string GetServiceName() {return "com.robotraconteur.imu";}
    public ImuState_stub ImuState_stubentry;
    public com__robotraconteur__imuFactory()
{
    ImuState_stubentry=new ImuState_stub(this);
    }
    public override IStructureStub FindStructureStub(string objecttype)
    {
    if (objecttype=="ImuState")    return ImuState_stubentry;
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public override IPodStub FindPodStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override INamedArrayStub FindNamedArrayStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override ServiceStub CreateStub(WrappedServiceStub innerstub) {
    string objecttype=innerstub.RR_objecttype.GetServiceDefinition().Name + "." + innerstub.RR_objecttype.Name;    string objshort;
    if (CompareNamespace(objecttype, out objshort)) {
    switch (objshort) {
    case "ImuSensor":
    return new ImuSensor_stub(innerstub);
    default:
    break;
    }
    } else {
    string ext_service_type=RobotRaconteurNode.SplitQualifiedName(objecttype).Item1;
    return RobotRaconteurNode.s.GetServiceType(ext_service_type).CreateStub(innerstub);
    }
    throw new ServiceException("Could not create stub");
    }
    public override ServiceSkel CreateSkel(object obj) {
    string objtype = RobotRaconteurNode.GetTypeString(ServiceSkelUtil.FindParentInterface(obj.GetType()));
    string objshort;
    if (CompareNamespace(objtype, out objshort)) {
    switch(objshort) {
    case "ImuSensor":
    return new ImuSensor_skel((ImuSensor)obj);
    default:
    break;
    }
    } else {
    string ext_service_type=RobotRaconteurNode.SplitQualifiedName(objtype).Item1;
    return RobotRaconteurNode.s.GetServiceFactory(ext_service_type).CreateSkel(obj);
    }
    throw new ServiceException("Could not create skel");
    }
    public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp){
    if (rr_exp==null) return rr_exp;
    string rr_type=rr_exp.Error;
    if (!rr_type.Contains(".")) return rr_exp;
    string rr_stype;
    if (CompareNamespace(rr_type, out rr_stype)) {
    } else {
    return RobotRaconteurNode.s.DownCastException(rr_exp); 
    }
    return rr_exp;
    }
}

public class ImuState_stub : IStructureStub {
    public ImuState_stub(com__robotraconteur__imuFactory d) {def=d;}
    private com__robotraconteur__imuFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    ImuState s = (ImuState)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Vector3>("angular_velocity",ref s.angular_velocity));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackMultiDimArray("angular_velocity_covariance",(MultiDimArray)DataTypeUtil.VerifyArrayLength(s.angular_velocity_covariance,9,new uint[] {3,3})));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Vector3>("linear_acceleration",ref s.linear_acceleration));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackMultiDimArray("linear_acceleration_covariance",(MultiDimArray)DataTypeUtil.VerifyArrayLength(s.linear_acceleration_covariance,9,new uint[] {3,3})));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Quaternion>("orientation",ref s.orientation));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackMultiDimArray("orientation_covariance",(MultiDimArray)DataTypeUtil.VerifyArrayLength(s.orientation_covariance,9,new uint[] {3,3})));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.imu.ImuState",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    ImuState s=new ImuState();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.angular_velocity =MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.Vector3>(MessageElement.FindElement(mm,"angular_velocity"));
    s.angular_velocity_covariance =DataTypeUtil.VerifyArrayLength(MessageElementUtil.UnpackMultiDimArray(MessageElement.FindElement(mm,"angular_velocity_covariance")),9,new uint[] {3,3});
    s.linear_acceleration =MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.Vector3>(MessageElement.FindElement(mm,"linear_acceleration"));
    s.linear_acceleration_covariance =DataTypeUtil.VerifyArrayLength(MessageElementUtil.UnpackMultiDimArray(MessageElement.FindElement(mm,"linear_acceleration_covariance")),9,new uint[] {3,3});
    s.orientation =MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.Quaternion>(MessageElement.FindElement(mm,"orientation"));
    s.orientation_covariance =DataTypeUtil.VerifyArrayLength(MessageElementUtil.UnpackMultiDimArray(MessageElement.FindElement(mm,"orientation_covariance")),9,new uint[] {3,3});
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public interface async_ImuSensor : com.robotraconteur.device.async_Device, com.robotraconteur.sensor.async_Sensor
{
    Task<com.robotraconteur.device.DeviceInfo> async_get_device_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<com.robotraconteur.sensor.SensorInfo> async_get_sensor_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<object> async_getf_param(string param_name,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_setf_param(string param_name, object value_,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
}
public class ImuSensor_stub : ServiceStub , ImuSensor, async_ImuSensor{
    private Pipe<com.robotraconteur.sensor.SensorData> rr_sensor_data;
    private Wire<double[]> rr_sensor_value;
    private Wire<ImuState> rr_imu_state;
    public ImuSensor_stub(WrappedServiceStub innerstub) : base(innerstub) {
    rr_sensor_data=new Pipe<com.robotraconteur.sensor.SensorData>(innerstub.GetPipe("sensor_data"));
    rr_sensor_value=new Wire<double[]>(innerstub.GetWire("sensor_value"));
    rr_imu_state=new Wire<ImuState>(innerstub.GetWire("imu_state"));
    }
    public com.robotraconteur.device.DeviceInfo device_info {
    get {
    return MessageElementUtil.UnpackStructure<com.robotraconteur.device.DeviceInfo>(rr_innerstub.PropertyGet("device_info"));
    }
    }
    public com.robotraconteur.sensor.SensorInfo sensor_info {
    get {
    return MessageElementUtil.UnpackStructure<com.robotraconteur.sensor.SensorInfo>(rr_innerstub.PropertyGet("sensor_info"));
    }
    }
    public object getf_param(string param_name) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("param_name",param_name));
    using(MessageElement rr_me=rr_innerstub.FunctionCall("getf_param",rr_param))
    {
    return MessageElementUtil.UnpackVarType(rr_me);
    }
    }
    }
    public void setf_param(string param_name, object value_) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("param_name",param_name));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackVarType("value",value_));
    using(MessageElement rr_me=rr_innerstub.FunctionCall("setf_param",rr_param))
    {
    }
    }
    }
    public override void DispatchEvent(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    }
    public Pipe<com.robotraconteur.sensor.SensorData> sensor_data {
    get { return rr_sensor_data;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<double[]> sensor_value {
    get { return rr_sensor_value;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<ImuState> imu_state {
    get { return rr_imu_state;  }
    set { throw new InvalidOperationException();}
    }
    public override MessageElement CallbackCall(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public virtual async Task<com.robotraconteur.device.DeviceInfo> async_get_device_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("device_info",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<com.robotraconteur.device.DeviceInfo>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<com.robotraconteur.sensor.SensorInfo> async_get_sensor_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("sensor_info",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<com.robotraconteur.sensor.SensorInfo>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<object> async_getf_param(string param_name,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("param_name",param_name));
    using(var rr_return = await rr_async_FunctionCall("getf_param",rr_param,rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackVarType(rr_return);
    return rr_ret;
    } } }
    public virtual async Task async_setf_param(string param_name, object value_,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("param_name",param_name));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackVarType("value",value_));
    using(var rr_return = await rr_async_FunctionCall("setf_param",rr_param,rr_timeout)) {
    } } }
}
public class ImuSensor_skel : ServiceSkel {
    protected ImuSensor obj;
    protected async_ImuSensor async_obj;
    public ImuSensor_skel(object o) : base(o)    {
    obj=(ImuSensor)o;
    async_obj = o as async_ImuSensor;
    }
    public override void ReleaseCastObject() { 
    obj=null;
    async_obj=null;
    base.ReleaseCastObject();
    }
    public override MessageElement CallGetProperty(string membername, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    case "device_info":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_device_info().ContinueWith(t => async_adapter.EndTask<com.robotraconteur.device.DeviceInfo>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    com.robotraconteur.device.DeviceInfo ret=obj.device_info;
    return MessageElementUtil.PackStructure("return",ret);
    }
    case "sensor_info":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_sensor_info().ContinueWith(t => async_adapter.EndTask<com.robotraconteur.sensor.SensorInfo>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    com.robotraconteur.sensor.SensorInfo ret=obj.sensor_info;
    return MessageElementUtil.PackStructure("return",ret);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void CallSetProperty(string membername, MessageElement m, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override MessageElement CallFunction(string rr_membername, vectorptr_messageelement rr_m, WrappedServiceSkelAsyncAdapter rr_async_adapter) {
    switch (rr_membername) {
    case "getf_param":
    {
    string param_name=MessageElementUtil.UnpackString(vectorptr_messageelement_util.FindElement(rr_m,"param_name"));
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_getf_param(param_name).ContinueWith(t => rr_async_adapter.EndTask<object>(t,async_ret => MessageElementUtil.PackVarType("return",async_ret)));
    return null;
    }
    object rr_ret=this.obj.getf_param(param_name);
    return MessageElementUtil.PackVarType("return",rr_ret);
    }
    case "setf_param":
    {
    string param_name=MessageElementUtil.UnpackString(vectorptr_messageelement_util.FindElement(rr_m,"param_name"));
    object value_=MessageElementUtil.UnpackVarType(vectorptr_messageelement_util.FindElement(rr_m,"value"));
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_setf_param(param_name, value_).ContinueWith(t => rr_async_adapter.EndTask(t,new MessageElement("return",(int)0)));
    return null;
    }
    this.obj.setf_param(param_name, value_);
    return new MessageElement("return",(int)0);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override object GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(ImuSensor)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(ImuSensor)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void InitPipeServers(object rrobj1) {
    obj=(ImuSensor)rrobj1;
    obj.sensor_data=new Pipe<com.robotraconteur.sensor.SensorData>(innerskel.GetPipe("sensor_data"));
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(ImuSensor)rrobj1;
    }
    public override void InitWireServers(object rrobj1) {
    obj=(ImuSensor)rrobj1;
    obj.sensor_value=new Wire<double[]>(innerskel.GetWire("sensor_value"));
    obj.imu_state=new Wire<ImuState>(innerskel.GetWire("imu_state"));
    }
    public override WrappedArrayMemoryDirector GetArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedMultiDimArrayMemoryDirector GetMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodArrayMemoryDirector GetPodArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodMultiDimArrayMemoryDirector GetPodMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedArrayMemoryDirector GetNamedArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedMultiDimArrayMemoryDirector GetNamedMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override string RRType { get { return "com.robotraconteur.imu.ImuSensor"; } }
}
public class ImuSensor_default_impl : ImuSensor{
    protected PipeBroadcaster<com.robotraconteur.sensor.SensorData> rrvar_sensor_data;
    protected WireBroadcaster<double[]> rrvar_sensor_value;
    protected WireBroadcaster<ImuState> rrvar_imu_state;
    public virtual com.robotraconteur.device.DeviceInfo device_info {get; set;} = default(com.robotraconteur.device.DeviceInfo);
    public virtual com.robotraconteur.sensor.SensorInfo sensor_info {get; set;} = default(com.robotraconteur.sensor.SensorInfo);
    public virtual object getf_param(string param_name) {
    throw new NotImplementedException();    }
    public virtual void setf_param(string param_name, object value_) {
    throw new NotImplementedException();    }
    public virtual Pipe<com.robotraconteur.sensor.SensorData> sensor_data {
    get { return rrvar_sensor_data.Pipe;  }
    set {
    if (rrvar_sensor_data!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_sensor_data= new PipeBroadcaster<com.robotraconteur.sensor.SensorData>(value);
    }
    }
    public virtual Wire<double[]> sensor_value {
    get { return rrvar_sensor_value.Wire;  }
    set {
    if (rrvar_sensor_value!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_sensor_value= new WireBroadcaster<double[]>(value);
    }
    }
    public virtual Wire<ImuState> imu_state {
    get { return rrvar_imu_state.Wire;  }
    set {
    if (rrvar_imu_state!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_imu_state= new WireBroadcaster<ImuState>(value);
    }
    }
}
public static class RRExtensions{
}
}
namespace com.robotraconteur.laserscan
{
public class LaserScanInfo
{
    public com.robotraconteur.sensordata.SensorDataHeader data_header;
    public double angle_min;
    public double angle_max;
    public double angle_increment;
    public uint angle_count;
    public double vertical_angle_min;
    public double vertical_angle_max;
    public double vertical_angle_increment;
    public uint vertical_angle_count;
    public double time_increment;
    public double scan_time;
    public double range_min;
    public double range_max;
    public double range_resolution;
}

public class LaserScan
{
    public LaserScanInfo scan_info;
    public double[] ranges;
    public double[] intensities;
    public com.robotraconteur.image.PixelRGB[] color;
    public int[] fiducial;
    public Dictionary<string,object> extended;
}

public class LaserScanInfof
{
    public com.robotraconteur.sensordata.SensorDataHeader data_header;
    public float angle_min;
    public float angle_max;
    public float angle_increment;
    public uint angle_count;
    public float vertical_angle_min;
    public float vertical_angle_max;
    public float vertical_angle_increment;
    public uint vertical_angle_count;
    public float time_increment;
    public float scan_time;
    public float range_min;
    public float range_max;
    public float range_resolution;
}

public class LaserScanf
{
    public LaserScanInfof scan_info;
    public float[] ranges;
    public float[] intensities;
    public com.robotraconteur.image.PixelRGB[] color;
    public int[] fiducial;
    public Dictionary<string,object> extended;
}

public class LaserScanPart
{
    public LaserScanInfo scan_info;
    public uint data_offset;
    public uint data_total_len;
    public double[] ranges;
    public double[] intensities;
    public com.robotraconteur.image.PixelRGB[] color;
    public int[] fiducial;
    public Dictionary<string,object> extended;
}

public class LaserScanPartf
{
    public LaserScanInfof scan_info;
    public uint data_offset;
    public uint data_total_len;
    public float[] ranges;
    public float[] intensities;
    public com.robotraconteur.image.PixelRGB[] color;
    public int[] fiducial;
    public Dictionary<string,object> extended;
}

}
namespace com.robotraconteur.laserscan
{
public class com__robotraconteur__laserscanFactory : ServiceFactory
{
    public override string DefString()
{
    const string s="service com.robotraconteur.laserscan\n\nstdver 0.10\n\nimport com.robotraconteur.image\nimport com.robotraconteur.sensordata\n\nusing com.robotraconteur.image.PixelRGB\nusing com.robotraconteur.sensordata.SensorDataHeader\n\nstruct LaserScanInfo\nfield SensorDataHeader data_header\nfield double angle_min\nfield double angle_max\nfield double angle_increment\nfield uint32 angle_count\nfield double vertical_angle_min\nfield double vertical_angle_max\nfield double vertical_angle_increment\nfield uint32 vertical_angle_count\nfield double time_increment\nfield double scan_time\nfield double range_min\nfield double range_max\nfield double range_resolution\nend\n\nstruct LaserScan\nfield LaserScanInfo scan_info\nfield double[] ranges\nfield double[] intensities\nfield PixelRGB[] color\nfield int32[] fiducial\nfield varvalue{string} extended\nend\n\nstruct LaserScanInfof\nfield SensorDataHeader data_header\nfield single angle_min\nfield single angle_max\nfield single angle_increment\nfield uint32 angle_count\nfield single vertical_angle_min\nfield single vertical_angle_max\nfield single vertical_angle_increment\nfield uint32 vertical_angle_count\nfield single time_increment\nfield single scan_time\nfield single range_min\nfield single range_max\nfield single range_resolution\nend\n\nstruct LaserScanf\nfield LaserScanInfof scan_info\nfield single[] ranges\nfield single[] intensities\nfield PixelRGB[] color\nfield int32[] fiducial\nfield varvalue{string} extended\nend\n\nstruct LaserScanPart\nfield LaserScanInfo scan_info\nfield uint32 data_offset\nfield uint32 data_total_len\nfield double[] ranges\nfield double[] intensities\nfield PixelRGB[] color\nfield int32[] fiducial\nfield varvalue{string} extended\nend\n\nstruct LaserScanPartf\nfield LaserScanInfof scan_info\nfield uint32 data_offset\nfield uint32 data_total_len\nfield single[] ranges\nfield single[] intensities\nfield PixelRGB[] color\nfield int32[] fiducial\nfield varvalue{string} extended\nend\n\n";
    return s;
    }
    public override string GetServiceName() {return "com.robotraconteur.laserscan";}
    public LaserScanInfo_stub LaserScanInfo_stubentry;
    public LaserScan_stub LaserScan_stubentry;
    public LaserScanInfof_stub LaserScanInfof_stubentry;
    public LaserScanf_stub LaserScanf_stubentry;
    public LaserScanPart_stub LaserScanPart_stubentry;
    public LaserScanPartf_stub LaserScanPartf_stubentry;
    public com__robotraconteur__laserscanFactory()
{
    LaserScanInfo_stubentry=new LaserScanInfo_stub(this);
    LaserScan_stubentry=new LaserScan_stub(this);
    LaserScanInfof_stubentry=new LaserScanInfof_stub(this);
    LaserScanf_stubentry=new LaserScanf_stub(this);
    LaserScanPart_stubentry=new LaserScanPart_stub(this);
    LaserScanPartf_stubentry=new LaserScanPartf_stub(this);
    }
    public override IStructureStub FindStructureStub(string objecttype)
    {
    if (objecttype=="LaserScanInfo")    return LaserScanInfo_stubentry;
    if (objecttype=="LaserScan")    return LaserScan_stubentry;
    if (objecttype=="LaserScanInfof")    return LaserScanInfof_stubentry;
    if (objecttype=="LaserScanf")    return LaserScanf_stubentry;
    if (objecttype=="LaserScanPart")    return LaserScanPart_stubentry;
    if (objecttype=="LaserScanPartf")    return LaserScanPartf_stubentry;
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public override IPodStub FindPodStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override INamedArrayStub FindNamedArrayStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override ServiceStub CreateStub(WrappedServiceStub innerstub) {
    string objecttype=innerstub.RR_objecttype.GetServiceDefinition().Name + "." + innerstub.RR_objecttype.Name;    string objshort;
    if (CompareNamespace(objecttype, out objshort)) {
    switch (objshort) {
    default:
    break;
    }
    } else {
    string ext_service_type=RobotRaconteurNode.SplitQualifiedName(objecttype).Item1;
    return RobotRaconteurNode.s.GetServiceType(ext_service_type).CreateStub(innerstub);
    }
    throw new ServiceException("Could not create stub");
    }
    public override ServiceSkel CreateSkel(object obj) {
    string objtype = RobotRaconteurNode.GetTypeString(ServiceSkelUtil.FindParentInterface(obj.GetType()));
    string objshort;
    if (CompareNamespace(objtype, out objshort)) {
    switch(objshort) {
    default:
    break;
    }
    } else {
    string ext_service_type=RobotRaconteurNode.SplitQualifiedName(objtype).Item1;
    return RobotRaconteurNode.s.GetServiceFactory(ext_service_type).CreateSkel(obj);
    }
    throw new ServiceException("Could not create skel");
    }
    public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp){
    if (rr_exp==null) return rr_exp;
    string rr_type=rr_exp.Error;
    if (!rr_type.Contains(".")) return rr_exp;
    string rr_stype;
    if (CompareNamespace(rr_type, out rr_stype)) {
    } else {
    return RobotRaconteurNode.s.DownCastException(rr_exp); 
    }
    return rr_exp;
    }
}

public class LaserScanInfo_stub : IStructureStub {
    public LaserScanInfo_stub(com__robotraconteur__laserscanFactory d) {def=d;}
    private com__robotraconteur__laserscanFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    LaserScanInfo s = (LaserScanInfo)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("data_header",s.data_header));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<double>("angle_min",s.angle_min));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<double>("angle_max",s.angle_max));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<double>("angle_increment",s.angle_increment));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<uint>("angle_count",s.angle_count));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<double>("vertical_angle_min",s.vertical_angle_min));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<double>("vertical_angle_max",s.vertical_angle_max));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<double>("vertical_angle_increment",s.vertical_angle_increment));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<uint>("vertical_angle_count",s.vertical_angle_count));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<double>("time_increment",s.time_increment));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<double>("scan_time",s.scan_time));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<double>("range_min",s.range_min));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<double>("range_max",s.range_max));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<double>("range_resolution",s.range_resolution));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.laserscan.LaserScanInfo",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    LaserScanInfo s=new LaserScanInfo();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.data_header =MessageElementUtil.UnpackStructure<com.robotraconteur.sensordata.SensorDataHeader>(MessageElement.FindElement(mm,"data_header"));
    s.angle_min =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(mm,"angle_min")));
    s.angle_max =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(mm,"angle_max")));
    s.angle_increment =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(mm,"angle_increment")));
    s.angle_count =(MessageElementUtil.UnpackScalar<uint>(MessageElement.FindElement(mm,"angle_count")));
    s.vertical_angle_min =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(mm,"vertical_angle_min")));
    s.vertical_angle_max =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(mm,"vertical_angle_max")));
    s.vertical_angle_increment =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(mm,"vertical_angle_increment")));
    s.vertical_angle_count =(MessageElementUtil.UnpackScalar<uint>(MessageElement.FindElement(mm,"vertical_angle_count")));
    s.time_increment =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(mm,"time_increment")));
    s.scan_time =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(mm,"scan_time")));
    s.range_min =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(mm,"range_min")));
    s.range_max =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(mm,"range_max")));
    s.range_resolution =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(mm,"range_resolution")));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class LaserScan_stub : IStructureStub {
    public LaserScan_stub(com__robotraconteur__laserscanFactory d) {def=d;}
    private com__robotraconteur__laserscanFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    LaserScan s = (LaserScan)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("scan_info",s.scan_info));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackArray<double>("ranges",s.ranges));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackArray<double>("intensities",s.intensities));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackNamedArray<com.robotraconteur.image.PixelRGB>("color",s.color));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackArray<int>("fiducial",s.fiducial));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackMapType<string,object>("extended",s.extended));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.laserscan.LaserScan",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    LaserScan s=new LaserScan();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.scan_info =MessageElementUtil.UnpackStructure<LaserScanInfo>(MessageElement.FindElement(mm,"scan_info"));
    s.ranges =MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(mm,"ranges"));
    s.intensities =MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(mm,"intensities"));
    s.color =MessageElementUtil.UnpackNamedArray<com.robotraconteur.image.PixelRGB>(MessageElement.FindElement(mm,"color"));
    s.fiducial =MessageElementUtil.UnpackArray<int>(MessageElement.FindElement(mm,"fiducial"));
    s.extended =MessageElementUtil.UnpackMap<string,object>(MessageElement.FindElement(mm,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class LaserScanInfof_stub : IStructureStub {
    public LaserScanInfof_stub(com__robotraconteur__laserscanFactory d) {def=d;}
    private com__robotraconteur__laserscanFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    LaserScanInfof s = (LaserScanInfof)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("data_header",s.data_header));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<float>("angle_min",s.angle_min));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<float>("angle_max",s.angle_max));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<float>("angle_increment",s.angle_increment));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<uint>("angle_count",s.angle_count));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<float>("vertical_angle_min",s.vertical_angle_min));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<float>("vertical_angle_max",s.vertical_angle_max));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<float>("vertical_angle_increment",s.vertical_angle_increment));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<uint>("vertical_angle_count",s.vertical_angle_count));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<float>("time_increment",s.time_increment));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<float>("scan_time",s.scan_time));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<float>("range_min",s.range_min));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<float>("range_max",s.range_max));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<float>("range_resolution",s.range_resolution));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.laserscan.LaserScanInfof",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    LaserScanInfof s=new LaserScanInfof();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.data_header =MessageElementUtil.UnpackStructure<com.robotraconteur.sensordata.SensorDataHeader>(MessageElement.FindElement(mm,"data_header"));
    s.angle_min =(MessageElementUtil.UnpackScalar<float>(MessageElement.FindElement(mm,"angle_min")));
    s.angle_max =(MessageElementUtil.UnpackScalar<float>(MessageElement.FindElement(mm,"angle_max")));
    s.angle_increment =(MessageElementUtil.UnpackScalar<float>(MessageElement.FindElement(mm,"angle_increment")));
    s.angle_count =(MessageElementUtil.UnpackScalar<uint>(MessageElement.FindElement(mm,"angle_count")));
    s.vertical_angle_min =(MessageElementUtil.UnpackScalar<float>(MessageElement.FindElement(mm,"vertical_angle_min")));
    s.vertical_angle_max =(MessageElementUtil.UnpackScalar<float>(MessageElement.FindElement(mm,"vertical_angle_max")));
    s.vertical_angle_increment =(MessageElementUtil.UnpackScalar<float>(MessageElement.FindElement(mm,"vertical_angle_increment")));
    s.vertical_angle_count =(MessageElementUtil.UnpackScalar<uint>(MessageElement.FindElement(mm,"vertical_angle_count")));
    s.time_increment =(MessageElementUtil.UnpackScalar<float>(MessageElement.FindElement(mm,"time_increment")));
    s.scan_time =(MessageElementUtil.UnpackScalar<float>(MessageElement.FindElement(mm,"scan_time")));
    s.range_min =(MessageElementUtil.UnpackScalar<float>(MessageElement.FindElement(mm,"range_min")));
    s.range_max =(MessageElementUtil.UnpackScalar<float>(MessageElement.FindElement(mm,"range_max")));
    s.range_resolution =(MessageElementUtil.UnpackScalar<float>(MessageElement.FindElement(mm,"range_resolution")));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class LaserScanf_stub : IStructureStub {
    public LaserScanf_stub(com__robotraconteur__laserscanFactory d) {def=d;}
    private com__robotraconteur__laserscanFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    LaserScanf s = (LaserScanf)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("scan_info",s.scan_info));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackArray<float>("ranges",s.ranges));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackArray<float>("intensities",s.intensities));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackNamedArray<com.robotraconteur.image.PixelRGB>("color",s.color));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackArray<int>("fiducial",s.fiducial));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackMapType<string,object>("extended",s.extended));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.laserscan.LaserScanf",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    LaserScanf s=new LaserScanf();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.scan_info =MessageElementUtil.UnpackStructure<LaserScanInfof>(MessageElement.FindElement(mm,"scan_info"));
    s.ranges =MessageElementUtil.UnpackArray<float>(MessageElement.FindElement(mm,"ranges"));
    s.intensities =MessageElementUtil.UnpackArray<float>(MessageElement.FindElement(mm,"intensities"));
    s.color =MessageElementUtil.UnpackNamedArray<com.robotraconteur.image.PixelRGB>(MessageElement.FindElement(mm,"color"));
    s.fiducial =MessageElementUtil.UnpackArray<int>(MessageElement.FindElement(mm,"fiducial"));
    s.extended =MessageElementUtil.UnpackMap<string,object>(MessageElement.FindElement(mm,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class LaserScanPart_stub : IStructureStub {
    public LaserScanPart_stub(com__robotraconteur__laserscanFactory d) {def=d;}
    private com__robotraconteur__laserscanFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    LaserScanPart s = (LaserScanPart)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("scan_info",s.scan_info));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<uint>("data_offset",s.data_offset));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<uint>("data_total_len",s.data_total_len));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackArray<double>("ranges",s.ranges));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackArray<double>("intensities",s.intensities));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackNamedArray<com.robotraconteur.image.PixelRGB>("color",s.color));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackArray<int>("fiducial",s.fiducial));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackMapType<string,object>("extended",s.extended));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.laserscan.LaserScanPart",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    LaserScanPart s=new LaserScanPart();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.scan_info =MessageElementUtil.UnpackStructure<LaserScanInfo>(MessageElement.FindElement(mm,"scan_info"));
    s.data_offset =(MessageElementUtil.UnpackScalar<uint>(MessageElement.FindElement(mm,"data_offset")));
    s.data_total_len =(MessageElementUtil.UnpackScalar<uint>(MessageElement.FindElement(mm,"data_total_len")));
    s.ranges =MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(mm,"ranges"));
    s.intensities =MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(mm,"intensities"));
    s.color =MessageElementUtil.UnpackNamedArray<com.robotraconteur.image.PixelRGB>(MessageElement.FindElement(mm,"color"));
    s.fiducial =MessageElementUtil.UnpackArray<int>(MessageElement.FindElement(mm,"fiducial"));
    s.extended =MessageElementUtil.UnpackMap<string,object>(MessageElement.FindElement(mm,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class LaserScanPartf_stub : IStructureStub {
    public LaserScanPartf_stub(com__robotraconteur__laserscanFactory d) {def=d;}
    private com__robotraconteur__laserscanFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    LaserScanPartf s = (LaserScanPartf)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("scan_info",s.scan_info));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<uint>("data_offset",s.data_offset));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<uint>("data_total_len",s.data_total_len));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackArray<float>("ranges",s.ranges));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackArray<float>("intensities",s.intensities));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackNamedArray<com.robotraconteur.image.PixelRGB>("color",s.color));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackArray<int>("fiducial",s.fiducial));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackMapType<string,object>("extended",s.extended));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.laserscan.LaserScanPartf",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    LaserScanPartf s=new LaserScanPartf();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.scan_info =MessageElementUtil.UnpackStructure<LaserScanInfof>(MessageElement.FindElement(mm,"scan_info"));
    s.data_offset =(MessageElementUtil.UnpackScalar<uint>(MessageElement.FindElement(mm,"data_offset")));
    s.data_total_len =(MessageElementUtil.UnpackScalar<uint>(MessageElement.FindElement(mm,"data_total_len")));
    s.ranges =MessageElementUtil.UnpackArray<float>(MessageElement.FindElement(mm,"ranges"));
    s.intensities =MessageElementUtil.UnpackArray<float>(MessageElement.FindElement(mm,"intensities"));
    s.color =MessageElementUtil.UnpackNamedArray<com.robotraconteur.image.PixelRGB>(MessageElement.FindElement(mm,"color"));
    s.fiducial =MessageElementUtil.UnpackArray<int>(MessageElement.FindElement(mm,"fiducial"));
    s.extended =MessageElementUtil.UnpackMap<string,object>(MessageElement.FindElement(mm,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public static class RRExtensions{
}
}
namespace com.robotraconteur.laserscanner
{
public class LaserScannerInfo
{
    public com.robotraconteur.device.DeviceInfo device_info;
    public com.robotraconteur.laserscan.LaserScanInfof scanner_info;
    public double scan_rate;
    public List<com.robotraconteur.param.ParameterInfo> param_info;
    public Dictionary<string,object> extended;
}

[RobotRaconteurServiceObjectInterface()]
public interface LaserScanner : com.robotraconteur.device.Device
{
    com.robotraconteur.device.DeviceInfo device_info { get; 	}
    LaserScannerInfo scanner_info { get; 	}
    object getf_param(string param_name);
    void setf_param(string param_name, object value_);
    Pipe<com.robotraconteur.laserscan.LaserScanf> laser_scan_sensor_data{ get; set; }
}

[RobotRaconteurServiceObjectInterface()]
public interface LaserScanPartScanner
{
    LaserScannerInfo scanner_info { get; 	}
    object getf_param(string param_name);
    void setf_param(string param_name, object value_);
    Pipe<com.robotraconteur.laserscan.LaserScanPartf> laser_scan_sensor_data{ get; set; }
}

}
namespace com.robotraconteur.laserscanner
{
public class com__robotraconteur__laserscannerFactory : ServiceFactory
{
    public override string DefString()
{
    const string s="service com.robotraconteur.laserscanner\n\nstdver 0.10\n\nimport com.robotraconteur.device\nimport com.robotraconteur.param\nimport com.robotraconteur.laserscan\n\nusing com.robotraconteur.device.DeviceInfo\nusing com.robotraconteur.device.Device\nusing com.robotraconteur.param.ParameterInfo\nusing com.robotraconteur.laserscan.LaserScanInfof as LaserScanInfo\nusing com.robotraconteur.laserscan.LaserScanf as LaserScan\nusing com.robotraconteur.laserscan.LaserScanPartf as LaserScanPart\n\nstruct LaserScannerInfo\nfield DeviceInfo device_info\nfield LaserScanInfo scanner_info\nfield double scan_rate\nfield ParameterInfo{list} param_info\nfield varvalue{string} extended\nend\n\nobject LaserScanner\nimplements Device\nproperty DeviceInfo device_info [readonly,nolock]\nproperty LaserScannerInfo scanner_info [readonly,nolock]\npipe LaserScan laser_scan_sensor_data [readonly]\nfunction varvalue getf_param(string param_name)\nfunction void setf_param(string param_name, varvalue value)\nend\n\nobject LaserScanPartScanner\nproperty LaserScannerInfo scanner_info [readonly,nolock]\npipe LaserScanPart laser_scan_sensor_data [readonly]\nfunction varvalue getf_param(string param_name)\nfunction void setf_param(string param_name, varvalue value)\nend\n\n";
    return s;
    }
    public override string GetServiceName() {return "com.robotraconteur.laserscanner";}
    public LaserScannerInfo_stub LaserScannerInfo_stubentry;
    public com__robotraconteur__laserscannerFactory()
{
    LaserScannerInfo_stubentry=new LaserScannerInfo_stub(this);
    }
    public override IStructureStub FindStructureStub(string objecttype)
    {
    if (objecttype=="LaserScannerInfo")    return LaserScannerInfo_stubentry;
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public override IPodStub FindPodStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override INamedArrayStub FindNamedArrayStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override ServiceStub CreateStub(WrappedServiceStub innerstub) {
    string objecttype=innerstub.RR_objecttype.GetServiceDefinition().Name + "." + innerstub.RR_objecttype.Name;    string objshort;
    if (CompareNamespace(objecttype, out objshort)) {
    switch (objshort) {
    case "LaserScanner":
    return new LaserScanner_stub(innerstub);
    case "LaserScanPartScanner":
    return new LaserScanPartScanner_stub(innerstub);
    default:
    break;
    }
    } else {
    string ext_service_type=RobotRaconteurNode.SplitQualifiedName(objecttype).Item1;
    return RobotRaconteurNode.s.GetServiceType(ext_service_type).CreateStub(innerstub);
    }
    throw new ServiceException("Could not create stub");
    }
    public override ServiceSkel CreateSkel(object obj) {
    string objtype = RobotRaconteurNode.GetTypeString(ServiceSkelUtil.FindParentInterface(obj.GetType()));
    string objshort;
    if (CompareNamespace(objtype, out objshort)) {
    switch(objshort) {
    case "LaserScanner":
    return new LaserScanner_skel((LaserScanner)obj);
    case "LaserScanPartScanner":
    return new LaserScanPartScanner_skel((LaserScanPartScanner)obj);
    default:
    break;
    }
    } else {
    string ext_service_type=RobotRaconteurNode.SplitQualifiedName(objtype).Item1;
    return RobotRaconteurNode.s.GetServiceFactory(ext_service_type).CreateSkel(obj);
    }
    throw new ServiceException("Could not create skel");
    }
    public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp){
    if (rr_exp==null) return rr_exp;
    string rr_type=rr_exp.Error;
    if (!rr_type.Contains(".")) return rr_exp;
    string rr_stype;
    if (CompareNamespace(rr_type, out rr_stype)) {
    } else {
    return RobotRaconteurNode.s.DownCastException(rr_exp); 
    }
    return rr_exp;
    }
}

public class LaserScannerInfo_stub : IStructureStub {
    public LaserScannerInfo_stub(com__robotraconteur__laserscannerFactory d) {def=d;}
    private com__robotraconteur__laserscannerFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    LaserScannerInfo s = (LaserScannerInfo)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("device_info",s.device_info));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("scanner_info",s.scanner_info));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<double>("scan_rate",s.scan_rate));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackListType<com.robotraconteur.param.ParameterInfo>("param_info",s.param_info));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackMapType<string,object>("extended",s.extended));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.laserscanner.LaserScannerInfo",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    LaserScannerInfo s=new LaserScannerInfo();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.device_info =MessageElementUtil.UnpackStructure<com.robotraconteur.device.DeviceInfo>(MessageElement.FindElement(mm,"device_info"));
    s.scanner_info =MessageElementUtil.UnpackStructure<com.robotraconteur.laserscan.LaserScanInfof>(MessageElement.FindElement(mm,"scanner_info"));
    s.scan_rate =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(mm,"scan_rate")));
    s.param_info =MessageElementUtil.UnpackList<com.robotraconteur.param.ParameterInfo>(MessageElement.FindElement(mm,"param_info"));
    s.extended =MessageElementUtil.UnpackMap<string,object>(MessageElement.FindElement(mm,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public interface async_LaserScanner : com.robotraconteur.device.async_Device
{
    Task<com.robotraconteur.device.DeviceInfo> async_get_device_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<LaserScannerInfo> async_get_scanner_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<object> async_getf_param(string param_name,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_setf_param(string param_name, object value_,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
}
public class LaserScanner_stub : ServiceStub , LaserScanner, async_LaserScanner{
    private Pipe<com.robotraconteur.laserscan.LaserScanf> rr_laser_scan_sensor_data;
    public LaserScanner_stub(WrappedServiceStub innerstub) : base(innerstub) {
    rr_laser_scan_sensor_data=new Pipe<com.robotraconteur.laserscan.LaserScanf>(innerstub.GetPipe("laser_scan_sensor_data"));
    }
    public com.robotraconteur.device.DeviceInfo device_info {
    get {
    return MessageElementUtil.UnpackStructure<com.robotraconteur.device.DeviceInfo>(rr_innerstub.PropertyGet("device_info"));
    }
    }
    public LaserScannerInfo scanner_info {
    get {
    return MessageElementUtil.UnpackStructure<LaserScannerInfo>(rr_innerstub.PropertyGet("scanner_info"));
    }
    }
    public object getf_param(string param_name) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("param_name",param_name));
    using(MessageElement rr_me=rr_innerstub.FunctionCall("getf_param",rr_param))
    {
    return MessageElementUtil.UnpackVarType(rr_me);
    }
    }
    }
    public void setf_param(string param_name, object value_) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("param_name",param_name));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackVarType("value",value_));
    using(MessageElement rr_me=rr_innerstub.FunctionCall("setf_param",rr_param))
    {
    }
    }
    }
    public override void DispatchEvent(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    }
    public Pipe<com.robotraconteur.laserscan.LaserScanf> laser_scan_sensor_data {
    get { return rr_laser_scan_sensor_data;  }
    set { throw new InvalidOperationException();}
    }
    public override MessageElement CallbackCall(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public virtual async Task<com.robotraconteur.device.DeviceInfo> async_get_device_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("device_info",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<com.robotraconteur.device.DeviceInfo>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<LaserScannerInfo> async_get_scanner_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("scanner_info",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<LaserScannerInfo>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<object> async_getf_param(string param_name,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("param_name",param_name));
    using(var rr_return = await rr_async_FunctionCall("getf_param",rr_param,rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackVarType(rr_return);
    return rr_ret;
    } } }
    public virtual async Task async_setf_param(string param_name, object value_,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("param_name",param_name));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackVarType("value",value_));
    using(var rr_return = await rr_async_FunctionCall("setf_param",rr_param,rr_timeout)) {
    } } }
}
public interface async_LaserScanPartScanner
{
    Task<LaserScannerInfo> async_get_scanner_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<object> async_getf_param(string param_name,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_setf_param(string param_name, object value_,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
}
public class LaserScanPartScanner_stub : ServiceStub , LaserScanPartScanner, async_LaserScanPartScanner{
    private Pipe<com.robotraconteur.laserscan.LaserScanPartf> rr_laser_scan_sensor_data;
    public LaserScanPartScanner_stub(WrappedServiceStub innerstub) : base(innerstub) {
    rr_laser_scan_sensor_data=new Pipe<com.robotraconteur.laserscan.LaserScanPartf>(innerstub.GetPipe("laser_scan_sensor_data"));
    }
    public LaserScannerInfo scanner_info {
    get {
    return MessageElementUtil.UnpackStructure<LaserScannerInfo>(rr_innerstub.PropertyGet("scanner_info"));
    }
    }
    public object getf_param(string param_name) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("param_name",param_name));
    using(MessageElement rr_me=rr_innerstub.FunctionCall("getf_param",rr_param))
    {
    return MessageElementUtil.UnpackVarType(rr_me);
    }
    }
    }
    public void setf_param(string param_name, object value_) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("param_name",param_name));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackVarType("value",value_));
    using(MessageElement rr_me=rr_innerstub.FunctionCall("setf_param",rr_param))
    {
    }
    }
    }
    public override void DispatchEvent(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    }
    public Pipe<com.robotraconteur.laserscan.LaserScanPartf> laser_scan_sensor_data {
    get { return rr_laser_scan_sensor_data;  }
    set { throw new InvalidOperationException();}
    }
    public override MessageElement CallbackCall(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public virtual async Task<LaserScannerInfo> async_get_scanner_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("scanner_info",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<LaserScannerInfo>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<object> async_getf_param(string param_name,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("param_name",param_name));
    using(var rr_return = await rr_async_FunctionCall("getf_param",rr_param,rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackVarType(rr_return);
    return rr_ret;
    } } }
    public virtual async Task async_setf_param(string param_name, object value_,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("param_name",param_name));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackVarType("value",value_));
    using(var rr_return = await rr_async_FunctionCall("setf_param",rr_param,rr_timeout)) {
    } } }
}
public class LaserScanner_skel : ServiceSkel {
    protected LaserScanner obj;
    protected async_LaserScanner async_obj;
    public LaserScanner_skel(object o) : base(o)    {
    obj=(LaserScanner)o;
    async_obj = o as async_LaserScanner;
    }
    public override void ReleaseCastObject() { 
    obj=null;
    async_obj=null;
    base.ReleaseCastObject();
    }
    public override MessageElement CallGetProperty(string membername, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    case "device_info":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_device_info().ContinueWith(t => async_adapter.EndTask<com.robotraconteur.device.DeviceInfo>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    com.robotraconteur.device.DeviceInfo ret=obj.device_info;
    return MessageElementUtil.PackStructure("return",ret);
    }
    case "scanner_info":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_scanner_info().ContinueWith(t => async_adapter.EndTask<LaserScannerInfo>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    LaserScannerInfo ret=obj.scanner_info;
    return MessageElementUtil.PackStructure("return",ret);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void CallSetProperty(string membername, MessageElement m, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override MessageElement CallFunction(string rr_membername, vectorptr_messageelement rr_m, WrappedServiceSkelAsyncAdapter rr_async_adapter) {
    switch (rr_membername) {
    case "getf_param":
    {
    string param_name=MessageElementUtil.UnpackString(vectorptr_messageelement_util.FindElement(rr_m,"param_name"));
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_getf_param(param_name).ContinueWith(t => rr_async_adapter.EndTask<object>(t,async_ret => MessageElementUtil.PackVarType("return",async_ret)));
    return null;
    }
    object rr_ret=this.obj.getf_param(param_name);
    return MessageElementUtil.PackVarType("return",rr_ret);
    }
    case "setf_param":
    {
    string param_name=MessageElementUtil.UnpackString(vectorptr_messageelement_util.FindElement(rr_m,"param_name"));
    object value_=MessageElementUtil.UnpackVarType(vectorptr_messageelement_util.FindElement(rr_m,"value"));
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_setf_param(param_name, value_).ContinueWith(t => rr_async_adapter.EndTask(t,new MessageElement("return",(int)0)));
    return null;
    }
    this.obj.setf_param(param_name, value_);
    return new MessageElement("return",(int)0);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override object GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(LaserScanner)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(LaserScanner)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void InitPipeServers(object rrobj1) {
    obj=(LaserScanner)rrobj1;
    obj.laser_scan_sensor_data=new Pipe<com.robotraconteur.laserscan.LaserScanf>(innerskel.GetPipe("laser_scan_sensor_data"));
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(LaserScanner)rrobj1;
    }
    public override void InitWireServers(object rrobj1) {
    obj=(LaserScanner)rrobj1;
    }
    public override WrappedArrayMemoryDirector GetArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedMultiDimArrayMemoryDirector GetMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodArrayMemoryDirector GetPodArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodMultiDimArrayMemoryDirector GetPodMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedArrayMemoryDirector GetNamedArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedMultiDimArrayMemoryDirector GetNamedMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override string RRType { get { return "com.robotraconteur.laserscanner.LaserScanner"; } }
}
public class LaserScanPartScanner_skel : ServiceSkel {
    protected LaserScanPartScanner obj;
    protected async_LaserScanPartScanner async_obj;
    public LaserScanPartScanner_skel(object o) : base(o)    {
    obj=(LaserScanPartScanner)o;
    async_obj = o as async_LaserScanPartScanner;
    }
    public override void ReleaseCastObject() { 
    obj=null;
    async_obj=null;
    base.ReleaseCastObject();
    }
    public override MessageElement CallGetProperty(string membername, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    case "scanner_info":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_scanner_info().ContinueWith(t => async_adapter.EndTask<LaserScannerInfo>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    LaserScannerInfo ret=obj.scanner_info;
    return MessageElementUtil.PackStructure("return",ret);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void CallSetProperty(string membername, MessageElement m, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override MessageElement CallFunction(string rr_membername, vectorptr_messageelement rr_m, WrappedServiceSkelAsyncAdapter rr_async_adapter) {
    switch (rr_membername) {
    case "getf_param":
    {
    string param_name=MessageElementUtil.UnpackString(vectorptr_messageelement_util.FindElement(rr_m,"param_name"));
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_getf_param(param_name).ContinueWith(t => rr_async_adapter.EndTask<object>(t,async_ret => MessageElementUtil.PackVarType("return",async_ret)));
    return null;
    }
    object rr_ret=this.obj.getf_param(param_name);
    return MessageElementUtil.PackVarType("return",rr_ret);
    }
    case "setf_param":
    {
    string param_name=MessageElementUtil.UnpackString(vectorptr_messageelement_util.FindElement(rr_m,"param_name"));
    object value_=MessageElementUtil.UnpackVarType(vectorptr_messageelement_util.FindElement(rr_m,"value"));
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_setf_param(param_name, value_).ContinueWith(t => rr_async_adapter.EndTask(t,new MessageElement("return",(int)0)));
    return null;
    }
    this.obj.setf_param(param_name, value_);
    return new MessageElement("return",(int)0);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override object GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(LaserScanPartScanner)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(LaserScanPartScanner)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void InitPipeServers(object rrobj1) {
    obj=(LaserScanPartScanner)rrobj1;
    obj.laser_scan_sensor_data=new Pipe<com.robotraconteur.laserscan.LaserScanPartf>(innerskel.GetPipe("laser_scan_sensor_data"));
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(LaserScanPartScanner)rrobj1;
    }
    public override void InitWireServers(object rrobj1) {
    obj=(LaserScanPartScanner)rrobj1;
    }
    public override WrappedArrayMemoryDirector GetArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedMultiDimArrayMemoryDirector GetMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodArrayMemoryDirector GetPodArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodMultiDimArrayMemoryDirector GetPodMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedArrayMemoryDirector GetNamedArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedMultiDimArrayMemoryDirector GetNamedMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override string RRType { get { return "com.robotraconteur.laserscanner.LaserScanPartScanner"; } }
}
public class LaserScanner_default_impl : LaserScanner{
    protected PipeBroadcaster<com.robotraconteur.laserscan.LaserScanf> rrvar_laser_scan_sensor_data;
    public virtual com.robotraconteur.device.DeviceInfo device_info {get; set;} = default(com.robotraconteur.device.DeviceInfo);
    public virtual LaserScannerInfo scanner_info {get; set;} = default(LaserScannerInfo);
    public virtual object getf_param(string param_name) {
    throw new NotImplementedException();    }
    public virtual void setf_param(string param_name, object value_) {
    throw new NotImplementedException();    }
    public virtual Pipe<com.robotraconteur.laserscan.LaserScanf> laser_scan_sensor_data {
    get { return rrvar_laser_scan_sensor_data.Pipe;  }
    set {
    if (rrvar_laser_scan_sensor_data!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_laser_scan_sensor_data= new PipeBroadcaster<com.robotraconteur.laserscan.LaserScanf>(value);
    }
    }
}
public class LaserScanPartScanner_default_impl : LaserScanPartScanner{
    protected PipeBroadcaster<com.robotraconteur.laserscan.LaserScanPartf> rrvar_laser_scan_sensor_data;
    public virtual LaserScannerInfo scanner_info {get; set;} = default(LaserScannerInfo);
    public virtual object getf_param(string param_name) {
    throw new NotImplementedException();    }
    public virtual void setf_param(string param_name, object value_) {
    throw new NotImplementedException();    }
    public virtual Pipe<com.robotraconteur.laserscan.LaserScanPartf> laser_scan_sensor_data {
    get { return rrvar_laser_scan_sensor_data.Pipe;  }
    set {
    if (rrvar_laser_scan_sensor_data!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_laser_scan_sensor_data= new PipeBroadcaster<com.robotraconteur.laserscan.LaserScanPartf>(value);
    }
    }
}
public static class RRExtensions{
}
}
namespace com.robotraconteur.lighting
{
public class LightInfo
{
    public com.robotraconteur.device.DeviceInfo device_info;
    public double max_lumens;
    public Dictionary<string,object> extended;
}

[RobotRaconteurServiceObjectInterface()]
public interface Light
{
    com.robotraconteur.device.DeviceInfo device_info { get; 	}
    LightInfo light_info { get; 	}
    bool on_off { get;  set; 	}
}

[RobotRaconteurServiceObjectInterface()]
public interface DimmableLight : Light
{
    com.robotraconteur.device.DeviceInfo device_info { get; 	}
    LightInfo light_info { get; 	}
    bool on_off { get;  set; 	}
    double intensity { get;  set; 	}
}

[RobotRaconteurServiceObjectInterface()]
public interface ColorTunableLight : Light, DimmableLight
{
    com.robotraconteur.device.DeviceInfo device_info { get; 	}
    LightInfo light_info { get; 	}
    bool on_off { get;  set; 	}
    double intensity { get;  set; 	}
    com.robotraconteur.color.ColorRGBA color { get;  set; 	}
}

}
namespace com.robotraconteur.lighting
{
public class com__robotraconteur__lightingFactory : ServiceFactory
{
    public override string DefString()
{
    const string s="service com.robotraconteur.lighting\n\nstdver 0.10\n\nimport com.robotraconteur.color\nimport com.robotraconteur.device\n\nusing com.robotraconteur.color.ColorRGBA\nusing com.robotraconteur.device.DeviceInfo\nusing com.robotraconteur.device.Device\n\nstruct LightInfo\nfield DeviceInfo device_info\nfield double max_lumens\nfield varvalue{string} extended\nend\n\nobject Light\nproperty DeviceInfo device_info [readonly,nolock]\nproperty LightInfo light_info [readonly,nolock]\nproperty bool on_off\nend\n\nobject DimmableLight\nimplements Light\nproperty DeviceInfo device_info [readonly,nolock]\nproperty LightInfo light_info [readonly,nolock]\nproperty bool on_off\n# intensity 0.0 to 1.0\nproperty double intensity\nend\n\nobject ColorTunableLight\nimplements Light\nimplements DimmableLight\nproperty DeviceInfo device_info [readonly,nolock]\nproperty LightInfo light_info [readonly,nolock]\nproperty bool on_off\n# intensity 0.0 to 1.0\nproperty double intensity\nproperty ColorRGBA color\nend\n\n";
    return s;
    }
    public override string GetServiceName() {return "com.robotraconteur.lighting";}
    public LightInfo_stub LightInfo_stubentry;
    public com__robotraconteur__lightingFactory()
{
    LightInfo_stubentry=new LightInfo_stub(this);
    }
    public override IStructureStub FindStructureStub(string objecttype)
    {
    if (objecttype=="LightInfo")    return LightInfo_stubentry;
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public override IPodStub FindPodStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override INamedArrayStub FindNamedArrayStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override ServiceStub CreateStub(WrappedServiceStub innerstub) {
    string objecttype=innerstub.RR_objecttype.GetServiceDefinition().Name + "." + innerstub.RR_objecttype.Name;    string objshort;
    if (CompareNamespace(objecttype, out objshort)) {
    switch (objshort) {
    case "Light":
    return new Light_stub(innerstub);
    case "DimmableLight":
    return new DimmableLight_stub(innerstub);
    case "ColorTunableLight":
    return new ColorTunableLight_stub(innerstub);
    default:
    break;
    }
    } else {
    string ext_service_type=RobotRaconteurNode.SplitQualifiedName(objecttype).Item1;
    return RobotRaconteurNode.s.GetServiceType(ext_service_type).CreateStub(innerstub);
    }
    throw new ServiceException("Could not create stub");
    }
    public override ServiceSkel CreateSkel(object obj) {
    string objtype = RobotRaconteurNode.GetTypeString(ServiceSkelUtil.FindParentInterface(obj.GetType()));
    string objshort;
    if (CompareNamespace(objtype, out objshort)) {
    switch(objshort) {
    case "Light":
    return new Light_skel((Light)obj);
    case "DimmableLight":
    return new DimmableLight_skel((DimmableLight)obj);
    case "ColorTunableLight":
    return new ColorTunableLight_skel((ColorTunableLight)obj);
    default:
    break;
    }
    } else {
    string ext_service_type=RobotRaconteurNode.SplitQualifiedName(objtype).Item1;
    return RobotRaconteurNode.s.GetServiceFactory(ext_service_type).CreateSkel(obj);
    }
    throw new ServiceException("Could not create skel");
    }
    public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp){
    if (rr_exp==null) return rr_exp;
    string rr_type=rr_exp.Error;
    if (!rr_type.Contains(".")) return rr_exp;
    string rr_stype;
    if (CompareNamespace(rr_type, out rr_stype)) {
    } else {
    return RobotRaconteurNode.s.DownCastException(rr_exp); 
    }
    return rr_exp;
    }
}

public class LightInfo_stub : IStructureStub {
    public LightInfo_stub(com__robotraconteur__lightingFactory d) {def=d;}
    private com__robotraconteur__lightingFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    LightInfo s = (LightInfo)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("device_info",s.device_info));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<double>("max_lumens",s.max_lumens));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackMapType<string,object>("extended",s.extended));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.lighting.LightInfo",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    LightInfo s=new LightInfo();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.device_info =MessageElementUtil.UnpackStructure<com.robotraconteur.device.DeviceInfo>(MessageElement.FindElement(mm,"device_info"));
    s.max_lumens =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(mm,"max_lumens")));
    s.extended =MessageElementUtil.UnpackMap<string,object>(MessageElement.FindElement(mm,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public interface async_Light
{
    Task<com.robotraconteur.device.DeviceInfo> async_get_device_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<LightInfo> async_get_light_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<bool> async_get_on_off(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_on_off(bool value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
}
public class Light_stub : ServiceStub , Light, async_Light{
    public Light_stub(WrappedServiceStub innerstub) : base(innerstub) {
    }
    public com.robotraconteur.device.DeviceInfo device_info {
    get {
    return MessageElementUtil.UnpackStructure<com.robotraconteur.device.DeviceInfo>(rr_innerstub.PropertyGet("device_info"));
    }
    }
    public LightInfo light_info {
    get {
    return MessageElementUtil.UnpackStructure<LightInfo>(rr_innerstub.PropertyGet("light_info"));
    }
    }
    public bool on_off {
    get {
    return (MessageElementUtil.UnpackScalar<bool>(rr_innerstub.PropertyGet("on_off")));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackScalar<bool>("value",value))
    {
    rr_innerstub.PropertySet("on_off", m);
    }
    }
    }
    public override void DispatchEvent(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    }
    public override MessageElement CallbackCall(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public virtual async Task<com.robotraconteur.device.DeviceInfo> async_get_device_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("device_info",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<com.robotraconteur.device.DeviceInfo>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<LightInfo> async_get_light_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("light_info",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<LightInfo>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<bool> async_get_on_off(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("on_off",rr_timeout)) {
    var rr_ret=(MessageElementUtil.UnpackScalar<bool>(rr_value));
    return rr_ret;
    } }
    public virtual async Task async_set_on_off(bool value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackScalar<bool>("value",value))
    {
    await rr_async_PropertySet("on_off",mm,rr_timeout);
    }
    }
}
public interface async_DimmableLight : async_Light
{
    Task<com.robotraconteur.device.DeviceInfo> async_get_device_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<LightInfo> async_get_light_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<bool> async_get_on_off(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_on_off(bool value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<double> async_get_intensity(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_intensity(double value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
}
public class DimmableLight_stub : ServiceStub , DimmableLight, async_DimmableLight{
    public DimmableLight_stub(WrappedServiceStub innerstub) : base(innerstub) {
    }
    public com.robotraconteur.device.DeviceInfo device_info {
    get {
    return MessageElementUtil.UnpackStructure<com.robotraconteur.device.DeviceInfo>(rr_innerstub.PropertyGet("device_info"));
    }
    }
    public LightInfo light_info {
    get {
    return MessageElementUtil.UnpackStructure<LightInfo>(rr_innerstub.PropertyGet("light_info"));
    }
    }
    public bool on_off {
    get {
    return (MessageElementUtil.UnpackScalar<bool>(rr_innerstub.PropertyGet("on_off")));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackScalar<bool>("value",value))
    {
    rr_innerstub.PropertySet("on_off", m);
    }
    }
    }
    public double intensity {
    get {
    return (MessageElementUtil.UnpackScalar<double>(rr_innerstub.PropertyGet("intensity")));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackScalar<double>("value",value))
    {
    rr_innerstub.PropertySet("intensity", m);
    }
    }
    }
    public override void DispatchEvent(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    }
    public override MessageElement CallbackCall(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public virtual async Task<com.robotraconteur.device.DeviceInfo> async_get_device_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("device_info",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<com.robotraconteur.device.DeviceInfo>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<LightInfo> async_get_light_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("light_info",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<LightInfo>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<bool> async_get_on_off(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("on_off",rr_timeout)) {
    var rr_ret=(MessageElementUtil.UnpackScalar<bool>(rr_value));
    return rr_ret;
    } }
    public virtual async Task async_set_on_off(bool value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackScalar<bool>("value",value))
    {
    await rr_async_PropertySet("on_off",mm,rr_timeout);
    }
    }
    public virtual async Task<double> async_get_intensity(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("intensity",rr_timeout)) {
    var rr_ret=(MessageElementUtil.UnpackScalar<double>(rr_value));
    return rr_ret;
    } }
    public virtual async Task async_set_intensity(double value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackScalar<double>("value",value))
    {
    await rr_async_PropertySet("intensity",mm,rr_timeout);
    }
    }
}
public interface async_ColorTunableLight : async_Light, async_DimmableLight
{
    Task<com.robotraconteur.device.DeviceInfo> async_get_device_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<LightInfo> async_get_light_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<bool> async_get_on_off(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_on_off(bool value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<double> async_get_intensity(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_intensity(double value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<com.robotraconteur.color.ColorRGBA> async_get_color(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_color(com.robotraconteur.color.ColorRGBA value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
}
public class ColorTunableLight_stub : ServiceStub , ColorTunableLight, async_ColorTunableLight{
    public ColorTunableLight_stub(WrappedServiceStub innerstub) : base(innerstub) {
    }
    public com.robotraconteur.device.DeviceInfo device_info {
    get {
    return MessageElementUtil.UnpackStructure<com.robotraconteur.device.DeviceInfo>(rr_innerstub.PropertyGet("device_info"));
    }
    }
    public LightInfo light_info {
    get {
    return MessageElementUtil.UnpackStructure<LightInfo>(rr_innerstub.PropertyGet("light_info"));
    }
    }
    public bool on_off {
    get {
    return (MessageElementUtil.UnpackScalar<bool>(rr_innerstub.PropertyGet("on_off")));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackScalar<bool>("value",value))
    {
    rr_innerstub.PropertySet("on_off", m);
    }
    }
    }
    public double intensity {
    get {
    return (MessageElementUtil.UnpackScalar<double>(rr_innerstub.PropertyGet("intensity")));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackScalar<double>("value",value))
    {
    rr_innerstub.PropertySet("intensity", m);
    }
    }
    }
    public com.robotraconteur.color.ColorRGBA color {
    get {
    return MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.color.ColorRGBA>(rr_innerstub.PropertyGet("color"));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.color.ColorRGBA>("value",ref value))
    {
    rr_innerstub.PropertySet("color", m);
    }
    }
    }
    public override void DispatchEvent(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    }
    public override MessageElement CallbackCall(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public virtual async Task<com.robotraconteur.device.DeviceInfo> async_get_device_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("device_info",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<com.robotraconteur.device.DeviceInfo>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<LightInfo> async_get_light_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("light_info",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<LightInfo>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<bool> async_get_on_off(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("on_off",rr_timeout)) {
    var rr_ret=(MessageElementUtil.UnpackScalar<bool>(rr_value));
    return rr_ret;
    } }
    public virtual async Task async_set_on_off(bool value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackScalar<bool>("value",value))
    {
    await rr_async_PropertySet("on_off",mm,rr_timeout);
    }
    }
    public virtual async Task<double> async_get_intensity(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("intensity",rr_timeout)) {
    var rr_ret=(MessageElementUtil.UnpackScalar<double>(rr_value));
    return rr_ret;
    } }
    public virtual async Task async_set_intensity(double value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackScalar<double>("value",value))
    {
    await rr_async_PropertySet("intensity",mm,rr_timeout);
    }
    }
    public virtual async Task<com.robotraconteur.color.ColorRGBA> async_get_color(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("color",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.color.ColorRGBA>(rr_value);
    return rr_ret;
    } }
    public virtual async Task async_set_color(com.robotraconteur.color.ColorRGBA value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.color.ColorRGBA>("value",ref value))
    {
    await rr_async_PropertySet("color",mm,rr_timeout);
    }
    }
}
public class Light_skel : ServiceSkel {
    protected Light obj;
    protected async_Light async_obj;
    public Light_skel(object o) : base(o)    {
    obj=(Light)o;
    async_obj = o as async_Light;
    }
    public override void ReleaseCastObject() { 
    obj=null;
    async_obj=null;
    base.ReleaseCastObject();
    }
    public override MessageElement CallGetProperty(string membername, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    case "device_info":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_device_info().ContinueWith(t => async_adapter.EndTask<com.robotraconteur.device.DeviceInfo>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    com.robotraconteur.device.DeviceInfo ret=obj.device_info;
    return MessageElementUtil.PackStructure("return",ret);
    }
    case "light_info":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_light_info().ContinueWith(t => async_adapter.EndTask<LightInfo>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    LightInfo ret=obj.light_info;
    return MessageElementUtil.PackStructure("return",ret);
    }
    case "on_off":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_on_off().ContinueWith(t => async_adapter.EndTask<bool>(t,async_ret => MessageElementUtil.PackScalar<bool>("return",async_ret)));
    return null;
    }
    bool ret=obj.on_off;
    return MessageElementUtil.PackScalar<bool>("return",ret);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void CallSetProperty(string membername, MessageElement m, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    case "on_off":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_on_off((MessageElementUtil.UnpackScalar<bool>(m))).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.on_off=(MessageElementUtil.UnpackScalar<bool>(m));
    return;
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override MessageElement CallFunction(string rr_membername, vectorptr_messageelement rr_m, WrappedServiceSkelAsyncAdapter rr_async_adapter) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override object GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(Light)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(Light)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void InitPipeServers(object rrobj1) {
    obj=(Light)rrobj1;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(Light)rrobj1;
    }
    public override void InitWireServers(object rrobj1) {
    obj=(Light)rrobj1;
    }
    public override WrappedArrayMemoryDirector GetArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedMultiDimArrayMemoryDirector GetMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodArrayMemoryDirector GetPodArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodMultiDimArrayMemoryDirector GetPodMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedArrayMemoryDirector GetNamedArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedMultiDimArrayMemoryDirector GetNamedMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override string RRType { get { return "com.robotraconteur.lighting.Light"; } }
}
public class DimmableLight_skel : ServiceSkel {
    protected DimmableLight obj;
    protected async_DimmableLight async_obj;
    public DimmableLight_skel(object o) : base(o)    {
    obj=(DimmableLight)o;
    async_obj = o as async_DimmableLight;
    }
    public override void ReleaseCastObject() { 
    obj=null;
    async_obj=null;
    base.ReleaseCastObject();
    }
    public override MessageElement CallGetProperty(string membername, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    case "device_info":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_device_info().ContinueWith(t => async_adapter.EndTask<com.robotraconteur.device.DeviceInfo>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    com.robotraconteur.device.DeviceInfo ret=obj.device_info;
    return MessageElementUtil.PackStructure("return",ret);
    }
    case "light_info":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_light_info().ContinueWith(t => async_adapter.EndTask<LightInfo>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    LightInfo ret=obj.light_info;
    return MessageElementUtil.PackStructure("return",ret);
    }
    case "on_off":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_on_off().ContinueWith(t => async_adapter.EndTask<bool>(t,async_ret => MessageElementUtil.PackScalar<bool>("return",async_ret)));
    return null;
    }
    bool ret=obj.on_off;
    return MessageElementUtil.PackScalar<bool>("return",ret);
    }
    case "intensity":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_intensity().ContinueWith(t => async_adapter.EndTask<double>(t,async_ret => MessageElementUtil.PackScalar<double>("return",async_ret)));
    return null;
    }
    double ret=obj.intensity;
    return MessageElementUtil.PackScalar<double>("return",ret);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void CallSetProperty(string membername, MessageElement m, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    case "on_off":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_on_off((MessageElementUtil.UnpackScalar<bool>(m))).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.on_off=(MessageElementUtil.UnpackScalar<bool>(m));
    return;
    }
    case "intensity":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_intensity((MessageElementUtil.UnpackScalar<double>(m))).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.intensity=(MessageElementUtil.UnpackScalar<double>(m));
    return;
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override MessageElement CallFunction(string rr_membername, vectorptr_messageelement rr_m, WrappedServiceSkelAsyncAdapter rr_async_adapter) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override object GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(DimmableLight)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(DimmableLight)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void InitPipeServers(object rrobj1) {
    obj=(DimmableLight)rrobj1;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(DimmableLight)rrobj1;
    }
    public override void InitWireServers(object rrobj1) {
    obj=(DimmableLight)rrobj1;
    }
    public override WrappedArrayMemoryDirector GetArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedMultiDimArrayMemoryDirector GetMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodArrayMemoryDirector GetPodArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodMultiDimArrayMemoryDirector GetPodMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedArrayMemoryDirector GetNamedArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedMultiDimArrayMemoryDirector GetNamedMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override string RRType { get { return "com.robotraconteur.lighting.DimmableLight"; } }
}
public class ColorTunableLight_skel : ServiceSkel {
    protected ColorTunableLight obj;
    protected async_ColorTunableLight async_obj;
    public ColorTunableLight_skel(object o) : base(o)    {
    obj=(ColorTunableLight)o;
    async_obj = o as async_ColorTunableLight;
    }
    public override void ReleaseCastObject() { 
    obj=null;
    async_obj=null;
    base.ReleaseCastObject();
    }
    public override MessageElement CallGetProperty(string membername, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    case "device_info":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_device_info().ContinueWith(t => async_adapter.EndTask<com.robotraconteur.device.DeviceInfo>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    com.robotraconteur.device.DeviceInfo ret=obj.device_info;
    return MessageElementUtil.PackStructure("return",ret);
    }
    case "light_info":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_light_info().ContinueWith(t => async_adapter.EndTask<LightInfo>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    LightInfo ret=obj.light_info;
    return MessageElementUtil.PackStructure("return",ret);
    }
    case "on_off":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_on_off().ContinueWith(t => async_adapter.EndTask<bool>(t,async_ret => MessageElementUtil.PackScalar<bool>("return",async_ret)));
    return null;
    }
    bool ret=obj.on_off;
    return MessageElementUtil.PackScalar<bool>("return",ret);
    }
    case "intensity":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_intensity().ContinueWith(t => async_adapter.EndTask<double>(t,async_ret => MessageElementUtil.PackScalar<double>("return",async_ret)));
    return null;
    }
    double ret=obj.intensity;
    return MessageElementUtil.PackScalar<double>("return",ret);
    }
    case "color":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_color().ContinueWith(t => async_adapter.EndTask<com.robotraconteur.color.ColorRGBA>(t,async_ret => MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.color.ColorRGBA>("return",ref async_ret)));
    return null;
    }
    com.robotraconteur.color.ColorRGBA ret=obj.color;
    return MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.color.ColorRGBA>("return",ref ret);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void CallSetProperty(string membername, MessageElement m, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    case "on_off":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_on_off((MessageElementUtil.UnpackScalar<bool>(m))).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.on_off=(MessageElementUtil.UnpackScalar<bool>(m));
    return;
    }
    case "intensity":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_intensity((MessageElementUtil.UnpackScalar<double>(m))).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.intensity=(MessageElementUtil.UnpackScalar<double>(m));
    return;
    }
    case "color":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_color(MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.color.ColorRGBA>(m)).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.color=MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.color.ColorRGBA>(m);
    return;
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override MessageElement CallFunction(string rr_membername, vectorptr_messageelement rr_m, WrappedServiceSkelAsyncAdapter rr_async_adapter) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override object GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(ColorTunableLight)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(ColorTunableLight)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void InitPipeServers(object rrobj1) {
    obj=(ColorTunableLight)rrobj1;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(ColorTunableLight)rrobj1;
    }
    public override void InitWireServers(object rrobj1) {
    obj=(ColorTunableLight)rrobj1;
    }
    public override WrappedArrayMemoryDirector GetArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedMultiDimArrayMemoryDirector GetMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodArrayMemoryDirector GetPodArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodMultiDimArrayMemoryDirector GetPodMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedArrayMemoryDirector GetNamedArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedMultiDimArrayMemoryDirector GetNamedMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override string RRType { get { return "com.robotraconteur.lighting.ColorTunableLight"; } }
}
public class Light_default_impl : Light{
    public virtual com.robotraconteur.device.DeviceInfo device_info {get; set;} = default(com.robotraconteur.device.DeviceInfo);
    public virtual LightInfo light_info {get; set;} = default(LightInfo);
    public virtual bool on_off {get; set;} = default(bool);
}
public class DimmableLight_default_impl : DimmableLight{
    public virtual com.robotraconteur.device.DeviceInfo device_info {get; set;} = default(com.robotraconteur.device.DeviceInfo);
    public virtual LightInfo light_info {get; set;} = default(LightInfo);
    public virtual bool on_off {get; set;} = default(bool);
    public virtual double intensity {get; set;} = default(double);
}
public class ColorTunableLight_default_impl : ColorTunableLight{
    public virtual com.robotraconteur.device.DeviceInfo device_info {get; set;} = default(com.robotraconteur.device.DeviceInfo);
    public virtual LightInfo light_info {get; set;} = default(LightInfo);
    public virtual bool on_off {get; set;} = default(bool);
    public virtual double intensity {get; set;} = default(double);
    public virtual com.robotraconteur.color.ColorRGBA color {get; set;} = default(com.robotraconteur.color.ColorRGBA);
}
public static class RRExtensions{
}
}
namespace com.robotraconteur.objectrecognition
{
public class ObjectRecognitionTemplate
{
    public com.robotraconteur.identifier.Identifier object_identifier;
    public com.robotraconteur.device.DeviceClass object_class;
    public com.robotraconteur.geometry.shapes.ShapeObject object_shape;
    public List<com.robotraconteur.fiducial.Fiducial> object_fiducials;
    public Dictionary<string,object> extended;
}

public class RecognizedObject
{
    public com.robotraconteur.identifier.Identifier recognized_object;
    public com.robotraconteur.device.DeviceClass recognized_object_class;
    public com.robotraconteur.geometry.NamedPoseWithCovariance pose;
    public double confidence;
    public Dictionary<string,object> extended;
}

public class RecognizedObjects
{
    public List<RecognizedObject> recognized_objects;
    public object source_data;
    public Dictionary<string,object> extended;
}

public class ObjectRecognitionSensorInfo
{
    public com.robotraconteur.device.DeviceInfo device_info;
    public com.robotraconteur.geometry.BoundingBox range;
    public com.robotraconteur.geometry.Vector3 resolution;
    public List<com.robotraconteur.param.ParameterInfo> param_info;
    public List<com.robotraconteur.identifier.Identifier> object_template_identifiers;
    public List<com.robotraconteur.device.DeviceClass> object_template_classes;
    public Dictionary<string,object> extended;
}

public class ObjectRecognitionSensorData
{
    public com.robotraconteur.sensordata.SensorDataHeader sensor_data;
    public RecognizedObjects recognized_objects;
}

[RobotRaconteurServiceObjectInterface()]
public interface ObjectRecognitionSensor : com.robotraconteur.device.Device, com.robotraconteur.device.clock.DeviceClock, com.robotraconteur.device.isoch.IsochDevice
{
    com.robotraconteur.device.DeviceInfo device_info { get; 	}
    ObjectRecognitionSensorInfo object_recognition_sensor_info { get; 	}
    com.robotraconteur.device.isoch.IsochInfo isoch_info { get; 	}
    uint isoch_downsample { get;  set; 	}
    RecognizedObjects capture_recognized_objects();
    object getf_param(string param_name);
    void setf_param(string param_name, object value_);
    ObjectRecognitionTemplate getf_object_template(com.robotraconteur.identifier.Identifier object_identifier);
    ObjectRecognitionTemplate getf_object_class_template(com.robotraconteur.identifier.Identifier object_class);
    Pipe<ObjectRecognitionSensorData> object_recognition_sensor_data{ get; set; }
    Wire<com.robotraconteur.device.clock.DeviceTime> device_clock_now{ get; set; }
}

}
namespace com.robotraconteur.objectrecognition
{
public class com__robotraconteur__objectrecognitionFactory : ServiceFactory
{
    public override string DefString()
{
    const string s="service com.robotraconteur.objectrecognition\n\nstdver 0.10\n\nimport com.robotraconteur.identifier\nimport com.robotraconteur.geometry\nimport com.robotraconteur.geometry.shapes\nimport com.robotraconteur.param\nimport com.robotraconteur.device\nimport com.robotraconteur.device.isoch\nimport com.robotraconteur.sensordata\nimport com.robotraconteur.device.clock\nimport com.robotraconteur.fiducial\n\nusing com.robotraconteur.identifier.Identifier\nusing com.robotraconteur.device.Device\nusing com.robotraconteur.device.DeviceInfo\nusing com.robotraconteur.device.DeviceClass\nusing com.robotraconteur.device.isoch.IsochDevice\nusing com.robotraconteur.device.isoch.IsochInfo\nusing com.robotraconteur.param.ParameterInfo\nusing com.robotraconteur.geometry.shapes.ShapeObject\nusing com.robotraconteur.geometry.NamedPoseWithCovariance\nusing com.robotraconteur.geometry.BoundingBox\nusing com.robotraconteur.geometry.Vector3\nusing com.robotraconteur.sensordata.SensorDataHeader\nusing com.robotraconteur.device.clock.DeviceClock\nusing com.robotraconteur.device.clock.DeviceTime\nusing com.robotraconteur.fiducial.Fiducial\n\nstruct ObjectRecognitionTemplate\nfield Identifier object_identifier\nfield DeviceClass object_class\nfield ShapeObject object_shape\nfield Fiducial{list} object_fiducials\nfield varvalue{string} extended\nend\n\nstruct RecognizedObject\nfield Identifier recognized_object\nfield DeviceClass recognized_object_class\nfield NamedPoseWithCovariance pose\nfield double confidence\nfield varvalue{string} extended\nend\n\nstruct RecognizedObjects\nfield RecognizedObject{list} recognized_objects\nfield varvalue source_data\nfield varvalue{string} extended\nend\n\nstruct ObjectRecognitionSensorInfo\nfield DeviceInfo device_info\nfield BoundingBox range\nfield Vector3 resolution\nfield ParameterInfo{list} param_info\nfield Identifier{list} object_template_identifiers\nfield DeviceClass{list} object_template_classes\nfield varvalue{string} extended\nend\n\nstruct ObjectRecognitionSensorData\nfield SensorDataHeader sensor_data\nfield RecognizedObjects recognized_objects\nend\n\nobject ObjectRecognitionSensor\nimplements Device\nimplements DeviceClock\nimplements IsochDevice\nproperty DeviceInfo device_info [readonly,nolock]\nproperty ObjectRecognitionSensorInfo object_recognition_sensor_info [readonly,nolock]\nfunction RecognizedObjects capture_recognized_objects()\npipe ObjectRecognitionSensorData object_recognition_sensor_data [readonly]\nfunction varvalue getf_param(string param_name)\nfunction void setf_param(string param_name, varvalue value)\nfunction ObjectRecognitionTemplate getf_object_template(Identifier object_identifier)\nfunction ObjectRecognitionTemplate getf_object_class_template(Identifier object_class)\nproperty IsochInfo isoch_info [readonly,nolock]\nproperty uint32 isoch_downsample [perclient]\nwire DeviceTime device_clock_now [readonly,nolock]\nend\n\n";
    return s;
    }
    public override string GetServiceName() {return "com.robotraconteur.objectrecognition";}
    public ObjectRecognitionTemplate_stub ObjectRecognitionTemplate_stubentry;
    public RecognizedObject_stub RecognizedObject_stubentry;
    public RecognizedObjects_stub RecognizedObjects_stubentry;
    public ObjectRecognitionSensorInfo_stub ObjectRecognitionSensorInfo_stubentry;
    public ObjectRecognitionSensorData_stub ObjectRecognitionSensorData_stubentry;
    public com__robotraconteur__objectrecognitionFactory()
{
    ObjectRecognitionTemplate_stubentry=new ObjectRecognitionTemplate_stub(this);
    RecognizedObject_stubentry=new RecognizedObject_stub(this);
    RecognizedObjects_stubentry=new RecognizedObjects_stub(this);
    ObjectRecognitionSensorInfo_stubentry=new ObjectRecognitionSensorInfo_stub(this);
    ObjectRecognitionSensorData_stubentry=new ObjectRecognitionSensorData_stub(this);
    }
    public override IStructureStub FindStructureStub(string objecttype)
    {
    if (objecttype=="ObjectRecognitionTemplate")    return ObjectRecognitionTemplate_stubentry;
    if (objecttype=="RecognizedObject")    return RecognizedObject_stubentry;
    if (objecttype=="RecognizedObjects")    return RecognizedObjects_stubentry;
    if (objecttype=="ObjectRecognitionSensorInfo")    return ObjectRecognitionSensorInfo_stubentry;
    if (objecttype=="ObjectRecognitionSensorData")    return ObjectRecognitionSensorData_stubentry;
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public override IPodStub FindPodStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override INamedArrayStub FindNamedArrayStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override ServiceStub CreateStub(WrappedServiceStub innerstub) {
    string objecttype=innerstub.RR_objecttype.GetServiceDefinition().Name + "." + innerstub.RR_objecttype.Name;    string objshort;
    if (CompareNamespace(objecttype, out objshort)) {
    switch (objshort) {
    case "ObjectRecognitionSensor":
    return new ObjectRecognitionSensor_stub(innerstub);
    default:
    break;
    }
    } else {
    string ext_service_type=RobotRaconteurNode.SplitQualifiedName(objecttype).Item1;
    return RobotRaconteurNode.s.GetServiceType(ext_service_type).CreateStub(innerstub);
    }
    throw new ServiceException("Could not create stub");
    }
    public override ServiceSkel CreateSkel(object obj) {
    string objtype = RobotRaconteurNode.GetTypeString(ServiceSkelUtil.FindParentInterface(obj.GetType()));
    string objshort;
    if (CompareNamespace(objtype, out objshort)) {
    switch(objshort) {
    case "ObjectRecognitionSensor":
    return new ObjectRecognitionSensor_skel((ObjectRecognitionSensor)obj);
    default:
    break;
    }
    } else {
    string ext_service_type=RobotRaconteurNode.SplitQualifiedName(objtype).Item1;
    return RobotRaconteurNode.s.GetServiceFactory(ext_service_type).CreateSkel(obj);
    }
    throw new ServiceException("Could not create skel");
    }
    public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp){
    if (rr_exp==null) return rr_exp;
    string rr_type=rr_exp.Error;
    if (!rr_type.Contains(".")) return rr_exp;
    string rr_stype;
    if (CompareNamespace(rr_type, out rr_stype)) {
    } else {
    return RobotRaconteurNode.s.DownCastException(rr_exp); 
    }
    return rr_exp;
    }
}

public class ObjectRecognitionTemplate_stub : IStructureStub {
    public ObjectRecognitionTemplate_stub(com__robotraconteur__objectrecognitionFactory d) {def=d;}
    private com__robotraconteur__objectrecognitionFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    ObjectRecognitionTemplate s = (ObjectRecognitionTemplate)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("object_identifier",s.object_identifier));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("object_class",s.object_class));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("object_shape",s.object_shape));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackListType<com.robotraconteur.fiducial.Fiducial>("object_fiducials",s.object_fiducials));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackMapType<string,object>("extended",s.extended));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.objectrecognition.ObjectRecognitionTemplate",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    ObjectRecognitionTemplate s=new ObjectRecognitionTemplate();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.object_identifier =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(MessageElement.FindElement(mm,"object_identifier"));
    s.object_class =MessageElementUtil.UnpackStructure<com.robotraconteur.device.DeviceClass>(MessageElement.FindElement(mm,"object_class"));
    s.object_shape =MessageElementUtil.UnpackStructure<com.robotraconteur.geometry.shapes.ShapeObject>(MessageElement.FindElement(mm,"object_shape"));
    s.object_fiducials =MessageElementUtil.UnpackList<com.robotraconteur.fiducial.Fiducial>(MessageElement.FindElement(mm,"object_fiducials"));
    s.extended =MessageElementUtil.UnpackMap<string,object>(MessageElement.FindElement(mm,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class RecognizedObject_stub : IStructureStub {
    public RecognizedObject_stub(com__robotraconteur__objectrecognitionFactory d) {def=d;}
    private com__robotraconteur__objectrecognitionFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    RecognizedObject s = (RecognizedObject)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("recognized_object",s.recognized_object));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("recognized_object_class",s.recognized_object_class));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("pose",s.pose));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<double>("confidence",s.confidence));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackMapType<string,object>("extended",s.extended));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.objectrecognition.RecognizedObject",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    RecognizedObject s=new RecognizedObject();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.recognized_object =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(MessageElement.FindElement(mm,"recognized_object"));
    s.recognized_object_class =MessageElementUtil.UnpackStructure<com.robotraconteur.device.DeviceClass>(MessageElement.FindElement(mm,"recognized_object_class"));
    s.pose =MessageElementUtil.UnpackStructure<com.robotraconteur.geometry.NamedPoseWithCovariance>(MessageElement.FindElement(mm,"pose"));
    s.confidence =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(mm,"confidence")));
    s.extended =MessageElementUtil.UnpackMap<string,object>(MessageElement.FindElement(mm,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class RecognizedObjects_stub : IStructureStub {
    public RecognizedObjects_stub(com__robotraconteur__objectrecognitionFactory d) {def=d;}
    private com__robotraconteur__objectrecognitionFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    RecognizedObjects s = (RecognizedObjects)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackListType<RecognizedObject>("recognized_objects",s.recognized_objects));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackVarType("source_data",s.source_data));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackMapType<string,object>("extended",s.extended));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.objectrecognition.RecognizedObjects",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    RecognizedObjects s=new RecognizedObjects();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.recognized_objects =MessageElementUtil.UnpackList<RecognizedObject>(MessageElement.FindElement(mm,"recognized_objects"));
    s.source_data =MessageElementUtil.UnpackVarType(MessageElement.FindElement(mm,"source_data"));
    s.extended =MessageElementUtil.UnpackMap<string,object>(MessageElement.FindElement(mm,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class ObjectRecognitionSensorInfo_stub : IStructureStub {
    public ObjectRecognitionSensorInfo_stub(com__robotraconteur__objectrecognitionFactory d) {def=d;}
    private com__robotraconteur__objectrecognitionFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    ObjectRecognitionSensorInfo s = (ObjectRecognitionSensorInfo)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("device_info",s.device_info));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("range",s.range));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Vector3>("resolution",ref s.resolution));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackListType<com.robotraconteur.param.ParameterInfo>("param_info",s.param_info));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackListType<com.robotraconteur.identifier.Identifier>("object_template_identifiers",s.object_template_identifiers));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackListType<com.robotraconteur.device.DeviceClass>("object_template_classes",s.object_template_classes));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackMapType<string,object>("extended",s.extended));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.objectrecognition.ObjectRecognitionSensorInfo",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    ObjectRecognitionSensorInfo s=new ObjectRecognitionSensorInfo();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.device_info =MessageElementUtil.UnpackStructure<com.robotraconteur.device.DeviceInfo>(MessageElement.FindElement(mm,"device_info"));
    s.range =MessageElementUtil.UnpackStructure<com.robotraconteur.geometry.BoundingBox>(MessageElement.FindElement(mm,"range"));
    s.resolution =MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.Vector3>(MessageElement.FindElement(mm,"resolution"));
    s.param_info =MessageElementUtil.UnpackList<com.robotraconteur.param.ParameterInfo>(MessageElement.FindElement(mm,"param_info"));
    s.object_template_identifiers =MessageElementUtil.UnpackList<com.robotraconteur.identifier.Identifier>(MessageElement.FindElement(mm,"object_template_identifiers"));
    s.object_template_classes =MessageElementUtil.UnpackList<com.robotraconteur.device.DeviceClass>(MessageElement.FindElement(mm,"object_template_classes"));
    s.extended =MessageElementUtil.UnpackMap<string,object>(MessageElement.FindElement(mm,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class ObjectRecognitionSensorData_stub : IStructureStub {
    public ObjectRecognitionSensorData_stub(com__robotraconteur__objectrecognitionFactory d) {def=d;}
    private com__robotraconteur__objectrecognitionFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    ObjectRecognitionSensorData s = (ObjectRecognitionSensorData)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("sensor_data",s.sensor_data));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("recognized_objects",s.recognized_objects));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.objectrecognition.ObjectRecognitionSensorData",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    ObjectRecognitionSensorData s=new ObjectRecognitionSensorData();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.sensor_data =MessageElementUtil.UnpackStructure<com.robotraconteur.sensordata.SensorDataHeader>(MessageElement.FindElement(mm,"sensor_data"));
    s.recognized_objects =MessageElementUtil.UnpackStructure<RecognizedObjects>(MessageElement.FindElement(mm,"recognized_objects"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public interface async_ObjectRecognitionSensor : com.robotraconteur.device.async_Device, com.robotraconteur.device.clock.async_DeviceClock, com.robotraconteur.device.isoch.async_IsochDevice
{
    Task<com.robotraconteur.device.DeviceInfo> async_get_device_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<ObjectRecognitionSensorInfo> async_get_object_recognition_sensor_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<com.robotraconteur.device.isoch.IsochInfo> async_get_isoch_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<uint> async_get_isoch_downsample(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_isoch_downsample(uint value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<RecognizedObjects> async_capture_recognized_objects(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<object> async_getf_param(string param_name,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_setf_param(string param_name, object value_,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<ObjectRecognitionTemplate> async_getf_object_template(com.robotraconteur.identifier.Identifier object_identifier,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<ObjectRecognitionTemplate> async_getf_object_class_template(com.robotraconteur.identifier.Identifier object_class,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
}
public class ObjectRecognitionSensor_stub : ServiceStub , ObjectRecognitionSensor, async_ObjectRecognitionSensor{
    private Pipe<ObjectRecognitionSensorData> rr_object_recognition_sensor_data;
    private Wire<com.robotraconteur.device.clock.DeviceTime> rr_device_clock_now;
    public ObjectRecognitionSensor_stub(WrappedServiceStub innerstub) : base(innerstub) {
    rr_object_recognition_sensor_data=new Pipe<ObjectRecognitionSensorData>(innerstub.GetPipe("object_recognition_sensor_data"));
    rr_device_clock_now=new Wire<com.robotraconteur.device.clock.DeviceTime>(innerstub.GetWire("device_clock_now"));
    }
    public com.robotraconteur.device.DeviceInfo device_info {
    get {
    return MessageElementUtil.UnpackStructure<com.robotraconteur.device.DeviceInfo>(rr_innerstub.PropertyGet("device_info"));
    }
    }
    public ObjectRecognitionSensorInfo object_recognition_sensor_info {
    get {
    return MessageElementUtil.UnpackStructure<ObjectRecognitionSensorInfo>(rr_innerstub.PropertyGet("object_recognition_sensor_info"));
    }
    }
    public com.robotraconteur.device.isoch.IsochInfo isoch_info {
    get {
    return MessageElementUtil.UnpackStructure<com.robotraconteur.device.isoch.IsochInfo>(rr_innerstub.PropertyGet("isoch_info"));
    }
    }
    public uint isoch_downsample {
    get {
    return (MessageElementUtil.UnpackScalar<uint>(rr_innerstub.PropertyGet("isoch_downsample")));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackScalar<uint>("value",value))
    {
    rr_innerstub.PropertySet("isoch_downsample", m);
    }
    }
    }
    public RecognizedObjects capture_recognized_objects() {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    using(MessageElement rr_me=rr_innerstub.FunctionCall("capture_recognized_objects",rr_param))
    {
    return MessageElementUtil.UnpackStructure<RecognizedObjects>(rr_me);
    }
    }
    }
    public object getf_param(string param_name) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("param_name",param_name));
    using(MessageElement rr_me=rr_innerstub.FunctionCall("getf_param",rr_param))
    {
    return MessageElementUtil.UnpackVarType(rr_me);
    }
    }
    }
    public void setf_param(string param_name, object value_) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("param_name",param_name));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackVarType("value",value_));
    using(MessageElement rr_me=rr_innerstub.FunctionCall("setf_param",rr_param))
    {
    }
    }
    }
    public ObjectRecognitionTemplate getf_object_template(com.robotraconteur.identifier.Identifier object_identifier) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackStructure("object_identifier",object_identifier));
    using(MessageElement rr_me=rr_innerstub.FunctionCall("getf_object_template",rr_param))
    {
    return MessageElementUtil.UnpackStructure<ObjectRecognitionTemplate>(rr_me);
    }
    }
    }
    public ObjectRecognitionTemplate getf_object_class_template(com.robotraconteur.identifier.Identifier object_class) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackStructure("object_class",object_class));
    using(MessageElement rr_me=rr_innerstub.FunctionCall("getf_object_class_template",rr_param))
    {
    return MessageElementUtil.UnpackStructure<ObjectRecognitionTemplate>(rr_me);
    }
    }
    }
    public override void DispatchEvent(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    }
    public Pipe<ObjectRecognitionSensorData> object_recognition_sensor_data {
    get { return rr_object_recognition_sensor_data;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<com.robotraconteur.device.clock.DeviceTime> device_clock_now {
    get { return rr_device_clock_now;  }
    set { throw new InvalidOperationException();}
    }
    public override MessageElement CallbackCall(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public virtual async Task<com.robotraconteur.device.DeviceInfo> async_get_device_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("device_info",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<com.robotraconteur.device.DeviceInfo>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<ObjectRecognitionSensorInfo> async_get_object_recognition_sensor_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("object_recognition_sensor_info",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<ObjectRecognitionSensorInfo>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<com.robotraconteur.device.isoch.IsochInfo> async_get_isoch_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("isoch_info",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<com.robotraconteur.device.isoch.IsochInfo>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<uint> async_get_isoch_downsample(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("isoch_downsample",rr_timeout)) {
    var rr_ret=(MessageElementUtil.UnpackScalar<uint>(rr_value));
    return rr_ret;
    } }
    public virtual async Task async_set_isoch_downsample(uint value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackScalar<uint>("value",value))
    {
    await rr_async_PropertySet("isoch_downsample",mm,rr_timeout);
    }
    }
    public virtual async Task<RecognizedObjects> async_capture_recognized_objects(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    using(var rr_return = await rr_async_FunctionCall("capture_recognized_objects",rr_param,rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<RecognizedObjects>(rr_return);
    return rr_ret;
    } } }
    public virtual async Task<object> async_getf_param(string param_name,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("param_name",param_name));
    using(var rr_return = await rr_async_FunctionCall("getf_param",rr_param,rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackVarType(rr_return);
    return rr_ret;
    } } }
    public virtual async Task async_setf_param(string param_name, object value_,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("param_name",param_name));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackVarType("value",value_));
    using(var rr_return = await rr_async_FunctionCall("setf_param",rr_param,rr_timeout)) {
    } } }
    public virtual async Task<ObjectRecognitionTemplate> async_getf_object_template(com.robotraconteur.identifier.Identifier object_identifier,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackStructure("object_identifier",object_identifier));
    using(var rr_return = await rr_async_FunctionCall("getf_object_template",rr_param,rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<ObjectRecognitionTemplate>(rr_return);
    return rr_ret;
    } } }
    public virtual async Task<ObjectRecognitionTemplate> async_getf_object_class_template(com.robotraconteur.identifier.Identifier object_class,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackStructure("object_class",object_class));
    using(var rr_return = await rr_async_FunctionCall("getf_object_class_template",rr_param,rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<ObjectRecognitionTemplate>(rr_return);
    return rr_ret;
    } } }
}
public class ObjectRecognitionSensor_skel : ServiceSkel {
    protected ObjectRecognitionSensor obj;
    protected async_ObjectRecognitionSensor async_obj;
    public ObjectRecognitionSensor_skel(object o) : base(o)    {
    obj=(ObjectRecognitionSensor)o;
    async_obj = o as async_ObjectRecognitionSensor;
    }
    public override void ReleaseCastObject() { 
    obj=null;
    async_obj=null;
    base.ReleaseCastObject();
    }
    public override MessageElement CallGetProperty(string membername, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    case "device_info":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_device_info().ContinueWith(t => async_adapter.EndTask<com.robotraconteur.device.DeviceInfo>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    com.robotraconteur.device.DeviceInfo ret=obj.device_info;
    return MessageElementUtil.PackStructure("return",ret);
    }
    case "object_recognition_sensor_info":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_object_recognition_sensor_info().ContinueWith(t => async_adapter.EndTask<ObjectRecognitionSensorInfo>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    ObjectRecognitionSensorInfo ret=obj.object_recognition_sensor_info;
    return MessageElementUtil.PackStructure("return",ret);
    }
    case "isoch_info":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_isoch_info().ContinueWith(t => async_adapter.EndTask<com.robotraconteur.device.isoch.IsochInfo>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    com.robotraconteur.device.isoch.IsochInfo ret=obj.isoch_info;
    return MessageElementUtil.PackStructure("return",ret);
    }
    case "isoch_downsample":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_isoch_downsample().ContinueWith(t => async_adapter.EndTask<uint>(t,async_ret => MessageElementUtil.PackScalar<uint>("return",async_ret)));
    return null;
    }
    uint ret=obj.isoch_downsample;
    return MessageElementUtil.PackScalar<uint>("return",ret);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void CallSetProperty(string membername, MessageElement m, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    case "isoch_downsample":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_isoch_downsample((MessageElementUtil.UnpackScalar<uint>(m))).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.isoch_downsample=(MessageElementUtil.UnpackScalar<uint>(m));
    return;
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override MessageElement CallFunction(string rr_membername, vectorptr_messageelement rr_m, WrappedServiceSkelAsyncAdapter rr_async_adapter) {
    switch (rr_membername) {
    case "capture_recognized_objects":
    {
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_capture_recognized_objects().ContinueWith(t => rr_async_adapter.EndTask<RecognizedObjects>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    RecognizedObjects rr_ret=this.obj.capture_recognized_objects();
    return MessageElementUtil.PackStructure("return",rr_ret);
    }
    case "getf_param":
    {
    string param_name=MessageElementUtil.UnpackString(vectorptr_messageelement_util.FindElement(rr_m,"param_name"));
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_getf_param(param_name).ContinueWith(t => rr_async_adapter.EndTask<object>(t,async_ret => MessageElementUtil.PackVarType("return",async_ret)));
    return null;
    }
    object rr_ret=this.obj.getf_param(param_name);
    return MessageElementUtil.PackVarType("return",rr_ret);
    }
    case "setf_param":
    {
    string param_name=MessageElementUtil.UnpackString(vectorptr_messageelement_util.FindElement(rr_m,"param_name"));
    object value_=MessageElementUtil.UnpackVarType(vectorptr_messageelement_util.FindElement(rr_m,"value"));
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_setf_param(param_name, value_).ContinueWith(t => rr_async_adapter.EndTask(t,new MessageElement("return",(int)0)));
    return null;
    }
    this.obj.setf_param(param_name, value_);
    return new MessageElement("return",(int)0);
    }
    case "getf_object_template":
    {
    com.robotraconteur.identifier.Identifier object_identifier=MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(vectorptr_messageelement_util.FindElement(rr_m,"object_identifier"));
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_getf_object_template(object_identifier).ContinueWith(t => rr_async_adapter.EndTask<ObjectRecognitionTemplate>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    ObjectRecognitionTemplate rr_ret=this.obj.getf_object_template(object_identifier);
    return MessageElementUtil.PackStructure("return",rr_ret);
    }
    case "getf_object_class_template":
    {
    com.robotraconteur.identifier.Identifier object_class=MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(vectorptr_messageelement_util.FindElement(rr_m,"object_class"));
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_getf_object_class_template(object_class).ContinueWith(t => rr_async_adapter.EndTask<ObjectRecognitionTemplate>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    ObjectRecognitionTemplate rr_ret=this.obj.getf_object_class_template(object_class);
    return MessageElementUtil.PackStructure("return",rr_ret);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override object GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(ObjectRecognitionSensor)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(ObjectRecognitionSensor)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void InitPipeServers(object rrobj1) {
    obj=(ObjectRecognitionSensor)rrobj1;
    obj.object_recognition_sensor_data=new Pipe<ObjectRecognitionSensorData>(innerskel.GetPipe("object_recognition_sensor_data"));
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(ObjectRecognitionSensor)rrobj1;
    }
    public override void InitWireServers(object rrobj1) {
    obj=(ObjectRecognitionSensor)rrobj1;
    obj.device_clock_now=new Wire<com.robotraconteur.device.clock.DeviceTime>(innerskel.GetWire("device_clock_now"));
    }
    public override WrappedArrayMemoryDirector GetArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedMultiDimArrayMemoryDirector GetMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodArrayMemoryDirector GetPodArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodMultiDimArrayMemoryDirector GetPodMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedArrayMemoryDirector GetNamedArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedMultiDimArrayMemoryDirector GetNamedMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override string RRType { get { return "com.robotraconteur.objectrecognition.ObjectRecognitionSensor"; } }
}
public class ObjectRecognitionSensor_default_impl : ObjectRecognitionSensor{
    protected PipeBroadcaster<ObjectRecognitionSensorData> rrvar_object_recognition_sensor_data;
    protected WireBroadcaster<com.robotraconteur.device.clock.DeviceTime> rrvar_device_clock_now;
    public virtual com.robotraconteur.device.DeviceInfo device_info {get; set;} = default(com.robotraconteur.device.DeviceInfo);
    public virtual ObjectRecognitionSensorInfo object_recognition_sensor_info {get; set;} = default(ObjectRecognitionSensorInfo);
    public virtual com.robotraconteur.device.isoch.IsochInfo isoch_info {get; set;} = default(com.robotraconteur.device.isoch.IsochInfo);
    public virtual uint isoch_downsample {get; set;} = default(uint);
    public virtual RecognizedObjects capture_recognized_objects() {
    throw new NotImplementedException();    }
    public virtual object getf_param(string param_name) {
    throw new NotImplementedException();    }
    public virtual void setf_param(string param_name, object value_) {
    throw new NotImplementedException();    }
    public virtual ObjectRecognitionTemplate getf_object_template(com.robotraconteur.identifier.Identifier object_identifier) {
    throw new NotImplementedException();    }
    public virtual ObjectRecognitionTemplate getf_object_class_template(com.robotraconteur.identifier.Identifier object_class) {
    throw new NotImplementedException();    }
    public virtual Pipe<ObjectRecognitionSensorData> object_recognition_sensor_data {
    get { return rrvar_object_recognition_sensor_data.Pipe;  }
    set {
    if (rrvar_object_recognition_sensor_data!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_object_recognition_sensor_data= new PipeBroadcaster<ObjectRecognitionSensorData>(value);
    }
    }
    public virtual Wire<com.robotraconteur.device.clock.DeviceTime> device_clock_now {
    get { return rrvar_device_clock_now.Wire;  }
    set {
    if (rrvar_device_clock_now!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_device_clock_now= new WireBroadcaster<com.robotraconteur.device.clock.DeviceTime>(value);
    }
    }
}
public static class RRExtensions{
}
}
namespace com.robotraconteur.octree
{
public class OcTreeInfo
{
    public com.robotraconteur.sensordata.SensorDataHeader data_header;
    public OcTreeEncoding encoding;
    public string id;
    public double resolution;
}

public class OcTree
{
    public OcTreeInfo octree_info;
    public byte[] data;
    public Dictionary<string,object> extended;
}

public class OcTreePart
{
    public OcTreeInfo octree_info;
    public uint data_offset;
    public uint data_total_len;
    public byte[] data;
    public Dictionary<string,object> extended;
}

public class OcTreeResource
{
    public com.robotraconteur.resource.ResourceIdentifier octree_resource;
}

public static class com__robotraconteur__octreeConstants 
{
}
    public enum OcTreeEncoding
    {
    unknown = 0,
    octomap_ot = 1,
    octomap_bt = 2,
    other = 3
    };
}
namespace com.robotraconteur.octree
{
public class com__robotraconteur__octreeFactory : ServiceFactory
{
    public override string DefString()
{
    const string s="service com.robotraconteur.octree\n\nstdver 0.10\n\nimport com.robotraconteur.sensordata\nimport com.robotraconteur.identifier\nimport com.robotraconteur.resource\n\nusing com.robotraconteur.sensordata.SensorDataHeader\nusing com.robotraconteur.identifier.Identifier\nusing com.robotraconteur.resource.ResourceIdentifier\n\nenum OcTreeEncoding\nunknown=0,\noctomap_ot,\noctomap_bt,\nother\nend\n\nstruct OcTreeInfo\nfield SensorDataHeader data_header\nfield OcTreeEncoding encoding\nfield string id\nfield double resolution\nend\n\nstruct OcTree\nfield OcTreeInfo octree_info\nfield uint8[] data\nfield varvalue{string} extended\nend\n\nstruct OcTreePart\nfield OcTreeInfo octree_info\nfield uint32 data_offset\nfield uint32 data_total_len\nfield uint8[] data\nfield varvalue{string} extended\nend\n\nstruct OcTreeResource\nfield ResourceIdentifier octree_resource\nend\n\n";
    return s;
    }
    public override string GetServiceName() {return "com.robotraconteur.octree";}
    public OcTreeInfo_stub OcTreeInfo_stubentry;
    public OcTree_stub OcTree_stubentry;
    public OcTreePart_stub OcTreePart_stubentry;
    public OcTreeResource_stub OcTreeResource_stubentry;
    public com__robotraconteur__octreeFactory()
{
    OcTreeInfo_stubentry=new OcTreeInfo_stub(this);
    OcTree_stubentry=new OcTree_stub(this);
    OcTreePart_stubentry=new OcTreePart_stub(this);
    OcTreeResource_stubentry=new OcTreeResource_stub(this);
    }
    public override IStructureStub FindStructureStub(string objecttype)
    {
    if (objecttype=="OcTreeInfo")    return OcTreeInfo_stubentry;
    if (objecttype=="OcTree")    return OcTree_stubentry;
    if (objecttype=="OcTreePart")    return OcTreePart_stubentry;
    if (objecttype=="OcTreeResource")    return OcTreeResource_stubentry;
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public override IPodStub FindPodStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override INamedArrayStub FindNamedArrayStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override ServiceStub CreateStub(WrappedServiceStub innerstub) {
    string objecttype=innerstub.RR_objecttype.GetServiceDefinition().Name + "." + innerstub.RR_objecttype.Name;    string objshort;
    if (CompareNamespace(objecttype, out objshort)) {
    switch (objshort) {
    default:
    break;
    }
    } else {
    string ext_service_type=RobotRaconteurNode.SplitQualifiedName(objecttype).Item1;
    return RobotRaconteurNode.s.GetServiceType(ext_service_type).CreateStub(innerstub);
    }
    throw new ServiceException("Could not create stub");
    }
    public override ServiceSkel CreateSkel(object obj) {
    string objtype = RobotRaconteurNode.GetTypeString(ServiceSkelUtil.FindParentInterface(obj.GetType()));
    string objshort;
    if (CompareNamespace(objtype, out objshort)) {
    switch(objshort) {
    default:
    break;
    }
    } else {
    string ext_service_type=RobotRaconteurNode.SplitQualifiedName(objtype).Item1;
    return RobotRaconteurNode.s.GetServiceFactory(ext_service_type).CreateSkel(obj);
    }
    throw new ServiceException("Could not create skel");
    }
    public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp){
    if (rr_exp==null) return rr_exp;
    string rr_type=rr_exp.Error;
    if (!rr_type.Contains(".")) return rr_exp;
    string rr_stype;
    if (CompareNamespace(rr_type, out rr_stype)) {
    } else {
    return RobotRaconteurNode.s.DownCastException(rr_exp); 
    }
    return rr_exp;
    }
}

public class OcTreeInfo_stub : IStructureStub {
    public OcTreeInfo_stub(com__robotraconteur__octreeFactory d) {def=d;}
    private com__robotraconteur__octreeFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    OcTreeInfo s = (OcTreeInfo)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("data_header",s.data_header));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackEnum<OcTreeEncoding>("encoding",s.encoding));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackString("id",s.id));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<double>("resolution",s.resolution));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.octree.OcTreeInfo",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    OcTreeInfo s=new OcTreeInfo();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.data_header =MessageElementUtil.UnpackStructure<com.robotraconteur.sensordata.SensorDataHeader>(MessageElement.FindElement(mm,"data_header"));
    s.encoding =MessageElementUtil.UnpackEnum<OcTreeEncoding>(MessageElement.FindElement(mm,"encoding"));
    s.id =MessageElementUtil.UnpackString(MessageElement.FindElement(mm,"id"));
    s.resolution =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(mm,"resolution")));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class OcTree_stub : IStructureStub {
    public OcTree_stub(com__robotraconteur__octreeFactory d) {def=d;}
    private com__robotraconteur__octreeFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    OcTree s = (OcTree)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("octree_info",s.octree_info));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackArray<byte>("data",s.data));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackMapType<string,object>("extended",s.extended));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.octree.OcTree",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    OcTree s=new OcTree();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.octree_info =MessageElementUtil.UnpackStructure<OcTreeInfo>(MessageElement.FindElement(mm,"octree_info"));
    s.data =MessageElementUtil.UnpackArray<byte>(MessageElement.FindElement(mm,"data"));
    s.extended =MessageElementUtil.UnpackMap<string,object>(MessageElement.FindElement(mm,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class OcTreePart_stub : IStructureStub {
    public OcTreePart_stub(com__robotraconteur__octreeFactory d) {def=d;}
    private com__robotraconteur__octreeFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    OcTreePart s = (OcTreePart)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("octree_info",s.octree_info));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<uint>("data_offset",s.data_offset));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<uint>("data_total_len",s.data_total_len));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackArray<byte>("data",s.data));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackMapType<string,object>("extended",s.extended));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.octree.OcTreePart",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    OcTreePart s=new OcTreePart();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.octree_info =MessageElementUtil.UnpackStructure<OcTreeInfo>(MessageElement.FindElement(mm,"octree_info"));
    s.data_offset =(MessageElementUtil.UnpackScalar<uint>(MessageElement.FindElement(mm,"data_offset")));
    s.data_total_len =(MessageElementUtil.UnpackScalar<uint>(MessageElement.FindElement(mm,"data_total_len")));
    s.data =MessageElementUtil.UnpackArray<byte>(MessageElement.FindElement(mm,"data"));
    s.extended =MessageElementUtil.UnpackMap<string,object>(MessageElement.FindElement(mm,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class OcTreeResource_stub : IStructureStub {
    public OcTreeResource_stub(com__robotraconteur__octreeFactory d) {def=d;}
    private com__robotraconteur__octreeFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    OcTreeResource s = (OcTreeResource)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("octree_resource",s.octree_resource));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.octree.OcTreeResource",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    OcTreeResource s=new OcTreeResource();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.octree_resource =MessageElementUtil.UnpackStructure<com.robotraconteur.resource.ResourceIdentifier>(MessageElement.FindElement(mm,"octree_resource"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public static class RRExtensions{
}
}
namespace com.robotraconteur.param
{
public class ParameterInfo
{
    public com.robotraconteur.identifier.Identifier parameter_identifier;
    public com.robotraconteur.device.DeviceClass parameter_class;
    public com.robotraconteur.datatype.DataType data_type;
    public List<com.robotraconteur.units.SIUnit> data_units;
    public string description;
    public object default_value;
    public object min_value;
    public object max_value;
    public Dictionary<string,object> enum_values;
    public Dictionary<string,object> extended;
}

}
namespace com.robotraconteur.param
{
public class com__robotraconteur__paramFactory : ServiceFactory
{
    public override string DefString()
{
    const string s="service com.robotraconteur.param\n\nstdver 0.10\n\nimport com.robotraconteur.identifier\nimport com.robotraconteur.datatype\nimport com.robotraconteur.device\nimport com.robotraconteur.units\n\nusing com.robotraconteur.identifier.Identifier\nusing com.robotraconteur.datatype.DataType\nusing com.robotraconteur.device.DeviceClass\nusing com.robotraconteur.units.SIUnit\n\nstruct ParameterInfo\nfield Identifier parameter_identifier\nfield DeviceClass parameter_class\nfield DataType data_type\nfield SIUnit{list} data_units\nfield string description\nfield varvalue default_value\nfield varvalue min_value\nfield varvalue max_value\nfield varvalue{string} enum_values\nfield varvalue{string} extended\nend\n\n";
    return s;
    }
    public override string GetServiceName() {return "com.robotraconteur.param";}
    public ParameterInfo_stub ParameterInfo_stubentry;
    public com__robotraconteur__paramFactory()
{
    ParameterInfo_stubentry=new ParameterInfo_stub(this);
    }
    public override IStructureStub FindStructureStub(string objecttype)
    {
    if (objecttype=="ParameterInfo")    return ParameterInfo_stubentry;
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public override IPodStub FindPodStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override INamedArrayStub FindNamedArrayStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override ServiceStub CreateStub(WrappedServiceStub innerstub) {
    string objecttype=innerstub.RR_objecttype.GetServiceDefinition().Name + "." + innerstub.RR_objecttype.Name;    string objshort;
    if (CompareNamespace(objecttype, out objshort)) {
    switch (objshort) {
    default:
    break;
    }
    } else {
    string ext_service_type=RobotRaconteurNode.SplitQualifiedName(objecttype).Item1;
    return RobotRaconteurNode.s.GetServiceType(ext_service_type).CreateStub(innerstub);
    }
    throw new ServiceException("Could not create stub");
    }
    public override ServiceSkel CreateSkel(object obj) {
    string objtype = RobotRaconteurNode.GetTypeString(ServiceSkelUtil.FindParentInterface(obj.GetType()));
    string objshort;
    if (CompareNamespace(objtype, out objshort)) {
    switch(objshort) {
    default:
    break;
    }
    } else {
    string ext_service_type=RobotRaconteurNode.SplitQualifiedName(objtype).Item1;
    return RobotRaconteurNode.s.GetServiceFactory(ext_service_type).CreateSkel(obj);
    }
    throw new ServiceException("Could not create skel");
    }
    public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp){
    if (rr_exp==null) return rr_exp;
    string rr_type=rr_exp.Error;
    if (!rr_type.Contains(".")) return rr_exp;
    string rr_stype;
    if (CompareNamespace(rr_type, out rr_stype)) {
    } else {
    return RobotRaconteurNode.s.DownCastException(rr_exp); 
    }
    return rr_exp;
    }
}

public class ParameterInfo_stub : IStructureStub {
    public ParameterInfo_stub(com__robotraconteur__paramFactory d) {def=d;}
    private com__robotraconteur__paramFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    ParameterInfo s = (ParameterInfo)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("parameter_identifier",s.parameter_identifier));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("parameter_class",s.parameter_class));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("data_type",s.data_type));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackListType<com.robotraconteur.units.SIUnit>("data_units",s.data_units));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackString("description",s.description));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackVarType("default_value",s.default_value));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackVarType("min_value",s.min_value));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackVarType("max_value",s.max_value));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackMapType<string,object>("enum_values",s.enum_values));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackMapType<string,object>("extended",s.extended));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.param.ParameterInfo",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    ParameterInfo s=new ParameterInfo();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.parameter_identifier =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(MessageElement.FindElement(mm,"parameter_identifier"));
    s.parameter_class =MessageElementUtil.UnpackStructure<com.robotraconteur.device.DeviceClass>(MessageElement.FindElement(mm,"parameter_class"));
    s.data_type =MessageElementUtil.UnpackStructure<com.robotraconteur.datatype.DataType>(MessageElement.FindElement(mm,"data_type"));
    s.data_units =MessageElementUtil.UnpackList<com.robotraconteur.units.SIUnit>(MessageElement.FindElement(mm,"data_units"));
    s.description =MessageElementUtil.UnpackString(MessageElement.FindElement(mm,"description"));
    s.default_value =MessageElementUtil.UnpackVarType(MessageElement.FindElement(mm,"default_value"));
    s.min_value =MessageElementUtil.UnpackVarType(MessageElement.FindElement(mm,"min_value"));
    s.max_value =MessageElementUtil.UnpackVarType(MessageElement.FindElement(mm,"max_value"));
    s.enum_values =MessageElementUtil.UnpackMap<string,object>(MessageElement.FindElement(mm,"enum_values"));
    s.extended =MessageElementUtil.UnpackMap<string,object>(MessageElement.FindElement(mm,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public static class RRExtensions{
}
}
namespace com.robotraconteur.pid
{
public class PIDParam
{
    public double p;
    public double i;
    public double d;
    public double imax;
    public double imin;
    public double cmd_max;
    public double cmd_min;
}

}
namespace com.robotraconteur.pid
{
public class com__robotraconteur__pidFactory : ServiceFactory
{
    public override string DefString()
{
    const string s="service com.robotraconteur.pid\n\nstdver 0.10\n\nstruct PIDParam\nfield double p\nfield double i\nfield double d\nfield double imax\nfield double imin\nfield double cmd_max\nfield double cmd_min\nend\n\n";
    return s;
    }
    public override string GetServiceName() {return "com.robotraconteur.pid";}
    public PIDParam_stub PIDParam_stubentry;
    public com__robotraconteur__pidFactory()
{
    PIDParam_stubentry=new PIDParam_stub(this);
    }
    public override IStructureStub FindStructureStub(string objecttype)
    {
    if (objecttype=="PIDParam")    return PIDParam_stubentry;
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public override IPodStub FindPodStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override INamedArrayStub FindNamedArrayStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override ServiceStub CreateStub(WrappedServiceStub innerstub) {
    string objecttype=innerstub.RR_objecttype.GetServiceDefinition().Name + "." + innerstub.RR_objecttype.Name;    string objshort;
    if (CompareNamespace(objecttype, out objshort)) {
    switch (objshort) {
    default:
    break;
    }
    } else {
    string ext_service_type=RobotRaconteurNode.SplitQualifiedName(objecttype).Item1;
    return RobotRaconteurNode.s.GetServiceType(ext_service_type).CreateStub(innerstub);
    }
    throw new ServiceException("Could not create stub");
    }
    public override ServiceSkel CreateSkel(object obj) {
    string objtype = RobotRaconteurNode.GetTypeString(ServiceSkelUtil.FindParentInterface(obj.GetType()));
    string objshort;
    if (CompareNamespace(objtype, out objshort)) {
    switch(objshort) {
    default:
    break;
    }
    } else {
    string ext_service_type=RobotRaconteurNode.SplitQualifiedName(objtype).Item1;
    return RobotRaconteurNode.s.GetServiceFactory(ext_service_type).CreateSkel(obj);
    }
    throw new ServiceException("Could not create skel");
    }
    public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp){
    if (rr_exp==null) return rr_exp;
    string rr_type=rr_exp.Error;
    if (!rr_type.Contains(".")) return rr_exp;
    string rr_stype;
    if (CompareNamespace(rr_type, out rr_stype)) {
    } else {
    return RobotRaconteurNode.s.DownCastException(rr_exp); 
    }
    return rr_exp;
    }
}

public class PIDParam_stub : IStructureStub {
    public PIDParam_stub(com__robotraconteur__pidFactory d) {def=d;}
    private com__robotraconteur__pidFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    PIDParam s = (PIDParam)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<double>("p",s.p));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<double>("i",s.i));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<double>("d",s.d));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<double>("imax",s.imax));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<double>("imin",s.imin));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<double>("cmd_max",s.cmd_max));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<double>("cmd_min",s.cmd_min));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.pid.PIDParam",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    PIDParam s=new PIDParam();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.p =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(mm,"p")));
    s.i =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(mm,"i")));
    s.d =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(mm,"d")));
    s.imax =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(mm,"imax")));
    s.imin =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(mm,"imin")));
    s.cmd_max =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(mm,"cmd_max")));
    s.cmd_min =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(mm,"cmd_min")));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public static class RRExtensions{
}
}
namespace com.robotraconteur.pointcloud
{
public class PointCloud
{
    public com.robotraconteur.geometry.BoundingBox bounds;
    public bool is_dense;
    public com.robotraconteur.geometry.Point[] points;
    public Dictionary<string,object> extended;
}

public class PointCloudPart
{
    public com.robotraconteur.geometry.BoundingBox bounds;
    public bool is_dense;
    public uint points_offset;
    public uint points_total_len;
    public com.robotraconteur.geometry.Point[] points;
    public Dictionary<string,object> extended;
}

public class PointCloudf
{
    public com.robotraconteur.geometryf.BoundingBox bounds;
    public bool is_dense;
    public com.robotraconteur.geometryf.Point[] points;
    public Dictionary<string,object> extended;
}

public class PointCloudPartf
{
    public com.robotraconteur.geometryf.BoundingBox bounds;
    public bool is_dense;
    public uint points_offset;
    public uint points_total_len;
    public com.robotraconteur.geometryf.Point[] points;
    public Dictionary<string,object> extended;
}

public class PointCloud2
{
    public com.robotraconteur.geometry.BoundingBox bounds;
    public bool is_dense;
    public PointCloud2Point[] points;
    public Dictionary<string,object> extended;
}

public class PointCloud2Part
{
    public com.robotraconteur.geometry.BoundingBox bounds;
    public bool is_dense;
    public uint points_offset;
    public uint points_total_len;
    public PointCloud2Point[] points;
    public Dictionary<string,object> extended;
}

public class PointCloud2f
{
    public com.robotraconteur.geometryf.BoundingBox bounds;
    public bool is_dense;
    public PointCloud2Pointf[] points;
    public Dictionary<string,object> extended;
}

public class PointCloud2Partf
{
    public com.robotraconteur.geometryf.BoundingBox bounds;
    public bool is_dense;
    public uint points_offset;
    public uint points_total_len;
    public PointCloud2Pointf[] points;
    public Dictionary<string,object> extended;
}

public class FreeformPointCloud
{
    public com.robotraconteur.geometry.BoundingBox bounds;
    public string encoding;
    public bool is_dense;
    public object points;
    public Dictionary<string,object> extended;
}

public class FreeformPointCloudPart
{
    public com.robotraconteur.geometry.BoundingBox bounds;
    public string encoding;
    public bool is_dense;
    public uint points_offset;
    public uint points_total_len;
    public object points;
    public Dictionary<string,object> extended;
}

[NamedArrayElementTypeAndCount(typeof(double), 12)]
public struct PointCloud2Point
{
    public com.robotraconteur.geometry.Point point;
    public double intensity;
    public com.robotraconteur.geometry.Vector3 normal;
    public com.robotraconteur.image.PixelRGBFloatPacked rgb;
    public double[] moment_invariants;
    public double channel;
    public double[] GetNumericArray()
    {
    var a=new ArraySegment<double>(new double[12]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<double> rr_a)
    {
    if(rr_a.Count < 12) throw new ArgumentException("ArraySegment invalid length");
    var rr_a0 = new ArraySegment<double>(rr_a.Array, rr_a.Offset + 0, 3);
    point.GetNumericArray(ref rr_a0);
    rr_a.Array[rr_a.Offset + 3] = intensity;
    var rr_a4 = new ArraySegment<double>(rr_a.Array, rr_a.Offset + 4, 3);
    normal.GetNumericArray(ref rr_a4);
    var rr_a7 = new ArraySegment<double>(rr_a.Array, rr_a.Offset + 7, 1);
    rgb.GetNumericArray(ref rr_a7);
    Array.Copy(moment_invariants, 0, rr_a.Array, rr_a.Offset + 8, 3);
    rr_a.Array[rr_a.Offset + 11] = channel;
    }
    public void AssignFromNumericArray(ref ArraySegment<double> rr_a)
    {
    if(rr_a.Count < 12) throw new ArgumentException("ArraySegment invalid length");
    var rr_a0 = new ArraySegment<double>(rr_a.Array, rr_a.Offset + 0, 3);
    point.AssignFromNumericArray(ref rr_a0);
    intensity = rr_a.Array[rr_a.Offset + 3];
    var rr_a4 = new ArraySegment<double>(rr_a.Array, rr_a.Offset + 4, 3);
    normal.AssignFromNumericArray(ref rr_a4);
    var rr_a7 = new ArraySegment<double>(rr_a.Array, rr_a.Offset + 7, 1);
    rgb.AssignFromNumericArray(ref rr_a7);
    Array.Copy(rr_a.Array, rr_a.Offset + 8, moment_invariants, 0, 3);
    channel = rr_a.Array[rr_a.Offset + 11];
    }
}

[NamedArrayElementTypeAndCount(typeof(float), 12)]
public struct PointCloud2Pointf
{
    public com.robotraconteur.geometryf.Point point;
    public float intensity;
    public com.robotraconteur.geometryf.Vector3 normal;
    public com.robotraconteur.image.PixelRGBFloatPackedf rgb;
    public float[] moment_invariants;
    public float channel;
    public float[] GetNumericArray()
    {
    var a=new ArraySegment<float>(new float[12]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<float> rr_a)
    {
    if(rr_a.Count < 12) throw new ArgumentException("ArraySegment invalid length");
    var rr_a0 = new ArraySegment<float>(rr_a.Array, rr_a.Offset + 0, 3);
    point.GetNumericArray(ref rr_a0);
    rr_a.Array[rr_a.Offset + 3] = intensity;
    var rr_a4 = new ArraySegment<float>(rr_a.Array, rr_a.Offset + 4, 3);
    normal.GetNumericArray(ref rr_a4);
    var rr_a7 = new ArraySegment<float>(rr_a.Array, rr_a.Offset + 7, 1);
    rgb.GetNumericArray(ref rr_a7);
    Array.Copy(moment_invariants, 0, rr_a.Array, rr_a.Offset + 8, 3);
    rr_a.Array[rr_a.Offset + 11] = channel;
    }
    public void AssignFromNumericArray(ref ArraySegment<float> rr_a)
    {
    if(rr_a.Count < 12) throw new ArgumentException("ArraySegment invalid length");
    var rr_a0 = new ArraySegment<float>(rr_a.Array, rr_a.Offset + 0, 3);
    point.AssignFromNumericArray(ref rr_a0);
    intensity = rr_a.Array[rr_a.Offset + 3];
    var rr_a4 = new ArraySegment<float>(rr_a.Array, rr_a.Offset + 4, 3);
    normal.AssignFromNumericArray(ref rr_a4);
    var rr_a7 = new ArraySegment<float>(rr_a.Array, rr_a.Offset + 7, 1);
    rgb.AssignFromNumericArray(ref rr_a7);
    Array.Copy(rr_a.Array, rr_a.Offset + 8, moment_invariants, 0, 3);
    channel = rr_a.Array[rr_a.Offset + 11];
    }
}

}
namespace com.robotraconteur.pointcloud
{
public class com__robotraconteur__pointcloudFactory : ServiceFactory
{
    public override string DefString()
{
    const string s="service com.robotraconteur.pointcloud\n\nstdver 0.10\n\nimport com.robotraconteur.geometry\nimport com.robotraconteur.geometryf\nimport com.robotraconteur.image\n\nusing com.robotraconteur.geometry.Point\nusing com.robotraconteur.geometry.Vector3\nusing com.robotraconteur.geometry.BoundingBox\nusing com.robotraconteur.geometryf.Point as Pointf\nusing com.robotraconteur.geometryf.Vector3 as Vector3f\nusing com.robotraconteur.geometryf.BoundingBox as BoundingBoxf\nusing com.robotraconteur.image.PixelRGBFloatPacked\nusing com.robotraconteur.image.PixelRGBFloatPackedf\n\nstruct PointCloud\nfield BoundingBox bounds\nfield bool is_dense\nfield Point[] points\nfield varvalue{string} extended\nend\n\nstruct PointCloudPart\nfield BoundingBox bounds\nfield bool is_dense\nfield uint32 points_offset\nfield uint32 points_total_len\nfield Point[] points\nfield varvalue{string} extended\nend\n\nstruct PointCloudf\nfield BoundingBoxf bounds\nfield bool is_dense\nfield Pointf[] points\nfield varvalue{string} extended\nend\n\nstruct PointCloudPartf\nfield BoundingBoxf bounds\nfield bool is_dense\nfield uint32 points_offset\nfield uint32 points_total_len\nfield Pointf[] points\nfield varvalue{string} extended\nend\n\nnamedarray PointCloud2Point\nfield Point point\nfield double intensity\nfield Vector3 normal\nfield PixelRGBFloatPacked rgb\nfield double[3] moment_invariants\nfield double channel\nend\n\nstruct PointCloud2\nfield BoundingBox bounds\nfield bool is_dense\nfield PointCloud2Point[] points\nfield varvalue{string} extended\nend\n\nstruct PointCloud2Part\nfield BoundingBox bounds\nfield bool is_dense\nfield uint32 points_offset\nfield uint32 points_total_len\nfield PointCloud2Point[] points\nfield varvalue{string} extended\nend\n\nnamedarray PointCloud2Pointf\nfield Pointf point\nfield single intensity\nfield Vector3f normal\nfield PixelRGBFloatPackedf rgb\nfield single[3] moment_invariants\nfield single channel\nend\n\nstruct PointCloud2f\nfield BoundingBoxf bounds\nfield bool is_dense\nfield PointCloud2Pointf[] points\nfield varvalue{string} extended\nend\n\nstruct PointCloud2Partf\nfield BoundingBoxf bounds\nfield bool is_dense\nfield uint32 points_offset\nfield uint32 points_total_len\nfield PointCloud2Pointf[] points\nfield varvalue{string} extended\nend\n\nstruct FreeformPointCloud\nfield BoundingBox bounds\nfield string encoding\nfield bool is_dense\nfield varvalue points\nfield varvalue{string} extended\nend\n\nstruct FreeformPointCloudPart\nfield BoundingBox bounds\nfield string encoding\nfield bool is_dense\nfield uint32 points_offset\nfield uint32 points_total_len\nfield varvalue points\nfield varvalue{string} extended\nend\n\n";
    return s;
    }
    public override string GetServiceName() {return "com.robotraconteur.pointcloud";}
    public PointCloud_stub PointCloud_stubentry;
    public PointCloudPart_stub PointCloudPart_stubentry;
    public PointCloudf_stub PointCloudf_stubentry;
    public PointCloudPartf_stub PointCloudPartf_stubentry;
    public PointCloud2_stub PointCloud2_stubentry;
    public PointCloud2Part_stub PointCloud2Part_stubentry;
    public PointCloud2f_stub PointCloud2f_stubentry;
    public PointCloud2Partf_stub PointCloud2Partf_stubentry;
    public FreeformPointCloud_stub FreeformPointCloud_stubentry;
    public FreeformPointCloudPart_stub FreeformPointCloudPart_stubentry;
    public PointCloud2Point_stub PointCloud2Point_stubentry;
    public PointCloud2Pointf_stub PointCloud2Pointf_stubentry;
    public com__robotraconteur__pointcloudFactory()
{
    PointCloud_stubentry=new PointCloud_stub(this);
    PointCloudPart_stubentry=new PointCloudPart_stub(this);
    PointCloudf_stubentry=new PointCloudf_stub(this);
    PointCloudPartf_stubentry=new PointCloudPartf_stub(this);
    PointCloud2_stubentry=new PointCloud2_stub(this);
    PointCloud2Part_stubentry=new PointCloud2Part_stub(this);
    PointCloud2f_stubentry=new PointCloud2f_stub(this);
    PointCloud2Partf_stubentry=new PointCloud2Partf_stub(this);
    FreeformPointCloud_stubentry=new FreeformPointCloud_stub(this);
    FreeformPointCloudPart_stubentry=new FreeformPointCloudPart_stub(this);
    PointCloud2Point_stubentry=new PointCloud2Point_stub();
    PointCloud2Pointf_stubentry=new PointCloud2Pointf_stub();
    }
    public override IStructureStub FindStructureStub(string objecttype)
    {
    if (objecttype=="PointCloud")    return PointCloud_stubentry;
    if (objecttype=="PointCloudPart")    return PointCloudPart_stubentry;
    if (objecttype=="PointCloudf")    return PointCloudf_stubentry;
    if (objecttype=="PointCloudPartf")    return PointCloudPartf_stubentry;
    if (objecttype=="PointCloud2")    return PointCloud2_stubentry;
    if (objecttype=="PointCloud2Part")    return PointCloud2Part_stubentry;
    if (objecttype=="PointCloud2f")    return PointCloud2f_stubentry;
    if (objecttype=="PointCloud2Partf")    return PointCloud2Partf_stubentry;
    if (objecttype=="FreeformPointCloud")    return FreeformPointCloud_stubentry;
    if (objecttype=="FreeformPointCloudPart")    return FreeformPointCloudPart_stubentry;
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public override IPodStub FindPodStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override INamedArrayStub FindNamedArrayStub(string objecttype)
    {
    if (objecttype=="PointCloud2Point")    return PointCloud2Point_stubentry;
    if (objecttype=="PointCloud2Pointf")    return PointCloud2Pointf_stubentry;
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override ServiceStub CreateStub(WrappedServiceStub innerstub) {
    string objecttype=innerstub.RR_objecttype.GetServiceDefinition().Name + "." + innerstub.RR_objecttype.Name;    string objshort;
    if (CompareNamespace(objecttype, out objshort)) {
    switch (objshort) {
    default:
    break;
    }
    } else {
    string ext_service_type=RobotRaconteurNode.SplitQualifiedName(objecttype).Item1;
    return RobotRaconteurNode.s.GetServiceType(ext_service_type).CreateStub(innerstub);
    }
    throw new ServiceException("Could not create stub");
    }
    public override ServiceSkel CreateSkel(object obj) {
    string objtype = RobotRaconteurNode.GetTypeString(ServiceSkelUtil.FindParentInterface(obj.GetType()));
    string objshort;
    if (CompareNamespace(objtype, out objshort)) {
    switch(objshort) {
    default:
    break;
    }
    } else {
    string ext_service_type=RobotRaconteurNode.SplitQualifiedName(objtype).Item1;
    return RobotRaconteurNode.s.GetServiceFactory(ext_service_type).CreateSkel(obj);
    }
    throw new ServiceException("Could not create skel");
    }
    public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp){
    if (rr_exp==null) return rr_exp;
    string rr_type=rr_exp.Error;
    if (!rr_type.Contains(".")) return rr_exp;
    string rr_stype;
    if (CompareNamespace(rr_type, out rr_stype)) {
    } else {
    return RobotRaconteurNode.s.DownCastException(rr_exp); 
    }
    return rr_exp;
    }
}

public class PointCloud_stub : IStructureStub {
    public PointCloud_stub(com__robotraconteur__pointcloudFactory d) {def=d;}
    private com__robotraconteur__pointcloudFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    PointCloud s = (PointCloud)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("bounds",s.bounds));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<bool>("is_dense",s.is_dense));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackNamedArray<com.robotraconteur.geometry.Point>("points",s.points));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackMapType<string,object>("extended",s.extended));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.pointcloud.PointCloud",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    PointCloud s=new PointCloud();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.bounds =MessageElementUtil.UnpackStructure<com.robotraconteur.geometry.BoundingBox>(MessageElement.FindElement(mm,"bounds"));
    s.is_dense =(MessageElementUtil.UnpackScalar<bool>(MessageElement.FindElement(mm,"is_dense")));
    s.points =MessageElementUtil.UnpackNamedArray<com.robotraconteur.geometry.Point>(MessageElement.FindElement(mm,"points"));
    s.extended =MessageElementUtil.UnpackMap<string,object>(MessageElement.FindElement(mm,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class PointCloudPart_stub : IStructureStub {
    public PointCloudPart_stub(com__robotraconteur__pointcloudFactory d) {def=d;}
    private com__robotraconteur__pointcloudFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    PointCloudPart s = (PointCloudPart)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("bounds",s.bounds));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<bool>("is_dense",s.is_dense));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<uint>("points_offset",s.points_offset));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<uint>("points_total_len",s.points_total_len));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackNamedArray<com.robotraconteur.geometry.Point>("points",s.points));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackMapType<string,object>("extended",s.extended));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.pointcloud.PointCloudPart",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    PointCloudPart s=new PointCloudPart();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.bounds =MessageElementUtil.UnpackStructure<com.robotraconteur.geometry.BoundingBox>(MessageElement.FindElement(mm,"bounds"));
    s.is_dense =(MessageElementUtil.UnpackScalar<bool>(MessageElement.FindElement(mm,"is_dense")));
    s.points_offset =(MessageElementUtil.UnpackScalar<uint>(MessageElement.FindElement(mm,"points_offset")));
    s.points_total_len =(MessageElementUtil.UnpackScalar<uint>(MessageElement.FindElement(mm,"points_total_len")));
    s.points =MessageElementUtil.UnpackNamedArray<com.robotraconteur.geometry.Point>(MessageElement.FindElement(mm,"points"));
    s.extended =MessageElementUtil.UnpackMap<string,object>(MessageElement.FindElement(mm,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class PointCloudf_stub : IStructureStub {
    public PointCloudf_stub(com__robotraconteur__pointcloudFactory d) {def=d;}
    private com__robotraconteur__pointcloudFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    PointCloudf s = (PointCloudf)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("bounds",s.bounds));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<bool>("is_dense",s.is_dense));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackNamedArray<com.robotraconteur.geometryf.Point>("points",s.points));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackMapType<string,object>("extended",s.extended));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.pointcloud.PointCloudf",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    PointCloudf s=new PointCloudf();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.bounds =MessageElementUtil.UnpackStructure<com.robotraconteur.geometryf.BoundingBox>(MessageElement.FindElement(mm,"bounds"));
    s.is_dense =(MessageElementUtil.UnpackScalar<bool>(MessageElement.FindElement(mm,"is_dense")));
    s.points =MessageElementUtil.UnpackNamedArray<com.robotraconteur.geometryf.Point>(MessageElement.FindElement(mm,"points"));
    s.extended =MessageElementUtil.UnpackMap<string,object>(MessageElement.FindElement(mm,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class PointCloudPartf_stub : IStructureStub {
    public PointCloudPartf_stub(com__robotraconteur__pointcloudFactory d) {def=d;}
    private com__robotraconteur__pointcloudFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    PointCloudPartf s = (PointCloudPartf)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("bounds",s.bounds));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<bool>("is_dense",s.is_dense));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<uint>("points_offset",s.points_offset));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<uint>("points_total_len",s.points_total_len));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackNamedArray<com.robotraconteur.geometryf.Point>("points",s.points));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackMapType<string,object>("extended",s.extended));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.pointcloud.PointCloudPartf",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    PointCloudPartf s=new PointCloudPartf();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.bounds =MessageElementUtil.UnpackStructure<com.robotraconteur.geometryf.BoundingBox>(MessageElement.FindElement(mm,"bounds"));
    s.is_dense =(MessageElementUtil.UnpackScalar<bool>(MessageElement.FindElement(mm,"is_dense")));
    s.points_offset =(MessageElementUtil.UnpackScalar<uint>(MessageElement.FindElement(mm,"points_offset")));
    s.points_total_len =(MessageElementUtil.UnpackScalar<uint>(MessageElement.FindElement(mm,"points_total_len")));
    s.points =MessageElementUtil.UnpackNamedArray<com.robotraconteur.geometryf.Point>(MessageElement.FindElement(mm,"points"));
    s.extended =MessageElementUtil.UnpackMap<string,object>(MessageElement.FindElement(mm,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class PointCloud2_stub : IStructureStub {
    public PointCloud2_stub(com__robotraconteur__pointcloudFactory d) {def=d;}
    private com__robotraconteur__pointcloudFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    PointCloud2 s = (PointCloud2)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("bounds",s.bounds));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<bool>("is_dense",s.is_dense));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackNamedArray<PointCloud2Point>("points",s.points));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackMapType<string,object>("extended",s.extended));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.pointcloud.PointCloud2",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    PointCloud2 s=new PointCloud2();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.bounds =MessageElementUtil.UnpackStructure<com.robotraconteur.geometry.BoundingBox>(MessageElement.FindElement(mm,"bounds"));
    s.is_dense =(MessageElementUtil.UnpackScalar<bool>(MessageElement.FindElement(mm,"is_dense")));
    s.points =MessageElementUtil.UnpackNamedArray<PointCloud2Point>(MessageElement.FindElement(mm,"points"));
    s.extended =MessageElementUtil.UnpackMap<string,object>(MessageElement.FindElement(mm,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class PointCloud2Part_stub : IStructureStub {
    public PointCloud2Part_stub(com__robotraconteur__pointcloudFactory d) {def=d;}
    private com__robotraconteur__pointcloudFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    PointCloud2Part s = (PointCloud2Part)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("bounds",s.bounds));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<bool>("is_dense",s.is_dense));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<uint>("points_offset",s.points_offset));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<uint>("points_total_len",s.points_total_len));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackNamedArray<PointCloud2Point>("points",s.points));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackMapType<string,object>("extended",s.extended));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.pointcloud.PointCloud2Part",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    PointCloud2Part s=new PointCloud2Part();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.bounds =MessageElementUtil.UnpackStructure<com.robotraconteur.geometry.BoundingBox>(MessageElement.FindElement(mm,"bounds"));
    s.is_dense =(MessageElementUtil.UnpackScalar<bool>(MessageElement.FindElement(mm,"is_dense")));
    s.points_offset =(MessageElementUtil.UnpackScalar<uint>(MessageElement.FindElement(mm,"points_offset")));
    s.points_total_len =(MessageElementUtil.UnpackScalar<uint>(MessageElement.FindElement(mm,"points_total_len")));
    s.points =MessageElementUtil.UnpackNamedArray<PointCloud2Point>(MessageElement.FindElement(mm,"points"));
    s.extended =MessageElementUtil.UnpackMap<string,object>(MessageElement.FindElement(mm,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class PointCloud2f_stub : IStructureStub {
    public PointCloud2f_stub(com__robotraconteur__pointcloudFactory d) {def=d;}
    private com__robotraconteur__pointcloudFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    PointCloud2f s = (PointCloud2f)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("bounds",s.bounds));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<bool>("is_dense",s.is_dense));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackNamedArray<PointCloud2Pointf>("points",s.points));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackMapType<string,object>("extended",s.extended));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.pointcloud.PointCloud2f",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    PointCloud2f s=new PointCloud2f();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.bounds =MessageElementUtil.UnpackStructure<com.robotraconteur.geometryf.BoundingBox>(MessageElement.FindElement(mm,"bounds"));
    s.is_dense =(MessageElementUtil.UnpackScalar<bool>(MessageElement.FindElement(mm,"is_dense")));
    s.points =MessageElementUtil.UnpackNamedArray<PointCloud2Pointf>(MessageElement.FindElement(mm,"points"));
    s.extended =MessageElementUtil.UnpackMap<string,object>(MessageElement.FindElement(mm,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class PointCloud2Partf_stub : IStructureStub {
    public PointCloud2Partf_stub(com__robotraconteur__pointcloudFactory d) {def=d;}
    private com__robotraconteur__pointcloudFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    PointCloud2Partf s = (PointCloud2Partf)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("bounds",s.bounds));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<bool>("is_dense",s.is_dense));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<uint>("points_offset",s.points_offset));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<uint>("points_total_len",s.points_total_len));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackNamedArray<PointCloud2Pointf>("points",s.points));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackMapType<string,object>("extended",s.extended));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.pointcloud.PointCloud2Partf",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    PointCloud2Partf s=new PointCloud2Partf();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.bounds =MessageElementUtil.UnpackStructure<com.robotraconteur.geometryf.BoundingBox>(MessageElement.FindElement(mm,"bounds"));
    s.is_dense =(MessageElementUtil.UnpackScalar<bool>(MessageElement.FindElement(mm,"is_dense")));
    s.points_offset =(MessageElementUtil.UnpackScalar<uint>(MessageElement.FindElement(mm,"points_offset")));
    s.points_total_len =(MessageElementUtil.UnpackScalar<uint>(MessageElement.FindElement(mm,"points_total_len")));
    s.points =MessageElementUtil.UnpackNamedArray<PointCloud2Pointf>(MessageElement.FindElement(mm,"points"));
    s.extended =MessageElementUtil.UnpackMap<string,object>(MessageElement.FindElement(mm,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class FreeformPointCloud_stub : IStructureStub {
    public FreeformPointCloud_stub(com__robotraconteur__pointcloudFactory d) {def=d;}
    private com__robotraconteur__pointcloudFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    FreeformPointCloud s = (FreeformPointCloud)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("bounds",s.bounds));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackString("encoding",s.encoding));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<bool>("is_dense",s.is_dense));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackVarType("points",s.points));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackMapType<string,object>("extended",s.extended));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.pointcloud.FreeformPointCloud",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    FreeformPointCloud s=new FreeformPointCloud();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.bounds =MessageElementUtil.UnpackStructure<com.robotraconteur.geometry.BoundingBox>(MessageElement.FindElement(mm,"bounds"));
    s.encoding =MessageElementUtil.UnpackString(MessageElement.FindElement(mm,"encoding"));
    s.is_dense =(MessageElementUtil.UnpackScalar<bool>(MessageElement.FindElement(mm,"is_dense")));
    s.points =MessageElementUtil.UnpackVarType(MessageElement.FindElement(mm,"points"));
    s.extended =MessageElementUtil.UnpackMap<string,object>(MessageElement.FindElement(mm,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class FreeformPointCloudPart_stub : IStructureStub {
    public FreeformPointCloudPart_stub(com__robotraconteur__pointcloudFactory d) {def=d;}
    private com__robotraconteur__pointcloudFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    FreeformPointCloudPart s = (FreeformPointCloudPart)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("bounds",s.bounds));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackString("encoding",s.encoding));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<bool>("is_dense",s.is_dense));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<uint>("points_offset",s.points_offset));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<uint>("points_total_len",s.points_total_len));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackVarType("points",s.points));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackMapType<string,object>("extended",s.extended));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.pointcloud.FreeformPointCloudPart",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    FreeformPointCloudPart s=new FreeformPointCloudPart();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.bounds =MessageElementUtil.UnpackStructure<com.robotraconteur.geometry.BoundingBox>(MessageElement.FindElement(mm,"bounds"));
    s.encoding =MessageElementUtil.UnpackString(MessageElement.FindElement(mm,"encoding"));
    s.is_dense =(MessageElementUtil.UnpackScalar<bool>(MessageElement.FindElement(mm,"is_dense")));
    s.points_offset =(MessageElementUtil.UnpackScalar<uint>(MessageElement.FindElement(mm,"points_offset")));
    s.points_total_len =(MessageElementUtil.UnpackScalar<uint>(MessageElement.FindElement(mm,"points_total_len")));
    s.points =MessageElementUtil.UnpackVarType(MessageElement.FindElement(mm,"points"));
    s.extended =MessageElementUtil.UnpackMap<string,object>(MessageElement.FindElement(mm,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class PointCloud2Point_stub : NamedArrayStub<PointCloud2Point,double> {
    public override double[] GetNumericArrayFromNamedArrayStruct(ref PointCloud2Point s) {
    return s.GetNumericArray();
    }
    public override PointCloud2Point GetNamedArrayStructFromNumericArray(double[] m) {
    if (m.Length != 12) throw new DataTypeException("Invalid namedarray array");
    var s = new PointCloud2Point();
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override double[] GetNumericArrayFromNamedArray(PointCloud2Point[] s) {
    return s.GetNumericArray();
    }
    public override PointCloud2Point[] GetNamedArrayFromNumericArray(double[] m) {
    if (m.Length % 12 != 0) throw new DataTypeException("Invalid namedarray array");
    PointCloud2Point[] s = new PointCloud2Point[m.Length / 12];
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.pointcloud.PointCloud2Point"; } }}

public class PointCloud2Pointf_stub : NamedArrayStub<PointCloud2Pointf,float> {
    public override float[] GetNumericArrayFromNamedArrayStruct(ref PointCloud2Pointf s) {
    return s.GetNumericArray();
    }
    public override PointCloud2Pointf GetNamedArrayStructFromNumericArray(float[] m) {
    if (m.Length != 12) throw new DataTypeException("Invalid namedarray array");
    var s = new PointCloud2Pointf();
    var a = new ArraySegment<float>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override float[] GetNumericArrayFromNamedArray(PointCloud2Pointf[] s) {
    return s.GetNumericArray();
    }
    public override PointCloud2Pointf[] GetNamedArrayFromNumericArray(float[] m) {
    if (m.Length % 12 != 0) throw new DataTypeException("Invalid namedarray array");
    PointCloud2Pointf[] s = new PointCloud2Pointf[m.Length / 12];
    var a = new ArraySegment<float>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.pointcloud.PointCloud2Pointf"; } }}

public static class RRExtensions{
    public static double[] GetNumericArray(this PointCloud2Point[] s)
    {
    var a=new ArraySegment<double>(new double[12 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this PointCloud2Point[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 12 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 12*i,12);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this PointCloud2Point[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 12 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 12*i,12);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static float[] GetNumericArray(this PointCloud2Pointf[] s)
    {
    var a=new ArraySegment<float>(new float[12 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this PointCloud2Pointf[] s, ref ArraySegment<float> a)
    {
    if(a.Count < 12 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<float>(a.Array, a.Offset + 12*i,12);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this PointCloud2Pointf[] s, ref ArraySegment<float> a)
    {
    if(a.Count < 12 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<float>(a.Array, a.Offset + 12*i,12);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
}
}
namespace com.robotraconteur.pointcloud.sensor
{
public class PointCloudSensorInfo
{
    public com.robotraconteur.device.DeviceInfo device_info;
    public com.robotraconteur.geometry.BoundingBox bounds;
    public com.robotraconteur.geometry.Vector3 resolution;
    public List<com.robotraconteur.param.ParameterInfo> param_info;
    public Dictionary<string,object> extended;
}

public class PointCloudSensorData
{
    public com.robotraconteur.sensor.SensorData sensor_data;
    public com.robotraconteur.pointcloud.PointCloudf point_cloud;
}

public class PointCloudPartSensorData
{
    public com.robotraconteur.sensor.SensorData sensor_data;
    public com.robotraconteur.pointcloud.PointCloudPartf point_cloud;
}

public class PointCloud2SensorData
{
    public com.robotraconteur.sensor.SensorData sensor_data;
    public com.robotraconteur.pointcloud.PointCloud2f point_cloud;
}

public class PointCloud2PartSensorData
{
    public com.robotraconteur.sensor.SensorData sensor_data;
    public com.robotraconteur.pointcloud.PointCloud2Partf point_cloud;
}

[RobotRaconteurServiceObjectInterface()]
public interface PointCloudSensor : com.robotraconteur.device.Device, com.robotraconteur.device.clock.DeviceClock, com.robotraconteur.device.isoch.IsochDevice
{
    com.robotraconteur.device.DeviceInfo device_info { get; 	}
    PointCloudSensorInfo point_sensor_info { get; 	}
    com.robotraconteur.device.isoch.IsochInfo isoch_info { get; 	}
    uint isoch_downsample { get;  set; 	}
    com.robotraconteur.pointcloud.PointCloudf capture_point_cloud();
    object getf_param(string param_name);
    void setf_param(string param_name, object value_);
    Pipe<PointCloudSensorData> point_cloud_sensor_data{ get; set; }
    Wire<com.robotraconteur.device.clock.DeviceTime> device_clock_now{ get; set; }
}

[RobotRaconteurServiceObjectInterface()]
public interface PointCloudPartSensor : com.robotraconteur.device.Device, com.robotraconteur.device.clock.DeviceClock, com.robotraconteur.device.isoch.IsochDevice
{
    com.robotraconteur.device.DeviceInfo device_info { get; 	}
    PointCloudSensorInfo point_sensor_info { get; 	}
    com.robotraconteur.device.isoch.IsochInfo isoch_info { get; 	}
    uint isoch_downsample { get;  set; 	}
    Generator2<com.robotraconteur.pointcloud.PointCloudPartf> capture_point_cloud();
    object getf_param(string param_name);
    void setf_param(string param_name, object value_);
    Pipe<PointCloudPartSensorData> point_cloud_sensor_data{ get; set; }
    Wire<com.robotraconteur.device.clock.DeviceTime> device_clock_now{ get; set; }
}

[RobotRaconteurServiceObjectInterface()]
public interface PointCloud2Sensor : PointCloudSensor, com.robotraconteur.device.Device, com.robotraconteur.device.clock.DeviceClock, com.robotraconteur.device.isoch.IsochDevice
{
    com.robotraconteur.device.DeviceInfo device_info { get; 	}
    PointCloudSensorInfo point_sensor_info { get; 	}
    com.robotraconteur.device.isoch.IsochInfo isoch_info { get; 	}
    uint isoch_downsample { get;  set; 	}
    com.robotraconteur.pointcloud.PointCloudf capture_point_cloud();
    com.robotraconteur.pointcloud.PointCloud2f capture_point_cloud2();
    object getf_param(string param_name);
    void setf_param(string param_name, object value_);
    Pipe<PointCloudSensorData> point_cloud_sensor_data{ get; set; }
    Pipe<PointCloud2SensorData> point_cloud2_sensor_data{ get; set; }
    Wire<com.robotraconteur.device.clock.DeviceTime> device_clock_now{ get; set; }
}

[RobotRaconteurServiceObjectInterface()]
public interface PointCloud2PartSensor : PointCloudPartSensor, com.robotraconteur.device.Device, com.robotraconteur.device.clock.DeviceClock, com.robotraconteur.device.isoch.IsochDevice
{
    com.robotraconteur.device.DeviceInfo device_info { get; 	}
    PointCloudSensorInfo point_sensor_info { get; 	}
    com.robotraconteur.device.isoch.IsochInfo isoch_info { get; 	}
    uint isoch_downsample { get;  set; 	}
    Generator2<com.robotraconteur.pointcloud.PointCloudPartf> capture_point_cloud();
    Generator2<com.robotraconteur.pointcloud.PointCloud2Partf> capture_point_cloud2();
    object getf_param(string param_name);
    void setf_param(string param_name, object value_);
    Pipe<PointCloudPartSensorData> point_cloud_sensor_data{ get; set; }
    Pipe<PointCloud2PartSensorData> point_cloud2_sensor_data{ get; set; }
    Wire<com.robotraconteur.device.clock.DeviceTime> device_clock_now{ get; set; }
}

}
namespace com.robotraconteur.pointcloud.sensor
{
public class com__robotraconteur__pointcloud__sensorFactory : ServiceFactory
{
    public override string DefString()
{
    const string s="service com.robotraconteur.pointcloud.sensor\n\nstdver 0.10\n\nimport com.robotraconteur.device\nimport com.robotraconteur.param\nimport com.robotraconteur.pointcloud\nimport com.robotraconteur.geometry\nimport com.robotraconteur.sensor\nimport com.robotraconteur.device.isoch\nimport com.robotraconteur.device.clock\n\nusing com.robotraconteur.device.DeviceInfo\nusing com.robotraconteur.device.Device\nusing com.robotraconteur.param.ParameterInfo\nusing com.robotraconteur.pointcloud.PointCloudf as PointCloud\nusing com.robotraconteur.pointcloud.PointCloudPartf as PointCloudPart\nusing com.robotraconteur.pointcloud.PointCloud2f as PointCloud2\nusing com.robotraconteur.pointcloud.PointCloud2Partf as PointCloud2Part\nusing com.robotraconteur.geometry.Point\nusing com.robotraconteur.geometry.Vector3\nusing com.robotraconteur.geometry.BoundingBox\nusing com.robotraconteur.sensor.SensorData\nusing com.robotraconteur.device.isoch.IsochDevice\nusing com.robotraconteur.device.isoch.IsochInfo\nusing com.robotraconteur.device.clock.DeviceClock\nusing com.robotraconteur.device.clock.DeviceTime\n\nstruct PointCloudSensorInfo\nfield DeviceInfo device_info\nfield BoundingBox bounds\nfield Vector3 resolution\nfield ParameterInfo{list} param_info\nfield varvalue{string} extended\nend\n\nstruct PointCloudSensorData\nfield SensorData sensor_data\nfield PointCloud point_cloud\nend\n\nstruct PointCloudPartSensorData\nfield SensorData sensor_data\nfield PointCloudPart point_cloud\nend\n\nobject PointCloudSensor\nimplements Device\nimplements DeviceClock\nimplements IsochDevice\nproperty DeviceInfo device_info [readonly,nolock]\nproperty PointCloudSensorInfo point_sensor_info [readonly,nolock]\nfunction PointCloud capture_point_cloud()\npipe PointCloudSensorData point_cloud_sensor_data [readonly]\nfunction varvalue getf_param(string param_name)\nfunction void setf_param(string param_name, varvalue value)\nproperty IsochInfo isoch_info [readonly,nolock]\nproperty uint32 isoch_downsample [perclient]\nwire DeviceTime device_clock_now [readonly,nolock]\nend\n\nobject PointCloudPartSensor\nimplements Device\nimplements DeviceClock\nimplements IsochDevice\nproperty DeviceInfo device_info [readonly,nolock]\nproperty PointCloudSensorInfo point_sensor_info [readonly,nolock]\nfunction PointCloudPart{generator} capture_point_cloud()\npipe PointCloudPartSensorData point_cloud_sensor_data [readonly]\nfunction varvalue getf_param(string param_name)\nfunction void setf_param(string param_name, varvalue value)\nproperty IsochInfo isoch_info [readonly,nolock]\nproperty uint32 isoch_downsample [perclient]\nwire DeviceTime device_clock_now [readonly,nolock]\nend\n\n\nstruct PointCloud2SensorData\nfield SensorData sensor_data\nfield PointCloud2 point_cloud\nend\n\nstruct PointCloud2PartSensorData\nfield SensorData sensor_data\nfield PointCloud2Part point_cloud\nend\n\nobject PointCloud2Sensor\nimplements PointCloudSensor\nimplements Device\nimplements DeviceClock\nimplements IsochDevice\nproperty DeviceInfo device_info [readonly,nolock]\nproperty PointCloudSensorInfo point_sensor_info [readonly,nolock]\nfunction PointCloud capture_point_cloud()\nfunction PointCloud2 capture_point_cloud2()\npipe PointCloudSensorData point_cloud_sensor_data [readonly]\npipe PointCloud2SensorData point_cloud2_sensor_data [readonly]\nfunction varvalue getf_param(string param_name)\nfunction void setf_param(string param_name, varvalue value)\nproperty IsochInfo isoch_info [readonly,nolock]\nproperty uint32 isoch_downsample [perclient]\nwire DeviceTime device_clock_now [readonly,nolock]\nend\n\nobject PointCloud2PartSensor\nimplements PointCloudPartSensor\nimplements Device\nimplements DeviceClock\nimplements IsochDevice\nproperty DeviceInfo device_info [readonly,nolock]\nproperty PointCloudSensorInfo point_sensor_info [readonly,nolock]\nfunction PointCloudPart{generator} capture_point_cloud()\nfunction PointCloud2Part{generator} capture_point_cloud2()\npipe PointCloudPartSensorData point_cloud_sensor_data [readonly]\npipe PointCloud2PartSensorData point_cloud2_sensor_data [readonly]\nfunction varvalue getf_param(string param_name)\nfunction void setf_param(string param_name, varvalue value)\nproperty IsochInfo isoch_info [readonly,nolock]\nproperty uint32 isoch_downsample [perclient]\nwire DeviceTime device_clock_now [readonly,nolock]\nend\n\n";
    return s;
    }
    public override string GetServiceName() {return "com.robotraconteur.pointcloud.sensor";}
    public PointCloudSensorInfo_stub PointCloudSensorInfo_stubentry;
    public PointCloudSensorData_stub PointCloudSensorData_stubentry;
    public PointCloudPartSensorData_stub PointCloudPartSensorData_stubentry;
    public PointCloud2SensorData_stub PointCloud2SensorData_stubentry;
    public PointCloud2PartSensorData_stub PointCloud2PartSensorData_stubentry;
    public com__robotraconteur__pointcloud__sensorFactory()
{
    PointCloudSensorInfo_stubentry=new PointCloudSensorInfo_stub(this);
    PointCloudSensorData_stubentry=new PointCloudSensorData_stub(this);
    PointCloudPartSensorData_stubentry=new PointCloudPartSensorData_stub(this);
    PointCloud2SensorData_stubentry=new PointCloud2SensorData_stub(this);
    PointCloud2PartSensorData_stubentry=new PointCloud2PartSensorData_stub(this);
    }
    public override IStructureStub FindStructureStub(string objecttype)
    {
    if (objecttype=="PointCloudSensorInfo")    return PointCloudSensorInfo_stubentry;
    if (objecttype=="PointCloudSensorData")    return PointCloudSensorData_stubentry;
    if (objecttype=="PointCloudPartSensorData")    return PointCloudPartSensorData_stubentry;
    if (objecttype=="PointCloud2SensorData")    return PointCloud2SensorData_stubentry;
    if (objecttype=="PointCloud2PartSensorData")    return PointCloud2PartSensorData_stubentry;
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public override IPodStub FindPodStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override INamedArrayStub FindNamedArrayStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override ServiceStub CreateStub(WrappedServiceStub innerstub) {
    string objecttype=innerstub.RR_objecttype.GetServiceDefinition().Name + "." + innerstub.RR_objecttype.Name;    string objshort;
    if (CompareNamespace(objecttype, out objshort)) {
    switch (objshort) {
    case "PointCloudSensor":
    return new PointCloudSensor_stub(innerstub);
    case "PointCloudPartSensor":
    return new PointCloudPartSensor_stub(innerstub);
    case "PointCloud2Sensor":
    return new PointCloud2Sensor_stub(innerstub);
    case "PointCloud2PartSensor":
    return new PointCloud2PartSensor_stub(innerstub);
    default:
    break;
    }
    } else {
    string ext_service_type=RobotRaconteurNode.SplitQualifiedName(objecttype).Item1;
    return RobotRaconteurNode.s.GetServiceType(ext_service_type).CreateStub(innerstub);
    }
    throw new ServiceException("Could not create stub");
    }
    public override ServiceSkel CreateSkel(object obj) {
    string objtype = RobotRaconteurNode.GetTypeString(ServiceSkelUtil.FindParentInterface(obj.GetType()));
    string objshort;
    if (CompareNamespace(objtype, out objshort)) {
    switch(objshort) {
    case "PointCloudSensor":
    return new PointCloudSensor_skel((PointCloudSensor)obj);
    case "PointCloudPartSensor":
    return new PointCloudPartSensor_skel((PointCloudPartSensor)obj);
    case "PointCloud2Sensor":
    return new PointCloud2Sensor_skel((PointCloud2Sensor)obj);
    case "PointCloud2PartSensor":
    return new PointCloud2PartSensor_skel((PointCloud2PartSensor)obj);
    default:
    break;
    }
    } else {
    string ext_service_type=RobotRaconteurNode.SplitQualifiedName(objtype).Item1;
    return RobotRaconteurNode.s.GetServiceFactory(ext_service_type).CreateSkel(obj);
    }
    throw new ServiceException("Could not create skel");
    }
    public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp){
    if (rr_exp==null) return rr_exp;
    string rr_type=rr_exp.Error;
    if (!rr_type.Contains(".")) return rr_exp;
    string rr_stype;
    if (CompareNamespace(rr_type, out rr_stype)) {
    } else {
    return RobotRaconteurNode.s.DownCastException(rr_exp); 
    }
    return rr_exp;
    }
}

public class PointCloudSensorInfo_stub : IStructureStub {
    public PointCloudSensorInfo_stub(com__robotraconteur__pointcloud__sensorFactory d) {def=d;}
    private com__robotraconteur__pointcloud__sensorFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    PointCloudSensorInfo s = (PointCloudSensorInfo)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("device_info",s.device_info));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("bounds",s.bounds));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Vector3>("resolution",ref s.resolution));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackListType<com.robotraconteur.param.ParameterInfo>("param_info",s.param_info));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackMapType<string,object>("extended",s.extended));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.pointcloud.sensor.PointCloudSensorInfo",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    PointCloudSensorInfo s=new PointCloudSensorInfo();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.device_info =MessageElementUtil.UnpackStructure<com.robotraconteur.device.DeviceInfo>(MessageElement.FindElement(mm,"device_info"));
    s.bounds =MessageElementUtil.UnpackStructure<com.robotraconteur.geometry.BoundingBox>(MessageElement.FindElement(mm,"bounds"));
    s.resolution =MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.Vector3>(MessageElement.FindElement(mm,"resolution"));
    s.param_info =MessageElementUtil.UnpackList<com.robotraconteur.param.ParameterInfo>(MessageElement.FindElement(mm,"param_info"));
    s.extended =MessageElementUtil.UnpackMap<string,object>(MessageElement.FindElement(mm,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class PointCloudSensorData_stub : IStructureStub {
    public PointCloudSensorData_stub(com__robotraconteur__pointcloud__sensorFactory d) {def=d;}
    private com__robotraconteur__pointcloud__sensorFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    PointCloudSensorData s = (PointCloudSensorData)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("sensor_data",s.sensor_data));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("point_cloud",s.point_cloud));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.pointcloud.sensor.PointCloudSensorData",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    PointCloudSensorData s=new PointCloudSensorData();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.sensor_data =MessageElementUtil.UnpackStructure<com.robotraconteur.sensor.SensorData>(MessageElement.FindElement(mm,"sensor_data"));
    s.point_cloud =MessageElementUtil.UnpackStructure<com.robotraconteur.pointcloud.PointCloudf>(MessageElement.FindElement(mm,"point_cloud"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class PointCloudPartSensorData_stub : IStructureStub {
    public PointCloudPartSensorData_stub(com__robotraconteur__pointcloud__sensorFactory d) {def=d;}
    private com__robotraconteur__pointcloud__sensorFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    PointCloudPartSensorData s = (PointCloudPartSensorData)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("sensor_data",s.sensor_data));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("point_cloud",s.point_cloud));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.pointcloud.sensor.PointCloudPartSensorData",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    PointCloudPartSensorData s=new PointCloudPartSensorData();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.sensor_data =MessageElementUtil.UnpackStructure<com.robotraconteur.sensor.SensorData>(MessageElement.FindElement(mm,"sensor_data"));
    s.point_cloud =MessageElementUtil.UnpackStructure<com.robotraconteur.pointcloud.PointCloudPartf>(MessageElement.FindElement(mm,"point_cloud"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class PointCloud2SensorData_stub : IStructureStub {
    public PointCloud2SensorData_stub(com__robotraconteur__pointcloud__sensorFactory d) {def=d;}
    private com__robotraconteur__pointcloud__sensorFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    PointCloud2SensorData s = (PointCloud2SensorData)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("sensor_data",s.sensor_data));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("point_cloud",s.point_cloud));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.pointcloud.sensor.PointCloud2SensorData",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    PointCloud2SensorData s=new PointCloud2SensorData();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.sensor_data =MessageElementUtil.UnpackStructure<com.robotraconteur.sensor.SensorData>(MessageElement.FindElement(mm,"sensor_data"));
    s.point_cloud =MessageElementUtil.UnpackStructure<com.robotraconteur.pointcloud.PointCloud2f>(MessageElement.FindElement(mm,"point_cloud"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class PointCloud2PartSensorData_stub : IStructureStub {
    public PointCloud2PartSensorData_stub(com__robotraconteur__pointcloud__sensorFactory d) {def=d;}
    private com__robotraconteur__pointcloud__sensorFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    PointCloud2PartSensorData s = (PointCloud2PartSensorData)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("sensor_data",s.sensor_data));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("point_cloud",s.point_cloud));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.pointcloud.sensor.PointCloud2PartSensorData",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    PointCloud2PartSensorData s=new PointCloud2PartSensorData();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.sensor_data =MessageElementUtil.UnpackStructure<com.robotraconteur.sensor.SensorData>(MessageElement.FindElement(mm,"sensor_data"));
    s.point_cloud =MessageElementUtil.UnpackStructure<com.robotraconteur.pointcloud.PointCloud2Partf>(MessageElement.FindElement(mm,"point_cloud"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public interface async_PointCloudSensor : com.robotraconteur.device.async_Device, com.robotraconteur.device.clock.async_DeviceClock, com.robotraconteur.device.isoch.async_IsochDevice
{
    Task<com.robotraconteur.device.DeviceInfo> async_get_device_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<PointCloudSensorInfo> async_get_point_sensor_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<com.robotraconteur.device.isoch.IsochInfo> async_get_isoch_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<uint> async_get_isoch_downsample(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_isoch_downsample(uint value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<com.robotraconteur.pointcloud.PointCloudf> async_capture_point_cloud(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<object> async_getf_param(string param_name,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_setf_param(string param_name, object value_,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
}
public class PointCloudSensor_stub : ServiceStub , PointCloudSensor, async_PointCloudSensor{
    private Pipe<PointCloudSensorData> rr_point_cloud_sensor_data;
    private Wire<com.robotraconteur.device.clock.DeviceTime> rr_device_clock_now;
    public PointCloudSensor_stub(WrappedServiceStub innerstub) : base(innerstub) {
    rr_point_cloud_sensor_data=new Pipe<PointCloudSensorData>(innerstub.GetPipe("point_cloud_sensor_data"));
    rr_device_clock_now=new Wire<com.robotraconteur.device.clock.DeviceTime>(innerstub.GetWire("device_clock_now"));
    }
    public com.robotraconteur.device.DeviceInfo device_info {
    get {
    return MessageElementUtil.UnpackStructure<com.robotraconteur.device.DeviceInfo>(rr_innerstub.PropertyGet("device_info"));
    }
    }
    public PointCloudSensorInfo point_sensor_info {
    get {
    return MessageElementUtil.UnpackStructure<PointCloudSensorInfo>(rr_innerstub.PropertyGet("point_sensor_info"));
    }
    }
    public com.robotraconteur.device.isoch.IsochInfo isoch_info {
    get {
    return MessageElementUtil.UnpackStructure<com.robotraconteur.device.isoch.IsochInfo>(rr_innerstub.PropertyGet("isoch_info"));
    }
    }
    public uint isoch_downsample {
    get {
    return (MessageElementUtil.UnpackScalar<uint>(rr_innerstub.PropertyGet("isoch_downsample")));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackScalar<uint>("value",value))
    {
    rr_innerstub.PropertySet("isoch_downsample", m);
    }
    }
    }
    public com.robotraconteur.pointcloud.PointCloudf capture_point_cloud() {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    using(MessageElement rr_me=rr_innerstub.FunctionCall("capture_point_cloud",rr_param))
    {
    return MessageElementUtil.UnpackStructure<com.robotraconteur.pointcloud.PointCloudf>(rr_me);
    }
    }
    }
    public object getf_param(string param_name) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("param_name",param_name));
    using(MessageElement rr_me=rr_innerstub.FunctionCall("getf_param",rr_param))
    {
    return MessageElementUtil.UnpackVarType(rr_me);
    }
    }
    }
    public void setf_param(string param_name, object value_) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("param_name",param_name));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackVarType("value",value_));
    using(MessageElement rr_me=rr_innerstub.FunctionCall("setf_param",rr_param))
    {
    }
    }
    }
    public override void DispatchEvent(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    }
    public Pipe<PointCloudSensorData> point_cloud_sensor_data {
    get { return rr_point_cloud_sensor_data;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<com.robotraconteur.device.clock.DeviceTime> device_clock_now {
    get { return rr_device_clock_now;  }
    set { throw new InvalidOperationException();}
    }
    public override MessageElement CallbackCall(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public virtual async Task<com.robotraconteur.device.DeviceInfo> async_get_device_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("device_info",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<com.robotraconteur.device.DeviceInfo>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<PointCloudSensorInfo> async_get_point_sensor_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("point_sensor_info",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<PointCloudSensorInfo>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<com.robotraconteur.device.isoch.IsochInfo> async_get_isoch_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("isoch_info",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<com.robotraconteur.device.isoch.IsochInfo>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<uint> async_get_isoch_downsample(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("isoch_downsample",rr_timeout)) {
    var rr_ret=(MessageElementUtil.UnpackScalar<uint>(rr_value));
    return rr_ret;
    } }
    public virtual async Task async_set_isoch_downsample(uint value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackScalar<uint>("value",value))
    {
    await rr_async_PropertySet("isoch_downsample",mm,rr_timeout);
    }
    }
    public virtual async Task<com.robotraconteur.pointcloud.PointCloudf> async_capture_point_cloud(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    using(var rr_return = await rr_async_FunctionCall("capture_point_cloud",rr_param,rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<com.robotraconteur.pointcloud.PointCloudf>(rr_return);
    return rr_ret;
    } } }
    public virtual async Task<object> async_getf_param(string param_name,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("param_name",param_name));
    using(var rr_return = await rr_async_FunctionCall("getf_param",rr_param,rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackVarType(rr_return);
    return rr_ret;
    } } }
    public virtual async Task async_setf_param(string param_name, object value_,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("param_name",param_name));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackVarType("value",value_));
    using(var rr_return = await rr_async_FunctionCall("setf_param",rr_param,rr_timeout)) {
    } } }
}
public interface async_PointCloudPartSensor : com.robotraconteur.device.async_Device, com.robotraconteur.device.clock.async_DeviceClock, com.robotraconteur.device.isoch.async_IsochDevice
{
    Task<com.robotraconteur.device.DeviceInfo> async_get_device_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<PointCloudSensorInfo> async_get_point_sensor_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<com.robotraconteur.device.isoch.IsochInfo> async_get_isoch_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<uint> async_get_isoch_downsample(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_isoch_downsample(uint value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<Generator2<com.robotraconteur.pointcloud.PointCloudPartf>> async_capture_point_cloud(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<object> async_getf_param(string param_name,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_setf_param(string param_name, object value_,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
}
public class PointCloudPartSensor_stub : ServiceStub , PointCloudPartSensor, async_PointCloudPartSensor{
    private Pipe<PointCloudPartSensorData> rr_point_cloud_sensor_data;
    private Wire<com.robotraconteur.device.clock.DeviceTime> rr_device_clock_now;
    public PointCloudPartSensor_stub(WrappedServiceStub innerstub) : base(innerstub) {
    rr_point_cloud_sensor_data=new Pipe<PointCloudPartSensorData>(innerstub.GetPipe("point_cloud_sensor_data"));
    rr_device_clock_now=new Wire<com.robotraconteur.device.clock.DeviceTime>(innerstub.GetWire("device_clock_now"));
    }
    public com.robotraconteur.device.DeviceInfo device_info {
    get {
    return MessageElementUtil.UnpackStructure<com.robotraconteur.device.DeviceInfo>(rr_innerstub.PropertyGet("device_info"));
    }
    }
    public PointCloudSensorInfo point_sensor_info {
    get {
    return MessageElementUtil.UnpackStructure<PointCloudSensorInfo>(rr_innerstub.PropertyGet("point_sensor_info"));
    }
    }
    public com.robotraconteur.device.isoch.IsochInfo isoch_info {
    get {
    return MessageElementUtil.UnpackStructure<com.robotraconteur.device.isoch.IsochInfo>(rr_innerstub.PropertyGet("isoch_info"));
    }
    }
    public uint isoch_downsample {
    get {
    return (MessageElementUtil.UnpackScalar<uint>(rr_innerstub.PropertyGet("isoch_downsample")));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackScalar<uint>("value",value))
    {
    rr_innerstub.PropertySet("isoch_downsample", m);
    }
    }
    }
    public Generator2<com.robotraconteur.pointcloud.PointCloudPartf> capture_point_cloud() {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    WrappedGeneratorClient generator_client = rr_innerstub.GeneratorFunctionCall("capture_point_cloud",rr_param);
    return new Generator2Client<com.robotraconteur.pointcloud.PointCloudPartf>(generator_client);
    }
    }
    public object getf_param(string param_name) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("param_name",param_name));
    using(MessageElement rr_me=rr_innerstub.FunctionCall("getf_param",rr_param))
    {
    return MessageElementUtil.UnpackVarType(rr_me);
    }
    }
    }
    public void setf_param(string param_name, object value_) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("param_name",param_name));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackVarType("value",value_));
    using(MessageElement rr_me=rr_innerstub.FunctionCall("setf_param",rr_param))
    {
    }
    }
    }
    public override void DispatchEvent(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    }
    public Pipe<PointCloudPartSensorData> point_cloud_sensor_data {
    get { return rr_point_cloud_sensor_data;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<com.robotraconteur.device.clock.DeviceTime> device_clock_now {
    get { return rr_device_clock_now;  }
    set { throw new InvalidOperationException();}
    }
    public override MessageElement CallbackCall(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public virtual async Task<com.robotraconteur.device.DeviceInfo> async_get_device_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("device_info",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<com.robotraconteur.device.DeviceInfo>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<PointCloudSensorInfo> async_get_point_sensor_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("point_sensor_info",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<PointCloudSensorInfo>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<com.robotraconteur.device.isoch.IsochInfo> async_get_isoch_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("isoch_info",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<com.robotraconteur.device.isoch.IsochInfo>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<uint> async_get_isoch_downsample(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("isoch_downsample",rr_timeout)) {
    var rr_ret=(MessageElementUtil.UnpackScalar<uint>(rr_value));
    return rr_ret;
    } }
    public virtual async Task async_set_isoch_downsample(uint value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackScalar<uint>("value",value))
    {
    await rr_async_PropertySet("isoch_downsample",mm,rr_timeout);
    }
    }
    public virtual async Task<Generator2<com.robotraconteur.pointcloud.PointCloudPartf>> async_capture_point_cloud(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    var rr_return = await rr_async_GeneratorFunctionCall("capture_point_cloud",rr_param,rr_timeout);
    Generator2Client< com.robotraconteur.pointcloud.PointCloudPartf> rr_ret=new Generator2Client< com.robotraconteur.pointcloud.PointCloudPartf>(rr_return);
    return rr_ret;
    } }
    public virtual async Task<object> async_getf_param(string param_name,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("param_name",param_name));
    using(var rr_return = await rr_async_FunctionCall("getf_param",rr_param,rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackVarType(rr_return);
    return rr_ret;
    } } }
    public virtual async Task async_setf_param(string param_name, object value_,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("param_name",param_name));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackVarType("value",value_));
    using(var rr_return = await rr_async_FunctionCall("setf_param",rr_param,rr_timeout)) {
    } } }
}
public interface async_PointCloud2Sensor : async_PointCloudSensor, com.robotraconteur.device.async_Device, com.robotraconteur.device.clock.async_DeviceClock, com.robotraconteur.device.isoch.async_IsochDevice
{
    Task<com.robotraconteur.device.DeviceInfo> async_get_device_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<PointCloudSensorInfo> async_get_point_sensor_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<com.robotraconteur.device.isoch.IsochInfo> async_get_isoch_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<uint> async_get_isoch_downsample(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_isoch_downsample(uint value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<com.robotraconteur.pointcloud.PointCloudf> async_capture_point_cloud(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<com.robotraconteur.pointcloud.PointCloud2f> async_capture_point_cloud2(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<object> async_getf_param(string param_name,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_setf_param(string param_name, object value_,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
}
public class PointCloud2Sensor_stub : ServiceStub , PointCloud2Sensor, async_PointCloud2Sensor{
    private Pipe<PointCloudSensorData> rr_point_cloud_sensor_data;
    private Pipe<PointCloud2SensorData> rr_point_cloud2_sensor_data;
    private Wire<com.robotraconteur.device.clock.DeviceTime> rr_device_clock_now;
    public PointCloud2Sensor_stub(WrappedServiceStub innerstub) : base(innerstub) {
    rr_point_cloud_sensor_data=new Pipe<PointCloudSensorData>(innerstub.GetPipe("point_cloud_sensor_data"));
    rr_point_cloud2_sensor_data=new Pipe<PointCloud2SensorData>(innerstub.GetPipe("point_cloud2_sensor_data"));
    rr_device_clock_now=new Wire<com.robotraconteur.device.clock.DeviceTime>(innerstub.GetWire("device_clock_now"));
    }
    public com.robotraconteur.device.DeviceInfo device_info {
    get {
    return MessageElementUtil.UnpackStructure<com.robotraconteur.device.DeviceInfo>(rr_innerstub.PropertyGet("device_info"));
    }
    }
    public PointCloudSensorInfo point_sensor_info {
    get {
    return MessageElementUtil.UnpackStructure<PointCloudSensorInfo>(rr_innerstub.PropertyGet("point_sensor_info"));
    }
    }
    public com.robotraconteur.device.isoch.IsochInfo isoch_info {
    get {
    return MessageElementUtil.UnpackStructure<com.robotraconteur.device.isoch.IsochInfo>(rr_innerstub.PropertyGet("isoch_info"));
    }
    }
    public uint isoch_downsample {
    get {
    return (MessageElementUtil.UnpackScalar<uint>(rr_innerstub.PropertyGet("isoch_downsample")));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackScalar<uint>("value",value))
    {
    rr_innerstub.PropertySet("isoch_downsample", m);
    }
    }
    }
    public com.robotraconteur.pointcloud.PointCloudf capture_point_cloud() {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    using(MessageElement rr_me=rr_innerstub.FunctionCall("capture_point_cloud",rr_param))
    {
    return MessageElementUtil.UnpackStructure<com.robotraconteur.pointcloud.PointCloudf>(rr_me);
    }
    }
    }
    public com.robotraconteur.pointcloud.PointCloud2f capture_point_cloud2() {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    using(MessageElement rr_me=rr_innerstub.FunctionCall("capture_point_cloud2",rr_param))
    {
    return MessageElementUtil.UnpackStructure<com.robotraconteur.pointcloud.PointCloud2f>(rr_me);
    }
    }
    }
    public object getf_param(string param_name) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("param_name",param_name));
    using(MessageElement rr_me=rr_innerstub.FunctionCall("getf_param",rr_param))
    {
    return MessageElementUtil.UnpackVarType(rr_me);
    }
    }
    }
    public void setf_param(string param_name, object value_) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("param_name",param_name));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackVarType("value",value_));
    using(MessageElement rr_me=rr_innerstub.FunctionCall("setf_param",rr_param))
    {
    }
    }
    }
    public override void DispatchEvent(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    }
    public Pipe<PointCloudSensorData> point_cloud_sensor_data {
    get { return rr_point_cloud_sensor_data;  }
    set { throw new InvalidOperationException();}
    }
    public Pipe<PointCloud2SensorData> point_cloud2_sensor_data {
    get { return rr_point_cloud2_sensor_data;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<com.robotraconteur.device.clock.DeviceTime> device_clock_now {
    get { return rr_device_clock_now;  }
    set { throw new InvalidOperationException();}
    }
    public override MessageElement CallbackCall(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public virtual async Task<com.robotraconteur.device.DeviceInfo> async_get_device_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("device_info",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<com.robotraconteur.device.DeviceInfo>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<PointCloudSensorInfo> async_get_point_sensor_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("point_sensor_info",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<PointCloudSensorInfo>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<com.robotraconteur.device.isoch.IsochInfo> async_get_isoch_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("isoch_info",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<com.robotraconteur.device.isoch.IsochInfo>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<uint> async_get_isoch_downsample(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("isoch_downsample",rr_timeout)) {
    var rr_ret=(MessageElementUtil.UnpackScalar<uint>(rr_value));
    return rr_ret;
    } }
    public virtual async Task async_set_isoch_downsample(uint value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackScalar<uint>("value",value))
    {
    await rr_async_PropertySet("isoch_downsample",mm,rr_timeout);
    }
    }
    public virtual async Task<com.robotraconteur.pointcloud.PointCloudf> async_capture_point_cloud(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    using(var rr_return = await rr_async_FunctionCall("capture_point_cloud",rr_param,rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<com.robotraconteur.pointcloud.PointCloudf>(rr_return);
    return rr_ret;
    } } }
    public virtual async Task<com.robotraconteur.pointcloud.PointCloud2f> async_capture_point_cloud2(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    using(var rr_return = await rr_async_FunctionCall("capture_point_cloud2",rr_param,rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<com.robotraconteur.pointcloud.PointCloud2f>(rr_return);
    return rr_ret;
    } } }
    public virtual async Task<object> async_getf_param(string param_name,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("param_name",param_name));
    using(var rr_return = await rr_async_FunctionCall("getf_param",rr_param,rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackVarType(rr_return);
    return rr_ret;
    } } }
    public virtual async Task async_setf_param(string param_name, object value_,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("param_name",param_name));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackVarType("value",value_));
    using(var rr_return = await rr_async_FunctionCall("setf_param",rr_param,rr_timeout)) {
    } } }
}
public interface async_PointCloud2PartSensor : async_PointCloudPartSensor, com.robotraconteur.device.async_Device, com.robotraconteur.device.clock.async_DeviceClock, com.robotraconteur.device.isoch.async_IsochDevice
{
    Task<com.robotraconteur.device.DeviceInfo> async_get_device_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<PointCloudSensorInfo> async_get_point_sensor_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<com.robotraconteur.device.isoch.IsochInfo> async_get_isoch_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<uint> async_get_isoch_downsample(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_isoch_downsample(uint value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<Generator2<com.robotraconteur.pointcloud.PointCloudPartf>> async_capture_point_cloud(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<Generator2<com.robotraconteur.pointcloud.PointCloud2Partf>> async_capture_point_cloud2(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<object> async_getf_param(string param_name,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_setf_param(string param_name, object value_,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
}
public class PointCloud2PartSensor_stub : ServiceStub , PointCloud2PartSensor, async_PointCloud2PartSensor{
    private Pipe<PointCloudPartSensorData> rr_point_cloud_sensor_data;
    private Pipe<PointCloud2PartSensorData> rr_point_cloud2_sensor_data;
    private Wire<com.robotraconteur.device.clock.DeviceTime> rr_device_clock_now;
    public PointCloud2PartSensor_stub(WrappedServiceStub innerstub) : base(innerstub) {
    rr_point_cloud_sensor_data=new Pipe<PointCloudPartSensorData>(innerstub.GetPipe("point_cloud_sensor_data"));
    rr_point_cloud2_sensor_data=new Pipe<PointCloud2PartSensorData>(innerstub.GetPipe("point_cloud2_sensor_data"));
    rr_device_clock_now=new Wire<com.robotraconteur.device.clock.DeviceTime>(innerstub.GetWire("device_clock_now"));
    }
    public com.robotraconteur.device.DeviceInfo device_info {
    get {
    return MessageElementUtil.UnpackStructure<com.robotraconteur.device.DeviceInfo>(rr_innerstub.PropertyGet("device_info"));
    }
    }
    public PointCloudSensorInfo point_sensor_info {
    get {
    return MessageElementUtil.UnpackStructure<PointCloudSensorInfo>(rr_innerstub.PropertyGet("point_sensor_info"));
    }
    }
    public com.robotraconteur.device.isoch.IsochInfo isoch_info {
    get {
    return MessageElementUtil.UnpackStructure<com.robotraconteur.device.isoch.IsochInfo>(rr_innerstub.PropertyGet("isoch_info"));
    }
    }
    public uint isoch_downsample {
    get {
    return (MessageElementUtil.UnpackScalar<uint>(rr_innerstub.PropertyGet("isoch_downsample")));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackScalar<uint>("value",value))
    {
    rr_innerstub.PropertySet("isoch_downsample", m);
    }
    }
    }
    public Generator2<com.robotraconteur.pointcloud.PointCloudPartf> capture_point_cloud() {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    WrappedGeneratorClient generator_client = rr_innerstub.GeneratorFunctionCall("capture_point_cloud",rr_param);
    return new Generator2Client<com.robotraconteur.pointcloud.PointCloudPartf>(generator_client);
    }
    }
    public Generator2<com.robotraconteur.pointcloud.PointCloud2Partf> capture_point_cloud2() {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    WrappedGeneratorClient generator_client = rr_innerstub.GeneratorFunctionCall("capture_point_cloud2",rr_param);
    return new Generator2Client<com.robotraconteur.pointcloud.PointCloud2Partf>(generator_client);
    }
    }
    public object getf_param(string param_name) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("param_name",param_name));
    using(MessageElement rr_me=rr_innerstub.FunctionCall("getf_param",rr_param))
    {
    return MessageElementUtil.UnpackVarType(rr_me);
    }
    }
    }
    public void setf_param(string param_name, object value_) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("param_name",param_name));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackVarType("value",value_));
    using(MessageElement rr_me=rr_innerstub.FunctionCall("setf_param",rr_param))
    {
    }
    }
    }
    public override void DispatchEvent(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    }
    public Pipe<PointCloudPartSensorData> point_cloud_sensor_data {
    get { return rr_point_cloud_sensor_data;  }
    set { throw new InvalidOperationException();}
    }
    public Pipe<PointCloud2PartSensorData> point_cloud2_sensor_data {
    get { return rr_point_cloud2_sensor_data;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<com.robotraconteur.device.clock.DeviceTime> device_clock_now {
    get { return rr_device_clock_now;  }
    set { throw new InvalidOperationException();}
    }
    public override MessageElement CallbackCall(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public virtual async Task<com.robotraconteur.device.DeviceInfo> async_get_device_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("device_info",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<com.robotraconteur.device.DeviceInfo>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<PointCloudSensorInfo> async_get_point_sensor_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("point_sensor_info",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<PointCloudSensorInfo>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<com.robotraconteur.device.isoch.IsochInfo> async_get_isoch_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("isoch_info",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<com.robotraconteur.device.isoch.IsochInfo>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<uint> async_get_isoch_downsample(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("isoch_downsample",rr_timeout)) {
    var rr_ret=(MessageElementUtil.UnpackScalar<uint>(rr_value));
    return rr_ret;
    } }
    public virtual async Task async_set_isoch_downsample(uint value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackScalar<uint>("value",value))
    {
    await rr_async_PropertySet("isoch_downsample",mm,rr_timeout);
    }
    }
    public virtual async Task<Generator2<com.robotraconteur.pointcloud.PointCloudPartf>> async_capture_point_cloud(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    var rr_return = await rr_async_GeneratorFunctionCall("capture_point_cloud",rr_param,rr_timeout);
    Generator2Client< com.robotraconteur.pointcloud.PointCloudPartf> rr_ret=new Generator2Client< com.robotraconteur.pointcloud.PointCloudPartf>(rr_return);
    return rr_ret;
    } }
    public virtual async Task<Generator2<com.robotraconteur.pointcloud.PointCloud2Partf>> async_capture_point_cloud2(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    var rr_return = await rr_async_GeneratorFunctionCall("capture_point_cloud2",rr_param,rr_timeout);
    Generator2Client< com.robotraconteur.pointcloud.PointCloud2Partf> rr_ret=new Generator2Client< com.robotraconteur.pointcloud.PointCloud2Partf>(rr_return);
    return rr_ret;
    } }
    public virtual async Task<object> async_getf_param(string param_name,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("param_name",param_name));
    using(var rr_return = await rr_async_FunctionCall("getf_param",rr_param,rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackVarType(rr_return);
    return rr_ret;
    } } }
    public virtual async Task async_setf_param(string param_name, object value_,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("param_name",param_name));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackVarType("value",value_));
    using(var rr_return = await rr_async_FunctionCall("setf_param",rr_param,rr_timeout)) {
    } } }
}
public class PointCloudSensor_skel : ServiceSkel {
    protected PointCloudSensor obj;
    protected async_PointCloudSensor async_obj;
    public PointCloudSensor_skel(object o) : base(o)    {
    obj=(PointCloudSensor)o;
    async_obj = o as async_PointCloudSensor;
    }
    public override void ReleaseCastObject() { 
    obj=null;
    async_obj=null;
    base.ReleaseCastObject();
    }
    public override MessageElement CallGetProperty(string membername, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    case "device_info":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_device_info().ContinueWith(t => async_adapter.EndTask<com.robotraconteur.device.DeviceInfo>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    com.robotraconteur.device.DeviceInfo ret=obj.device_info;
    return MessageElementUtil.PackStructure("return",ret);
    }
    case "point_sensor_info":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_point_sensor_info().ContinueWith(t => async_adapter.EndTask<PointCloudSensorInfo>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    PointCloudSensorInfo ret=obj.point_sensor_info;
    return MessageElementUtil.PackStructure("return",ret);
    }
    case "isoch_info":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_isoch_info().ContinueWith(t => async_adapter.EndTask<com.robotraconteur.device.isoch.IsochInfo>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    com.robotraconteur.device.isoch.IsochInfo ret=obj.isoch_info;
    return MessageElementUtil.PackStructure("return",ret);
    }
    case "isoch_downsample":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_isoch_downsample().ContinueWith(t => async_adapter.EndTask<uint>(t,async_ret => MessageElementUtil.PackScalar<uint>("return",async_ret)));
    return null;
    }
    uint ret=obj.isoch_downsample;
    return MessageElementUtil.PackScalar<uint>("return",ret);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void CallSetProperty(string membername, MessageElement m, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    case "isoch_downsample":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_isoch_downsample((MessageElementUtil.UnpackScalar<uint>(m))).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.isoch_downsample=(MessageElementUtil.UnpackScalar<uint>(m));
    return;
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override MessageElement CallFunction(string rr_membername, vectorptr_messageelement rr_m, WrappedServiceSkelAsyncAdapter rr_async_adapter) {
    switch (rr_membername) {
    case "capture_point_cloud":
    {
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_capture_point_cloud().ContinueWith(t => rr_async_adapter.EndTask<com.robotraconteur.pointcloud.PointCloudf>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    com.robotraconteur.pointcloud.PointCloudf rr_ret=this.obj.capture_point_cloud();
    return MessageElementUtil.PackStructure("return",rr_ret);
    }
    case "getf_param":
    {
    string param_name=MessageElementUtil.UnpackString(vectorptr_messageelement_util.FindElement(rr_m,"param_name"));
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_getf_param(param_name).ContinueWith(t => rr_async_adapter.EndTask<object>(t,async_ret => MessageElementUtil.PackVarType("return",async_ret)));
    return null;
    }
    object rr_ret=this.obj.getf_param(param_name);
    return MessageElementUtil.PackVarType("return",rr_ret);
    }
    case "setf_param":
    {
    string param_name=MessageElementUtil.UnpackString(vectorptr_messageelement_util.FindElement(rr_m,"param_name"));
    object value_=MessageElementUtil.UnpackVarType(vectorptr_messageelement_util.FindElement(rr_m,"value"));
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_setf_param(param_name, value_).ContinueWith(t => rr_async_adapter.EndTask(t,new MessageElement("return",(int)0)));
    return null;
    }
    this.obj.setf_param(param_name, value_);
    return new MessageElement("return",(int)0);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override object GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(PointCloudSensor)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(PointCloudSensor)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void InitPipeServers(object rrobj1) {
    obj=(PointCloudSensor)rrobj1;
    obj.point_cloud_sensor_data=new Pipe<PointCloudSensorData>(innerskel.GetPipe("point_cloud_sensor_data"));
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(PointCloudSensor)rrobj1;
    }
    public override void InitWireServers(object rrobj1) {
    obj=(PointCloudSensor)rrobj1;
    obj.device_clock_now=new Wire<com.robotraconteur.device.clock.DeviceTime>(innerskel.GetWire("device_clock_now"));
    }
    public override WrappedArrayMemoryDirector GetArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedMultiDimArrayMemoryDirector GetMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodArrayMemoryDirector GetPodArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodMultiDimArrayMemoryDirector GetPodMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedArrayMemoryDirector GetNamedArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedMultiDimArrayMemoryDirector GetNamedMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override string RRType { get { return "com.robotraconteur.pointcloud.sensor.PointCloudSensor"; } }
}
public class PointCloudPartSensor_skel : ServiceSkel {
    protected PointCloudPartSensor obj;
    protected async_PointCloudPartSensor async_obj;
    public PointCloudPartSensor_skel(object o) : base(o)    {
    obj=(PointCloudPartSensor)o;
    async_obj = o as async_PointCloudPartSensor;
    }
    public override void ReleaseCastObject() { 
    obj=null;
    async_obj=null;
    base.ReleaseCastObject();
    }
    public override MessageElement CallGetProperty(string membername, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    case "device_info":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_device_info().ContinueWith(t => async_adapter.EndTask<com.robotraconteur.device.DeviceInfo>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    com.robotraconteur.device.DeviceInfo ret=obj.device_info;
    return MessageElementUtil.PackStructure("return",ret);
    }
    case "point_sensor_info":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_point_sensor_info().ContinueWith(t => async_adapter.EndTask<PointCloudSensorInfo>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    PointCloudSensorInfo ret=obj.point_sensor_info;
    return MessageElementUtil.PackStructure("return",ret);
    }
    case "isoch_info":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_isoch_info().ContinueWith(t => async_adapter.EndTask<com.robotraconteur.device.isoch.IsochInfo>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    com.robotraconteur.device.isoch.IsochInfo ret=obj.isoch_info;
    return MessageElementUtil.PackStructure("return",ret);
    }
    case "isoch_downsample":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_isoch_downsample().ContinueWith(t => async_adapter.EndTask<uint>(t,async_ret => MessageElementUtil.PackScalar<uint>("return",async_ret)));
    return null;
    }
    uint ret=obj.isoch_downsample;
    return MessageElementUtil.PackScalar<uint>("return",ret);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void CallSetProperty(string membername, MessageElement m, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    case "isoch_downsample":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_isoch_downsample((MessageElementUtil.UnpackScalar<uint>(m))).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.isoch_downsample=(MessageElementUtil.UnpackScalar<uint>(m));
    return;
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override MessageElement CallFunction(string rr_membername, vectorptr_messageelement rr_m, WrappedServiceSkelAsyncAdapter rr_async_adapter) {
    switch (rr_membername) {
    case "capture_point_cloud":
    {
    Generator2<com.robotraconteur.pointcloud.PointCloudPartf> rr_ret=this.obj.capture_point_cloud();
    int generator_index = innerskel.RegisterGeneratorServer("capture_point_cloud", new WrappedGenerator2ServerDirectorNET<com.robotraconteur.pointcloud.PointCloudPartf>(rr_ret));
    return new MessageElement("index",generator_index);
    }
    case "getf_param":
    {
    string param_name=MessageElementUtil.UnpackString(vectorptr_messageelement_util.FindElement(rr_m,"param_name"));
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_getf_param(param_name).ContinueWith(t => rr_async_adapter.EndTask<object>(t,async_ret => MessageElementUtil.PackVarType("return",async_ret)));
    return null;
    }
    object rr_ret=this.obj.getf_param(param_name);
    return MessageElementUtil.PackVarType("return",rr_ret);
    }
    case "setf_param":
    {
    string param_name=MessageElementUtil.UnpackString(vectorptr_messageelement_util.FindElement(rr_m,"param_name"));
    object value_=MessageElementUtil.UnpackVarType(vectorptr_messageelement_util.FindElement(rr_m,"value"));
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_setf_param(param_name, value_).ContinueWith(t => rr_async_adapter.EndTask(t,new MessageElement("return",(int)0)));
    return null;
    }
    this.obj.setf_param(param_name, value_);
    return new MessageElement("return",(int)0);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override object GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(PointCloudPartSensor)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(PointCloudPartSensor)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void InitPipeServers(object rrobj1) {
    obj=(PointCloudPartSensor)rrobj1;
    obj.point_cloud_sensor_data=new Pipe<PointCloudPartSensorData>(innerskel.GetPipe("point_cloud_sensor_data"));
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(PointCloudPartSensor)rrobj1;
    }
    public override void InitWireServers(object rrobj1) {
    obj=(PointCloudPartSensor)rrobj1;
    obj.device_clock_now=new Wire<com.robotraconteur.device.clock.DeviceTime>(innerskel.GetWire("device_clock_now"));
    }
    public override WrappedArrayMemoryDirector GetArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedMultiDimArrayMemoryDirector GetMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodArrayMemoryDirector GetPodArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodMultiDimArrayMemoryDirector GetPodMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedArrayMemoryDirector GetNamedArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedMultiDimArrayMemoryDirector GetNamedMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override string RRType { get { return "com.robotraconteur.pointcloud.sensor.PointCloudPartSensor"; } }
}
public class PointCloud2Sensor_skel : ServiceSkel {
    protected PointCloud2Sensor obj;
    protected async_PointCloud2Sensor async_obj;
    public PointCloud2Sensor_skel(object o) : base(o)    {
    obj=(PointCloud2Sensor)o;
    async_obj = o as async_PointCloud2Sensor;
    }
    public override void ReleaseCastObject() { 
    obj=null;
    async_obj=null;
    base.ReleaseCastObject();
    }
    public override MessageElement CallGetProperty(string membername, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    case "device_info":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_device_info().ContinueWith(t => async_adapter.EndTask<com.robotraconteur.device.DeviceInfo>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    com.robotraconteur.device.DeviceInfo ret=obj.device_info;
    return MessageElementUtil.PackStructure("return",ret);
    }
    case "point_sensor_info":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_point_sensor_info().ContinueWith(t => async_adapter.EndTask<PointCloudSensorInfo>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    PointCloudSensorInfo ret=obj.point_sensor_info;
    return MessageElementUtil.PackStructure("return",ret);
    }
    case "isoch_info":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_isoch_info().ContinueWith(t => async_adapter.EndTask<com.robotraconteur.device.isoch.IsochInfo>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    com.robotraconteur.device.isoch.IsochInfo ret=obj.isoch_info;
    return MessageElementUtil.PackStructure("return",ret);
    }
    case "isoch_downsample":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_isoch_downsample().ContinueWith(t => async_adapter.EndTask<uint>(t,async_ret => MessageElementUtil.PackScalar<uint>("return",async_ret)));
    return null;
    }
    uint ret=obj.isoch_downsample;
    return MessageElementUtil.PackScalar<uint>("return",ret);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void CallSetProperty(string membername, MessageElement m, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    case "isoch_downsample":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_isoch_downsample((MessageElementUtil.UnpackScalar<uint>(m))).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.isoch_downsample=(MessageElementUtil.UnpackScalar<uint>(m));
    return;
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override MessageElement CallFunction(string rr_membername, vectorptr_messageelement rr_m, WrappedServiceSkelAsyncAdapter rr_async_adapter) {
    switch (rr_membername) {
    case "capture_point_cloud":
    {
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_capture_point_cloud().ContinueWith(t => rr_async_adapter.EndTask<com.robotraconteur.pointcloud.PointCloudf>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    com.robotraconteur.pointcloud.PointCloudf rr_ret=this.obj.capture_point_cloud();
    return MessageElementUtil.PackStructure("return",rr_ret);
    }
    case "capture_point_cloud2":
    {
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_capture_point_cloud2().ContinueWith(t => rr_async_adapter.EndTask<com.robotraconteur.pointcloud.PointCloud2f>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    com.robotraconteur.pointcloud.PointCloud2f rr_ret=this.obj.capture_point_cloud2();
    return MessageElementUtil.PackStructure("return",rr_ret);
    }
    case "getf_param":
    {
    string param_name=MessageElementUtil.UnpackString(vectorptr_messageelement_util.FindElement(rr_m,"param_name"));
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_getf_param(param_name).ContinueWith(t => rr_async_adapter.EndTask<object>(t,async_ret => MessageElementUtil.PackVarType("return",async_ret)));
    return null;
    }
    object rr_ret=this.obj.getf_param(param_name);
    return MessageElementUtil.PackVarType("return",rr_ret);
    }
    case "setf_param":
    {
    string param_name=MessageElementUtil.UnpackString(vectorptr_messageelement_util.FindElement(rr_m,"param_name"));
    object value_=MessageElementUtil.UnpackVarType(vectorptr_messageelement_util.FindElement(rr_m,"value"));
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_setf_param(param_name, value_).ContinueWith(t => rr_async_adapter.EndTask(t,new MessageElement("return",(int)0)));
    return null;
    }
    this.obj.setf_param(param_name, value_);
    return new MessageElement("return",(int)0);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override object GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(PointCloud2Sensor)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(PointCloud2Sensor)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void InitPipeServers(object rrobj1) {
    obj=(PointCloud2Sensor)rrobj1;
    obj.point_cloud_sensor_data=new Pipe<PointCloudSensorData>(innerskel.GetPipe("point_cloud_sensor_data"));
    obj.point_cloud2_sensor_data=new Pipe<PointCloud2SensorData>(innerskel.GetPipe("point_cloud2_sensor_data"));
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(PointCloud2Sensor)rrobj1;
    }
    public override void InitWireServers(object rrobj1) {
    obj=(PointCloud2Sensor)rrobj1;
    obj.device_clock_now=new Wire<com.robotraconteur.device.clock.DeviceTime>(innerskel.GetWire("device_clock_now"));
    }
    public override WrappedArrayMemoryDirector GetArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedMultiDimArrayMemoryDirector GetMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodArrayMemoryDirector GetPodArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodMultiDimArrayMemoryDirector GetPodMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedArrayMemoryDirector GetNamedArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedMultiDimArrayMemoryDirector GetNamedMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override string RRType { get { return "com.robotraconteur.pointcloud.sensor.PointCloud2Sensor"; } }
}
public class PointCloud2PartSensor_skel : ServiceSkel {
    protected PointCloud2PartSensor obj;
    protected async_PointCloud2PartSensor async_obj;
    public PointCloud2PartSensor_skel(object o) : base(o)    {
    obj=(PointCloud2PartSensor)o;
    async_obj = o as async_PointCloud2PartSensor;
    }
    public override void ReleaseCastObject() { 
    obj=null;
    async_obj=null;
    base.ReleaseCastObject();
    }
    public override MessageElement CallGetProperty(string membername, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    case "device_info":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_device_info().ContinueWith(t => async_adapter.EndTask<com.robotraconteur.device.DeviceInfo>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    com.robotraconteur.device.DeviceInfo ret=obj.device_info;
    return MessageElementUtil.PackStructure("return",ret);
    }
    case "point_sensor_info":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_point_sensor_info().ContinueWith(t => async_adapter.EndTask<PointCloudSensorInfo>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    PointCloudSensorInfo ret=obj.point_sensor_info;
    return MessageElementUtil.PackStructure("return",ret);
    }
    case "isoch_info":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_isoch_info().ContinueWith(t => async_adapter.EndTask<com.robotraconteur.device.isoch.IsochInfo>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    com.robotraconteur.device.isoch.IsochInfo ret=obj.isoch_info;
    return MessageElementUtil.PackStructure("return",ret);
    }
    case "isoch_downsample":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_isoch_downsample().ContinueWith(t => async_adapter.EndTask<uint>(t,async_ret => MessageElementUtil.PackScalar<uint>("return",async_ret)));
    return null;
    }
    uint ret=obj.isoch_downsample;
    return MessageElementUtil.PackScalar<uint>("return",ret);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void CallSetProperty(string membername, MessageElement m, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    case "isoch_downsample":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_isoch_downsample((MessageElementUtil.UnpackScalar<uint>(m))).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.isoch_downsample=(MessageElementUtil.UnpackScalar<uint>(m));
    return;
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override MessageElement CallFunction(string rr_membername, vectorptr_messageelement rr_m, WrappedServiceSkelAsyncAdapter rr_async_adapter) {
    switch (rr_membername) {
    case "capture_point_cloud":
    {
    Generator2<com.robotraconteur.pointcloud.PointCloudPartf> rr_ret=this.obj.capture_point_cloud();
    int generator_index = innerskel.RegisterGeneratorServer("capture_point_cloud", new WrappedGenerator2ServerDirectorNET<com.robotraconteur.pointcloud.PointCloudPartf>(rr_ret));
    return new MessageElement("index",generator_index);
    }
    case "capture_point_cloud2":
    {
    Generator2<com.robotraconteur.pointcloud.PointCloud2Partf> rr_ret=this.obj.capture_point_cloud2();
    int generator_index = innerskel.RegisterGeneratorServer("capture_point_cloud2", new WrappedGenerator2ServerDirectorNET<com.robotraconteur.pointcloud.PointCloud2Partf>(rr_ret));
    return new MessageElement("index",generator_index);
    }
    case "getf_param":
    {
    string param_name=MessageElementUtil.UnpackString(vectorptr_messageelement_util.FindElement(rr_m,"param_name"));
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_getf_param(param_name).ContinueWith(t => rr_async_adapter.EndTask<object>(t,async_ret => MessageElementUtil.PackVarType("return",async_ret)));
    return null;
    }
    object rr_ret=this.obj.getf_param(param_name);
    return MessageElementUtil.PackVarType("return",rr_ret);
    }
    case "setf_param":
    {
    string param_name=MessageElementUtil.UnpackString(vectorptr_messageelement_util.FindElement(rr_m,"param_name"));
    object value_=MessageElementUtil.UnpackVarType(vectorptr_messageelement_util.FindElement(rr_m,"value"));
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_setf_param(param_name, value_).ContinueWith(t => rr_async_adapter.EndTask(t,new MessageElement("return",(int)0)));
    return null;
    }
    this.obj.setf_param(param_name, value_);
    return new MessageElement("return",(int)0);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override object GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(PointCloud2PartSensor)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(PointCloud2PartSensor)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void InitPipeServers(object rrobj1) {
    obj=(PointCloud2PartSensor)rrobj1;
    obj.point_cloud_sensor_data=new Pipe<PointCloudPartSensorData>(innerskel.GetPipe("point_cloud_sensor_data"));
    obj.point_cloud2_sensor_data=new Pipe<PointCloud2PartSensorData>(innerskel.GetPipe("point_cloud2_sensor_data"));
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(PointCloud2PartSensor)rrobj1;
    }
    public override void InitWireServers(object rrobj1) {
    obj=(PointCloud2PartSensor)rrobj1;
    obj.device_clock_now=new Wire<com.robotraconteur.device.clock.DeviceTime>(innerskel.GetWire("device_clock_now"));
    }
    public override WrappedArrayMemoryDirector GetArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedMultiDimArrayMemoryDirector GetMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodArrayMemoryDirector GetPodArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodMultiDimArrayMemoryDirector GetPodMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedArrayMemoryDirector GetNamedArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedMultiDimArrayMemoryDirector GetNamedMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override string RRType { get { return "com.robotraconteur.pointcloud.sensor.PointCloud2PartSensor"; } }
}
public class PointCloudSensor_default_impl : PointCloudSensor{
    protected PipeBroadcaster<PointCloudSensorData> rrvar_point_cloud_sensor_data;
    protected WireBroadcaster<com.robotraconteur.device.clock.DeviceTime> rrvar_device_clock_now;
    public virtual com.robotraconteur.device.DeviceInfo device_info {get; set;} = default(com.robotraconteur.device.DeviceInfo);
    public virtual PointCloudSensorInfo point_sensor_info {get; set;} = default(PointCloudSensorInfo);
    public virtual com.robotraconteur.device.isoch.IsochInfo isoch_info {get; set;} = default(com.robotraconteur.device.isoch.IsochInfo);
    public virtual uint isoch_downsample {get; set;} = default(uint);
    public virtual com.robotraconteur.pointcloud.PointCloudf capture_point_cloud() {
    throw new NotImplementedException();    }
    public virtual object getf_param(string param_name) {
    throw new NotImplementedException();    }
    public virtual void setf_param(string param_name, object value_) {
    throw new NotImplementedException();    }
    public virtual Pipe<PointCloudSensorData> point_cloud_sensor_data {
    get { return rrvar_point_cloud_sensor_data.Pipe;  }
    set {
    if (rrvar_point_cloud_sensor_data!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_point_cloud_sensor_data= new PipeBroadcaster<PointCloudSensorData>(value);
    }
    }
    public virtual Wire<com.robotraconteur.device.clock.DeviceTime> device_clock_now {
    get { return rrvar_device_clock_now.Wire;  }
    set {
    if (rrvar_device_clock_now!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_device_clock_now= new WireBroadcaster<com.robotraconteur.device.clock.DeviceTime>(value);
    }
    }
}
public class PointCloudPartSensor_default_impl : PointCloudPartSensor{
    protected PipeBroadcaster<PointCloudPartSensorData> rrvar_point_cloud_sensor_data;
    protected WireBroadcaster<com.robotraconteur.device.clock.DeviceTime> rrvar_device_clock_now;
    public virtual com.robotraconteur.device.DeviceInfo device_info {get; set;} = default(com.robotraconteur.device.DeviceInfo);
    public virtual PointCloudSensorInfo point_sensor_info {get; set;} = default(PointCloudSensorInfo);
    public virtual com.robotraconteur.device.isoch.IsochInfo isoch_info {get; set;} = default(com.robotraconteur.device.isoch.IsochInfo);
    public virtual uint isoch_downsample {get; set;} = default(uint);
    public virtual Generator2<com.robotraconteur.pointcloud.PointCloudPartf> capture_point_cloud() {
    throw new NotImplementedException();    }
    public virtual object getf_param(string param_name) {
    throw new NotImplementedException();    }
    public virtual void setf_param(string param_name, object value_) {
    throw new NotImplementedException();    }
    public virtual Pipe<PointCloudPartSensorData> point_cloud_sensor_data {
    get { return rrvar_point_cloud_sensor_data.Pipe;  }
    set {
    if (rrvar_point_cloud_sensor_data!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_point_cloud_sensor_data= new PipeBroadcaster<PointCloudPartSensorData>(value);
    }
    }
    public virtual Wire<com.robotraconteur.device.clock.DeviceTime> device_clock_now {
    get { return rrvar_device_clock_now.Wire;  }
    set {
    if (rrvar_device_clock_now!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_device_clock_now= new WireBroadcaster<com.robotraconteur.device.clock.DeviceTime>(value);
    }
    }
}
public class PointCloud2Sensor_default_impl : PointCloud2Sensor{
    protected PipeBroadcaster<PointCloudSensorData> rrvar_point_cloud_sensor_data;
    protected PipeBroadcaster<PointCloud2SensorData> rrvar_point_cloud2_sensor_data;
    protected WireBroadcaster<com.robotraconteur.device.clock.DeviceTime> rrvar_device_clock_now;
    public virtual com.robotraconteur.device.DeviceInfo device_info {get; set;} = default(com.robotraconteur.device.DeviceInfo);
    public virtual PointCloudSensorInfo point_sensor_info {get; set;} = default(PointCloudSensorInfo);
    public virtual com.robotraconteur.device.isoch.IsochInfo isoch_info {get; set;} = default(com.robotraconteur.device.isoch.IsochInfo);
    public virtual uint isoch_downsample {get; set;} = default(uint);
    public virtual com.robotraconteur.pointcloud.PointCloudf capture_point_cloud() {
    throw new NotImplementedException();    }
    public virtual com.robotraconteur.pointcloud.PointCloud2f capture_point_cloud2() {
    throw new NotImplementedException();    }
    public virtual object getf_param(string param_name) {
    throw new NotImplementedException();    }
    public virtual void setf_param(string param_name, object value_) {
    throw new NotImplementedException();    }
    public virtual Pipe<PointCloudSensorData> point_cloud_sensor_data {
    get { return rrvar_point_cloud_sensor_data.Pipe;  }
    set {
    if (rrvar_point_cloud_sensor_data!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_point_cloud_sensor_data= new PipeBroadcaster<PointCloudSensorData>(value);
    }
    }
    public virtual Pipe<PointCloud2SensorData> point_cloud2_sensor_data {
    get { return rrvar_point_cloud2_sensor_data.Pipe;  }
    set {
    if (rrvar_point_cloud2_sensor_data!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_point_cloud2_sensor_data= new PipeBroadcaster<PointCloud2SensorData>(value);
    }
    }
    public virtual Wire<com.robotraconteur.device.clock.DeviceTime> device_clock_now {
    get { return rrvar_device_clock_now.Wire;  }
    set {
    if (rrvar_device_clock_now!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_device_clock_now= new WireBroadcaster<com.robotraconteur.device.clock.DeviceTime>(value);
    }
    }
}
public class PointCloud2PartSensor_default_impl : PointCloud2PartSensor{
    protected PipeBroadcaster<PointCloudPartSensorData> rrvar_point_cloud_sensor_data;
    protected PipeBroadcaster<PointCloud2PartSensorData> rrvar_point_cloud2_sensor_data;
    protected WireBroadcaster<com.robotraconteur.device.clock.DeviceTime> rrvar_device_clock_now;
    public virtual com.robotraconteur.device.DeviceInfo device_info {get; set;} = default(com.robotraconteur.device.DeviceInfo);
    public virtual PointCloudSensorInfo point_sensor_info {get; set;} = default(PointCloudSensorInfo);
    public virtual com.robotraconteur.device.isoch.IsochInfo isoch_info {get; set;} = default(com.robotraconteur.device.isoch.IsochInfo);
    public virtual uint isoch_downsample {get; set;} = default(uint);
    public virtual Generator2<com.robotraconteur.pointcloud.PointCloudPartf> capture_point_cloud() {
    throw new NotImplementedException();    }
    public virtual Generator2<com.robotraconteur.pointcloud.PointCloud2Partf> capture_point_cloud2() {
    throw new NotImplementedException();    }
    public virtual object getf_param(string param_name) {
    throw new NotImplementedException();    }
    public virtual void setf_param(string param_name, object value_) {
    throw new NotImplementedException();    }
    public virtual Pipe<PointCloudPartSensorData> point_cloud_sensor_data {
    get { return rrvar_point_cloud_sensor_data.Pipe;  }
    set {
    if (rrvar_point_cloud_sensor_data!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_point_cloud_sensor_data= new PipeBroadcaster<PointCloudPartSensorData>(value);
    }
    }
    public virtual Pipe<PointCloud2PartSensorData> point_cloud2_sensor_data {
    get { return rrvar_point_cloud2_sensor_data.Pipe;  }
    set {
    if (rrvar_point_cloud2_sensor_data!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_point_cloud2_sensor_data= new PipeBroadcaster<PointCloud2PartSensorData>(value);
    }
    }
    public virtual Wire<com.robotraconteur.device.clock.DeviceTime> device_clock_now {
    get { return rrvar_device_clock_now.Wire;  }
    set {
    if (rrvar_device_clock_now!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_device_clock_now= new WireBroadcaster<com.robotraconteur.device.clock.DeviceTime>(value);
    }
    }
}
public static class RRExtensions{
}
}
namespace com.robotraconteur.resource.device
{
[RobotRaconteurServiceObjectInterface()]
public interface ResourceStorageDevice : com.robotraconteur.device.Device, com.robotraconteur.resource.ResourceReadOnlyStorage, com.robotraconteur.resource.ResourceStorage
{
    com.robotraconteur.device.DeviceInfo device_info { get; 	}
    List<com.robotraconteur.resource.BucketInfo> resource_bucket_info { get; 	}
    com.robotraconteur.resource.ResourceInfo resource_get_info(com.robotraconteur.resource.ResourceIdentifier identifier);
    Generator2<com.robotraconteur.resource.ResourcePart> resource_get(com.robotraconteur.resource.ResourceIdentifier identifier);
    Generator2<com.robotraconteur.resource.ResourcePart> resource_get_all(com.robotraconteur.identifier.Identifier bucket_identifier);
    void resource_bucket_add(com.robotraconteur.identifier.Identifier bucket_identifier);
    void resource_bucket_delete(com.robotraconteur.identifier.Identifier bucket_identifier);
    Generator3<com.robotraconteur.resource.ResourcePart> resource_set(com.robotraconteur.resource.ResourceIdentifier identifier, bool overwrite);
    void resource_delete(com.robotraconteur.resource.ResourceIdentifier identifier);
    void resource_copy(com.robotraconteur.resource.ResourceIdentifier identifier, com.robotraconteur.resource.ResourceIdentifier new_identifier, bool copy);
}

}
namespace com.robotraconteur.resource.device
{
public class com__robotraconteur__resource__deviceFactory : ServiceFactory
{
    public override string DefString()
{
    const string s="service com.robotraconteur.resource.device\n\nstdver 0.10\n\nimport com.robotraconteur.device\nimport com.robotraconteur.resource\nimport com.robotraconteur.identifier\n\nusing com.robotraconteur.identifier.Identifier\nusing com.robotraconteur.device.Device\nusing com.robotraconteur.device.DeviceInfo\nusing com.robotraconteur.resource.BucketInfo\nusing com.robotraconteur.resource.ResourceIdentifier\nusing com.robotraconteur.resource.ResourcePart\nusing com.robotraconteur.resource.ResourceInfo\nusing com.robotraconteur.resource.ResourceReadOnlyStorage\nusing com.robotraconteur.resource.ResourceStorage\n\nobject ResourceStorageDevice\nimplements Device\nimplements ResourceReadOnlyStorage\nimplements ResourceStorage\nproperty DeviceInfo device_info [readonly,nolock]\nproperty BucketInfo{list} resource_bucket_info [readonly,nolock]\nfunction ResourceInfo resource_get_info(ResourceIdentifier identifier)\nfunction ResourcePart{generator} resource_get(ResourceIdentifier identifier)\nfunction ResourcePart{generator} resource_get_all(Identifier bucket_identifier)\nfunction void resource_bucket_add(Identifier bucket_identifier)\nfunction void resource_bucket_delete(Identifier bucket_identifier)\nfunction void resource_set(ResourceIdentifier identifier, bool overwrite, ResourcePart{generator} resource)\nfunction void resource_delete(ResourceIdentifier identifier)\nfunction void resource_copy(ResourceIdentifier identifier, ResourceIdentifier new_identifier, bool copy)\nend\n\n";
    return s;
    }
    public override string GetServiceName() {return "com.robotraconteur.resource.device";}
    public com__robotraconteur__resource__deviceFactory()
{
    }
    public override IStructureStub FindStructureStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public override IPodStub FindPodStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override INamedArrayStub FindNamedArrayStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override ServiceStub CreateStub(WrappedServiceStub innerstub) {
    string objecttype=innerstub.RR_objecttype.GetServiceDefinition().Name + "." + innerstub.RR_objecttype.Name;    string objshort;
    if (CompareNamespace(objecttype, out objshort)) {
    switch (objshort) {
    case "ResourceStorageDevice":
    return new ResourceStorageDevice_stub(innerstub);
    default:
    break;
    }
    } else {
    string ext_service_type=RobotRaconteurNode.SplitQualifiedName(objecttype).Item1;
    return RobotRaconteurNode.s.GetServiceType(ext_service_type).CreateStub(innerstub);
    }
    throw new ServiceException("Could not create stub");
    }
    public override ServiceSkel CreateSkel(object obj) {
    string objtype = RobotRaconteurNode.GetTypeString(ServiceSkelUtil.FindParentInterface(obj.GetType()));
    string objshort;
    if (CompareNamespace(objtype, out objshort)) {
    switch(objshort) {
    case "ResourceStorageDevice":
    return new ResourceStorageDevice_skel((ResourceStorageDevice)obj);
    default:
    break;
    }
    } else {
    string ext_service_type=RobotRaconteurNode.SplitQualifiedName(objtype).Item1;
    return RobotRaconteurNode.s.GetServiceFactory(ext_service_type).CreateSkel(obj);
    }
    throw new ServiceException("Could not create skel");
    }
    public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp){
    if (rr_exp==null) return rr_exp;
    string rr_type=rr_exp.Error;
    if (!rr_type.Contains(".")) return rr_exp;
    string rr_stype;
    if (CompareNamespace(rr_type, out rr_stype)) {
    } else {
    return RobotRaconteurNode.s.DownCastException(rr_exp); 
    }
    return rr_exp;
    }
}

public interface async_ResourceStorageDevice : com.robotraconteur.device.async_Device, com.robotraconteur.resource.async_ResourceReadOnlyStorage, com.robotraconteur.resource.async_ResourceStorage
{
    Task<com.robotraconteur.device.DeviceInfo> async_get_device_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<List<com.robotraconteur.resource.BucketInfo>> async_get_resource_bucket_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<com.robotraconteur.resource.ResourceInfo> async_resource_get_info(com.robotraconteur.resource.ResourceIdentifier identifier,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<Generator2<com.robotraconteur.resource.ResourcePart>> async_resource_get(com.robotraconteur.resource.ResourceIdentifier identifier,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<Generator2<com.robotraconteur.resource.ResourcePart>> async_resource_get_all(com.robotraconteur.identifier.Identifier bucket_identifier,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_resource_bucket_add(com.robotraconteur.identifier.Identifier bucket_identifier,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_resource_bucket_delete(com.robotraconteur.identifier.Identifier bucket_identifier,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<Generator3<com.robotraconteur.resource.ResourcePart>> async_resource_set(com.robotraconteur.resource.ResourceIdentifier identifier, bool overwrite,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_resource_delete(com.robotraconteur.resource.ResourceIdentifier identifier,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_resource_copy(com.robotraconteur.resource.ResourceIdentifier identifier, com.robotraconteur.resource.ResourceIdentifier new_identifier, bool copy,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
}
public class ResourceStorageDevice_stub : ServiceStub , ResourceStorageDevice, async_ResourceStorageDevice{
    public ResourceStorageDevice_stub(WrappedServiceStub innerstub) : base(innerstub) {
    }
    public com.robotraconteur.device.DeviceInfo device_info {
    get {
    return MessageElementUtil.UnpackStructure<com.robotraconteur.device.DeviceInfo>(rr_innerstub.PropertyGet("device_info"));
    }
    }
    public List<com.robotraconteur.resource.BucketInfo> resource_bucket_info {
    get {
    return MessageElementUtil.UnpackList<com.robotraconteur.resource.BucketInfo>(rr_innerstub.PropertyGet("resource_bucket_info"));
    }
    }
    public com.robotraconteur.resource.ResourceInfo resource_get_info(com.robotraconteur.resource.ResourceIdentifier identifier) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackStructure("identifier",identifier));
    using(MessageElement rr_me=rr_innerstub.FunctionCall("resource_get_info",rr_param))
    {
    return MessageElementUtil.UnpackStructure<com.robotraconteur.resource.ResourceInfo>(rr_me);
    }
    }
    }
    public Generator2<com.robotraconteur.resource.ResourcePart> resource_get(com.robotraconteur.resource.ResourceIdentifier identifier) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackStructure("identifier",identifier));
    WrappedGeneratorClient generator_client = rr_innerstub.GeneratorFunctionCall("resource_get",rr_param);
    return new Generator2Client<com.robotraconteur.resource.ResourcePart>(generator_client);
    }
    }
    public Generator2<com.robotraconteur.resource.ResourcePart> resource_get_all(com.robotraconteur.identifier.Identifier bucket_identifier) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackStructure("bucket_identifier",bucket_identifier));
    WrappedGeneratorClient generator_client = rr_innerstub.GeneratorFunctionCall("resource_get_all",rr_param);
    return new Generator2Client<com.robotraconteur.resource.ResourcePart>(generator_client);
    }
    }
    public void resource_bucket_add(com.robotraconteur.identifier.Identifier bucket_identifier) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackStructure("bucket_identifier",bucket_identifier));
    using(MessageElement rr_me=rr_innerstub.FunctionCall("resource_bucket_add",rr_param))
    {
    }
    }
    }
    public void resource_bucket_delete(com.robotraconteur.identifier.Identifier bucket_identifier) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackStructure("bucket_identifier",bucket_identifier));
    using(MessageElement rr_me=rr_innerstub.FunctionCall("resource_bucket_delete",rr_param))
    {
    }
    }
    }
    public Generator3<com.robotraconteur.resource.ResourcePart> resource_set(com.robotraconteur.resource.ResourceIdentifier identifier, bool overwrite) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackStructure("identifier",identifier));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackScalar<bool>("overwrite",overwrite));
    WrappedGeneratorClient generator_client = rr_innerstub.GeneratorFunctionCall("resource_set",rr_param);
    return new Generator3Client<com.robotraconteur.resource.ResourcePart>(generator_client);
    }
    }
    public void resource_delete(com.robotraconteur.resource.ResourceIdentifier identifier) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackStructure("identifier",identifier));
    using(MessageElement rr_me=rr_innerstub.FunctionCall("resource_delete",rr_param))
    {
    }
    }
    }
    public void resource_copy(com.robotraconteur.resource.ResourceIdentifier identifier, com.robotraconteur.resource.ResourceIdentifier new_identifier, bool copy) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackStructure("identifier",identifier));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackStructure("new_identifier",new_identifier));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackScalar<bool>("copy",copy));
    using(MessageElement rr_me=rr_innerstub.FunctionCall("resource_copy",rr_param))
    {
    }
    }
    }
    public override void DispatchEvent(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    }
    public override MessageElement CallbackCall(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public virtual async Task<com.robotraconteur.device.DeviceInfo> async_get_device_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("device_info",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<com.robotraconteur.device.DeviceInfo>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<List<com.robotraconteur.resource.BucketInfo>> async_get_resource_bucket_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("resource_bucket_info",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackList<com.robotraconteur.resource.BucketInfo>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<com.robotraconteur.resource.ResourceInfo> async_resource_get_info(com.robotraconteur.resource.ResourceIdentifier identifier,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackStructure("identifier",identifier));
    using(var rr_return = await rr_async_FunctionCall("resource_get_info",rr_param,rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<com.robotraconteur.resource.ResourceInfo>(rr_return);
    return rr_ret;
    } } }
    public virtual async Task<Generator2<com.robotraconteur.resource.ResourcePart>> async_resource_get(com.robotraconteur.resource.ResourceIdentifier identifier,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackStructure("identifier",identifier));
    var rr_return = await rr_async_GeneratorFunctionCall("resource_get",rr_param,rr_timeout);
    Generator2Client< com.robotraconteur.resource.ResourcePart> rr_ret=new Generator2Client< com.robotraconteur.resource.ResourcePart>(rr_return);
    return rr_ret;
    } }
    public virtual async Task<Generator2<com.robotraconteur.resource.ResourcePart>> async_resource_get_all(com.robotraconteur.identifier.Identifier bucket_identifier,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackStructure("bucket_identifier",bucket_identifier));
    var rr_return = await rr_async_GeneratorFunctionCall("resource_get_all",rr_param,rr_timeout);
    Generator2Client< com.robotraconteur.resource.ResourcePart> rr_ret=new Generator2Client< com.robotraconteur.resource.ResourcePart>(rr_return);
    return rr_ret;
    } }
    public virtual async Task async_resource_bucket_add(com.robotraconteur.identifier.Identifier bucket_identifier,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackStructure("bucket_identifier",bucket_identifier));
    using(var rr_return = await rr_async_FunctionCall("resource_bucket_add",rr_param,rr_timeout)) {
    } } }
    public virtual async Task async_resource_bucket_delete(com.robotraconteur.identifier.Identifier bucket_identifier,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackStructure("bucket_identifier",bucket_identifier));
    using(var rr_return = await rr_async_FunctionCall("resource_bucket_delete",rr_param,rr_timeout)) {
    } } }
    public virtual async Task<Generator3<com.robotraconteur.resource.ResourcePart>> async_resource_set(com.robotraconteur.resource.ResourceIdentifier identifier, bool overwrite,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackStructure("identifier",identifier));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackScalar<bool>("overwrite",overwrite));
    var rr_return = await rr_async_GeneratorFunctionCall("resource_set",rr_param,rr_timeout);
    Generator3Client< com.robotraconteur.resource.ResourcePart> rr_ret=new Generator3Client< com.robotraconteur.resource.ResourcePart>(rr_return);
    return rr_ret;
    } }
    public virtual async Task async_resource_delete(com.robotraconteur.resource.ResourceIdentifier identifier,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackStructure("identifier",identifier));
    using(var rr_return = await rr_async_FunctionCall("resource_delete",rr_param,rr_timeout)) {
    } } }
    public virtual async Task async_resource_copy(com.robotraconteur.resource.ResourceIdentifier identifier, com.robotraconteur.resource.ResourceIdentifier new_identifier, bool copy,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackStructure("identifier",identifier));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackStructure("new_identifier",new_identifier));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackScalar<bool>("copy",copy));
    using(var rr_return = await rr_async_FunctionCall("resource_copy",rr_param,rr_timeout)) {
    } } }
}
public class ResourceStorageDevice_skel : ServiceSkel {
    protected ResourceStorageDevice obj;
    protected async_ResourceStorageDevice async_obj;
    public ResourceStorageDevice_skel(object o) : base(o)    {
    obj=(ResourceStorageDevice)o;
    async_obj = o as async_ResourceStorageDevice;
    }
    public override void ReleaseCastObject() { 
    obj=null;
    async_obj=null;
    base.ReleaseCastObject();
    }
    public override MessageElement CallGetProperty(string membername, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    case "device_info":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_device_info().ContinueWith(t => async_adapter.EndTask<com.robotraconteur.device.DeviceInfo>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    com.robotraconteur.device.DeviceInfo ret=obj.device_info;
    return MessageElementUtil.PackStructure("return",ret);
    }
    case "resource_bucket_info":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_resource_bucket_info().ContinueWith(t => async_adapter.EndTask<List<com.robotraconteur.resource.BucketInfo>>(t,async_ret => MessageElementUtil.PackListType<com.robotraconteur.resource.BucketInfo>("return",async_ret)));
    return null;
    }
    List<com.robotraconteur.resource.BucketInfo> ret=obj.resource_bucket_info;
    return MessageElementUtil.PackListType<com.robotraconteur.resource.BucketInfo>("return",ret);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void CallSetProperty(string membername, MessageElement m, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override MessageElement CallFunction(string rr_membername, vectorptr_messageelement rr_m, WrappedServiceSkelAsyncAdapter rr_async_adapter) {
    switch (rr_membername) {
    case "resource_get_info":
    {
    com.robotraconteur.resource.ResourceIdentifier identifier=MessageElementUtil.UnpackStructure<com.robotraconteur.resource.ResourceIdentifier>(vectorptr_messageelement_util.FindElement(rr_m,"identifier"));
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_resource_get_info(identifier).ContinueWith(t => rr_async_adapter.EndTask<com.robotraconteur.resource.ResourceInfo>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    com.robotraconteur.resource.ResourceInfo rr_ret=this.obj.resource_get_info(identifier);
    return MessageElementUtil.PackStructure("return",rr_ret);
    }
    case "resource_get":
    {
    com.robotraconteur.resource.ResourceIdentifier identifier=MessageElementUtil.UnpackStructure<com.robotraconteur.resource.ResourceIdentifier>(vectorptr_messageelement_util.FindElement(rr_m,"identifier"));
    Generator2<com.robotraconteur.resource.ResourcePart> rr_ret=this.obj.resource_get(identifier);
    int generator_index = innerskel.RegisterGeneratorServer("resource_get", new WrappedGenerator2ServerDirectorNET<com.robotraconteur.resource.ResourcePart>(rr_ret));
    return new MessageElement("index",generator_index);
    }
    case "resource_get_all":
    {
    com.robotraconteur.identifier.Identifier bucket_identifier=MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(vectorptr_messageelement_util.FindElement(rr_m,"bucket_identifier"));
    Generator2<com.robotraconteur.resource.ResourcePart> rr_ret=this.obj.resource_get_all(bucket_identifier);
    int generator_index = innerskel.RegisterGeneratorServer("resource_get_all", new WrappedGenerator2ServerDirectorNET<com.robotraconteur.resource.ResourcePart>(rr_ret));
    return new MessageElement("index",generator_index);
    }
    case "resource_bucket_add":
    {
    com.robotraconteur.identifier.Identifier bucket_identifier=MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(vectorptr_messageelement_util.FindElement(rr_m,"bucket_identifier"));
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_resource_bucket_add(bucket_identifier).ContinueWith(t => rr_async_adapter.EndTask(t,new MessageElement("return",(int)0)));
    return null;
    }
    this.obj.resource_bucket_add(bucket_identifier);
    return new MessageElement("return",(int)0);
    }
    case "resource_bucket_delete":
    {
    com.robotraconteur.identifier.Identifier bucket_identifier=MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(vectorptr_messageelement_util.FindElement(rr_m,"bucket_identifier"));
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_resource_bucket_delete(bucket_identifier).ContinueWith(t => rr_async_adapter.EndTask(t,new MessageElement("return",(int)0)));
    return null;
    }
    this.obj.resource_bucket_delete(bucket_identifier);
    return new MessageElement("return",(int)0);
    }
    case "resource_set":
    {
    com.robotraconteur.resource.ResourceIdentifier identifier=MessageElementUtil.UnpackStructure<com.robotraconteur.resource.ResourceIdentifier>(vectorptr_messageelement_util.FindElement(rr_m,"identifier"));
    bool overwrite=(MessageElementUtil.UnpackScalar<bool>(vectorptr_messageelement_util.FindElement(rr_m,"overwrite")));
    Generator3<com.robotraconteur.resource.ResourcePart> rr_ret=this.obj.resource_set(identifier, overwrite);
    int generator_index = innerskel.RegisterGeneratorServer("resource_set", new WrappedGenerator3ServerDirectorNET<com.robotraconteur.resource.ResourcePart>(rr_ret));
    return new MessageElement("index",generator_index);
    }
    case "resource_delete":
    {
    com.robotraconteur.resource.ResourceIdentifier identifier=MessageElementUtil.UnpackStructure<com.robotraconteur.resource.ResourceIdentifier>(vectorptr_messageelement_util.FindElement(rr_m,"identifier"));
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_resource_delete(identifier).ContinueWith(t => rr_async_adapter.EndTask(t,new MessageElement("return",(int)0)));
    return null;
    }
    this.obj.resource_delete(identifier);
    return new MessageElement("return",(int)0);
    }
    case "resource_copy":
    {
    com.robotraconteur.resource.ResourceIdentifier identifier=MessageElementUtil.UnpackStructure<com.robotraconteur.resource.ResourceIdentifier>(vectorptr_messageelement_util.FindElement(rr_m,"identifier"));
    com.robotraconteur.resource.ResourceIdentifier new_identifier=MessageElementUtil.UnpackStructure<com.robotraconteur.resource.ResourceIdentifier>(vectorptr_messageelement_util.FindElement(rr_m,"new_identifier"));
    bool copy=(MessageElementUtil.UnpackScalar<bool>(vectorptr_messageelement_util.FindElement(rr_m,"copy")));
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_resource_copy(identifier, new_identifier, copy).ContinueWith(t => rr_async_adapter.EndTask(t,new MessageElement("return",(int)0)));
    return null;
    }
    this.obj.resource_copy(identifier, new_identifier, copy);
    return new MessageElement("return",(int)0);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override object GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(ResourceStorageDevice)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(ResourceStorageDevice)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void InitPipeServers(object rrobj1) {
    obj=(ResourceStorageDevice)rrobj1;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(ResourceStorageDevice)rrobj1;
    }
    public override void InitWireServers(object rrobj1) {
    obj=(ResourceStorageDevice)rrobj1;
    }
    public override WrappedArrayMemoryDirector GetArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedMultiDimArrayMemoryDirector GetMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodArrayMemoryDirector GetPodArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodMultiDimArrayMemoryDirector GetPodMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedArrayMemoryDirector GetNamedArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedMultiDimArrayMemoryDirector GetNamedMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override string RRType { get { return "com.robotraconteur.resource.device.ResourceStorageDevice"; } }
}
public class ResourceStorageDevice_default_impl : ResourceStorageDevice{
    public virtual com.robotraconteur.device.DeviceInfo device_info {get; set;} = default(com.robotraconteur.device.DeviceInfo);
    public virtual List<com.robotraconteur.resource.BucketInfo> resource_bucket_info {get; set;} = default(List<com.robotraconteur.resource.BucketInfo>);
    public virtual com.robotraconteur.resource.ResourceInfo resource_get_info(com.robotraconteur.resource.ResourceIdentifier identifier) {
    throw new NotImplementedException();    }
    public virtual Generator2<com.robotraconteur.resource.ResourcePart> resource_get(com.robotraconteur.resource.ResourceIdentifier identifier) {
    throw new NotImplementedException();    }
    public virtual Generator2<com.robotraconteur.resource.ResourcePart> resource_get_all(com.robotraconteur.identifier.Identifier bucket_identifier) {
    throw new NotImplementedException();    }
    public virtual void resource_bucket_add(com.robotraconteur.identifier.Identifier bucket_identifier) {
    throw new NotImplementedException();    }
    public virtual void resource_bucket_delete(com.robotraconteur.identifier.Identifier bucket_identifier) {
    throw new NotImplementedException();    }
    public virtual Generator3<com.robotraconteur.resource.ResourcePart> resource_set(com.robotraconteur.resource.ResourceIdentifier identifier, bool overwrite) {
    throw new NotImplementedException();    }
    public virtual void resource_delete(com.robotraconteur.resource.ResourceIdentifier identifier) {
    throw new NotImplementedException();    }
    public virtual void resource_copy(com.robotraconteur.resource.ResourceIdentifier identifier, com.robotraconteur.resource.ResourceIdentifier new_identifier, bool copy) {
    throw new NotImplementedException();    }
}
public static class RRExtensions{
}
}
namespace com.robotraconteur.resource
{
public class ResourceIdentifier
{
    public com.robotraconteur.identifier.Identifier bucket;
    public string key;
}

public class BucketInfo
{
    public com.robotraconteur.identifier.Identifier identifier;
    public List<string> keys;
    public string description;
    public Dictionary<string,object> extended;
}

public class ResourceInfo
{
    public ResourceIdentifier identifier;
    public string key;
    public com.robotraconteur.datetime.DateTimeUTC created;
    public com.robotraconteur.datetime.DateTimeUTC modified;
    public ulong total_size;
    public string description;
    public Dictionary<string,object> extended;
}

public class Resource
{
    public ResourceInfo info;
    public byte[] data;
}

public class ResourcePart
{
    public ResourceInfo info;
    public ulong data_offset;
    public byte[] data;
}

[RobotRaconteurServiceObjectInterface()]
public interface ResourceReadOnlyStorage
{
    List<BucketInfo> resource_bucket_info { get; 	}
    ResourceInfo resource_get_info(ResourceIdentifier identifier);
    Generator2<ResourcePart> resource_get(ResourceIdentifier identifier);
    Generator2<ResourcePart> resource_get_all(com.robotraconteur.identifier.Identifier bucket_identifier);
}

[RobotRaconteurServiceObjectInterface()]
public interface ResourceStorage : ResourceReadOnlyStorage
{
    List<BucketInfo> resource_bucket_info { get; 	}
    ResourceInfo resource_get_info(ResourceIdentifier identifier);
    Generator2<ResourcePart> resource_get(ResourceIdentifier identifier);
    Generator2<ResourcePart> resource_get_all(com.robotraconteur.identifier.Identifier bucket_identifier);
    void resource_bucket_add(com.robotraconteur.identifier.Identifier bucket_identifier);
    void resource_bucket_delete(com.robotraconteur.identifier.Identifier bucket_identifier);
    Generator3<ResourcePart> resource_set(ResourceIdentifier identifier, bool overwrite);
    void resource_delete(ResourceIdentifier identifier);
    void resource_copy(ResourceIdentifier identifier, ResourceIdentifier new_identifier, bool copy);
}

}
namespace com.robotraconteur.resource
{
public class com__robotraconteur__resourceFactory : ServiceFactory
{
    public override string DefString()
{
    const string s="service com.robotraconteur.resource\n\nstdver 0.10\n\nimport com.robotraconteur.uuid\nimport com.robotraconteur.datetime\nimport com.robotraconteur.identifier\n\nusing com.robotraconteur.uuid.UUID\nusing com.robotraconteur.datetime.DateTimeUTC\nusing com.robotraconteur.identifier.Identifier\n\nstruct ResourceIdentifier\nfield Identifier bucket\nfield string key\nend\n\nstruct BucketInfo\nfield Identifier identifier\nfield string{list} keys\nfield string description\nfield varvalue{string} extended\nend\n\nstruct ResourceInfo\nfield ResourceIdentifier identifier\nfield string key\nfield DateTimeUTC created\nfield DateTimeUTC modified\nfield uint64 total_size\nfield string description\nfield varvalue{string} extended\nend\n\nstruct Resource\nfield ResourceInfo info\nfield uint8[] data\nend\n\nstruct ResourcePart\nfield ResourceInfo info\nfield uint64 data_offset\nfield uint8[] data\nend\n\nobject ResourceReadOnlyStorage\nproperty BucketInfo{list} resource_bucket_info [readonly,nolock]\nfunction ResourceInfo resource_get_info(ResourceIdentifier identifier)\nfunction ResourcePart{generator} resource_get(ResourceIdentifier identifier)\nfunction ResourcePart{generator} resource_get_all(Identifier bucket_identifier)\nend\n\nobject ResourceStorage\nimplements ResourceReadOnlyStorage\nproperty BucketInfo{list} resource_bucket_info [readonly,nolock]\nfunction ResourceInfo resource_get_info(ResourceIdentifier identifier)\nfunction ResourcePart{generator} resource_get(ResourceIdentifier identifier)\nfunction ResourcePart{generator} resource_get_all(Identifier bucket_identifier)\nfunction void resource_bucket_add(Identifier bucket_identifier)\nfunction void resource_bucket_delete(Identifier bucket_identifier)\nfunction void resource_set(ResourceIdentifier identifier, bool overwrite, ResourcePart{generator} resource)\nfunction void resource_delete(ResourceIdentifier identifier)\nfunction void resource_copy(ResourceIdentifier identifier, ResourceIdentifier new_identifier, bool copy)\nend\n\n";
    return s;
    }
    public override string GetServiceName() {return "com.robotraconteur.resource";}
    public ResourceIdentifier_stub ResourceIdentifier_stubentry;
    public BucketInfo_stub BucketInfo_stubentry;
    public ResourceInfo_stub ResourceInfo_stubentry;
    public Resource_stub Resource_stubentry;
    public ResourcePart_stub ResourcePart_stubentry;
    public com__robotraconteur__resourceFactory()
{
    ResourceIdentifier_stubentry=new ResourceIdentifier_stub(this);
    BucketInfo_stubentry=new BucketInfo_stub(this);
    ResourceInfo_stubentry=new ResourceInfo_stub(this);
    Resource_stubentry=new Resource_stub(this);
    ResourcePart_stubentry=new ResourcePart_stub(this);
    }
    public override IStructureStub FindStructureStub(string objecttype)
    {
    if (objecttype=="ResourceIdentifier")    return ResourceIdentifier_stubentry;
    if (objecttype=="BucketInfo")    return BucketInfo_stubentry;
    if (objecttype=="ResourceInfo")    return ResourceInfo_stubentry;
    if (objecttype=="Resource")    return Resource_stubentry;
    if (objecttype=="ResourcePart")    return ResourcePart_stubentry;
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public override IPodStub FindPodStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override INamedArrayStub FindNamedArrayStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override ServiceStub CreateStub(WrappedServiceStub innerstub) {
    string objecttype=innerstub.RR_objecttype.GetServiceDefinition().Name + "." + innerstub.RR_objecttype.Name;    string objshort;
    if (CompareNamespace(objecttype, out objshort)) {
    switch (objshort) {
    case "ResourceReadOnlyStorage":
    return new ResourceReadOnlyStorage_stub(innerstub);
    case "ResourceStorage":
    return new ResourceStorage_stub(innerstub);
    default:
    break;
    }
    } else {
    string ext_service_type=RobotRaconteurNode.SplitQualifiedName(objecttype).Item1;
    return RobotRaconteurNode.s.GetServiceType(ext_service_type).CreateStub(innerstub);
    }
    throw new ServiceException("Could not create stub");
    }
    public override ServiceSkel CreateSkel(object obj) {
    string objtype = RobotRaconteurNode.GetTypeString(ServiceSkelUtil.FindParentInterface(obj.GetType()));
    string objshort;
    if (CompareNamespace(objtype, out objshort)) {
    switch(objshort) {
    case "ResourceReadOnlyStorage":
    return new ResourceReadOnlyStorage_skel((ResourceReadOnlyStorage)obj);
    case "ResourceStorage":
    return new ResourceStorage_skel((ResourceStorage)obj);
    default:
    break;
    }
    } else {
    string ext_service_type=RobotRaconteurNode.SplitQualifiedName(objtype).Item1;
    return RobotRaconteurNode.s.GetServiceFactory(ext_service_type).CreateSkel(obj);
    }
    throw new ServiceException("Could not create skel");
    }
    public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp){
    if (rr_exp==null) return rr_exp;
    string rr_type=rr_exp.Error;
    if (!rr_type.Contains(".")) return rr_exp;
    string rr_stype;
    if (CompareNamespace(rr_type, out rr_stype)) {
    } else {
    return RobotRaconteurNode.s.DownCastException(rr_exp); 
    }
    return rr_exp;
    }
}

public class ResourceIdentifier_stub : IStructureStub {
    public ResourceIdentifier_stub(com__robotraconteur__resourceFactory d) {def=d;}
    private com__robotraconteur__resourceFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    ResourceIdentifier s = (ResourceIdentifier)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("bucket",s.bucket));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackString("key",s.key));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.resource.ResourceIdentifier",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    ResourceIdentifier s=new ResourceIdentifier();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.bucket =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(MessageElement.FindElement(mm,"bucket"));
    s.key =MessageElementUtil.UnpackString(MessageElement.FindElement(mm,"key"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class BucketInfo_stub : IStructureStub {
    public BucketInfo_stub(com__robotraconteur__resourceFactory d) {def=d;}
    private com__robotraconteur__resourceFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    BucketInfo s = (BucketInfo)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("identifier",s.identifier));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackListType<string>("keys",s.keys));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackString("description",s.description));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackMapType<string,object>("extended",s.extended));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.resource.BucketInfo",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    BucketInfo s=new BucketInfo();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.identifier =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(MessageElement.FindElement(mm,"identifier"));
    s.keys =MessageElementUtil.UnpackList<string>(MessageElement.FindElement(mm,"keys"));
    s.description =MessageElementUtil.UnpackString(MessageElement.FindElement(mm,"description"));
    s.extended =MessageElementUtil.UnpackMap<string,object>(MessageElement.FindElement(mm,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class ResourceInfo_stub : IStructureStub {
    public ResourceInfo_stub(com__robotraconteur__resourceFactory d) {def=d;}
    private com__robotraconteur__resourceFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    ResourceInfo s = (ResourceInfo)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("identifier",s.identifier));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackString("key",s.key));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.DateTimeUTC>("created",ref s.created));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.DateTimeUTC>("modified",ref s.modified));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<ulong>("total_size",s.total_size));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackString("description",s.description));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackMapType<string,object>("extended",s.extended));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.resource.ResourceInfo",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    ResourceInfo s=new ResourceInfo();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.identifier =MessageElementUtil.UnpackStructure<ResourceIdentifier>(MessageElement.FindElement(mm,"identifier"));
    s.key =MessageElementUtil.UnpackString(MessageElement.FindElement(mm,"key"));
    s.created =MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.DateTimeUTC>(MessageElement.FindElement(mm,"created"));
    s.modified =MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.DateTimeUTC>(MessageElement.FindElement(mm,"modified"));
    s.total_size =(MessageElementUtil.UnpackScalar<ulong>(MessageElement.FindElement(mm,"total_size")));
    s.description =MessageElementUtil.UnpackString(MessageElement.FindElement(mm,"description"));
    s.extended =MessageElementUtil.UnpackMap<string,object>(MessageElement.FindElement(mm,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class Resource_stub : IStructureStub {
    public Resource_stub(com__robotraconteur__resourceFactory d) {def=d;}
    private com__robotraconteur__resourceFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    Resource s = (Resource)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("info",s.info));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackArray<byte>("data",s.data));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.resource.Resource",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    Resource s=new Resource();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.info =MessageElementUtil.UnpackStructure<ResourceInfo>(MessageElement.FindElement(mm,"info"));
    s.data =MessageElementUtil.UnpackArray<byte>(MessageElement.FindElement(mm,"data"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class ResourcePart_stub : IStructureStub {
    public ResourcePart_stub(com__robotraconteur__resourceFactory d) {def=d;}
    private com__robotraconteur__resourceFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    ResourcePart s = (ResourcePart)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("info",s.info));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<ulong>("data_offset",s.data_offset));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackArray<byte>("data",s.data));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.resource.ResourcePart",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    ResourcePart s=new ResourcePart();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.info =MessageElementUtil.UnpackStructure<ResourceInfo>(MessageElement.FindElement(mm,"info"));
    s.data_offset =(MessageElementUtil.UnpackScalar<ulong>(MessageElement.FindElement(mm,"data_offset")));
    s.data =MessageElementUtil.UnpackArray<byte>(MessageElement.FindElement(mm,"data"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public interface async_ResourceReadOnlyStorage
{
    Task<List<BucketInfo>> async_get_resource_bucket_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<ResourceInfo> async_resource_get_info(ResourceIdentifier identifier,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<Generator2<ResourcePart>> async_resource_get(ResourceIdentifier identifier,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<Generator2<ResourcePart>> async_resource_get_all(com.robotraconteur.identifier.Identifier bucket_identifier,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
}
public class ResourceReadOnlyStorage_stub : ServiceStub , ResourceReadOnlyStorage, async_ResourceReadOnlyStorage{
    public ResourceReadOnlyStorage_stub(WrappedServiceStub innerstub) : base(innerstub) {
    }
    public List<BucketInfo> resource_bucket_info {
    get {
    return MessageElementUtil.UnpackList<BucketInfo>(rr_innerstub.PropertyGet("resource_bucket_info"));
    }
    }
    public ResourceInfo resource_get_info(ResourceIdentifier identifier) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackStructure("identifier",identifier));
    using(MessageElement rr_me=rr_innerstub.FunctionCall("resource_get_info",rr_param))
    {
    return MessageElementUtil.UnpackStructure<ResourceInfo>(rr_me);
    }
    }
    }
    public Generator2<ResourcePart> resource_get(ResourceIdentifier identifier) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackStructure("identifier",identifier));
    WrappedGeneratorClient generator_client = rr_innerstub.GeneratorFunctionCall("resource_get",rr_param);
    return new Generator2Client<ResourcePart>(generator_client);
    }
    }
    public Generator2<ResourcePart> resource_get_all(com.robotraconteur.identifier.Identifier bucket_identifier) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackStructure("bucket_identifier",bucket_identifier));
    WrappedGeneratorClient generator_client = rr_innerstub.GeneratorFunctionCall("resource_get_all",rr_param);
    return new Generator2Client<ResourcePart>(generator_client);
    }
    }
    public override void DispatchEvent(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    }
    public override MessageElement CallbackCall(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public virtual async Task<List<BucketInfo>> async_get_resource_bucket_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("resource_bucket_info",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackList<BucketInfo>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<ResourceInfo> async_resource_get_info(ResourceIdentifier identifier,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackStructure("identifier",identifier));
    using(var rr_return = await rr_async_FunctionCall("resource_get_info",rr_param,rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<ResourceInfo>(rr_return);
    return rr_ret;
    } } }
    public virtual async Task<Generator2<ResourcePart>> async_resource_get(ResourceIdentifier identifier,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackStructure("identifier",identifier));
    var rr_return = await rr_async_GeneratorFunctionCall("resource_get",rr_param,rr_timeout);
    Generator2Client< ResourcePart> rr_ret=new Generator2Client< ResourcePart>(rr_return);
    return rr_ret;
    } }
    public virtual async Task<Generator2<ResourcePart>> async_resource_get_all(com.robotraconteur.identifier.Identifier bucket_identifier,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackStructure("bucket_identifier",bucket_identifier));
    var rr_return = await rr_async_GeneratorFunctionCall("resource_get_all",rr_param,rr_timeout);
    Generator2Client< ResourcePart> rr_ret=new Generator2Client< ResourcePart>(rr_return);
    return rr_ret;
    } }
}
public interface async_ResourceStorage : async_ResourceReadOnlyStorage
{
    Task<List<BucketInfo>> async_get_resource_bucket_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<ResourceInfo> async_resource_get_info(ResourceIdentifier identifier,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<Generator2<ResourcePart>> async_resource_get(ResourceIdentifier identifier,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<Generator2<ResourcePart>> async_resource_get_all(com.robotraconteur.identifier.Identifier bucket_identifier,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_resource_bucket_add(com.robotraconteur.identifier.Identifier bucket_identifier,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_resource_bucket_delete(com.robotraconteur.identifier.Identifier bucket_identifier,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<Generator3<ResourcePart>> async_resource_set(ResourceIdentifier identifier, bool overwrite,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_resource_delete(ResourceIdentifier identifier,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_resource_copy(ResourceIdentifier identifier, ResourceIdentifier new_identifier, bool copy,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
}
public class ResourceStorage_stub : ServiceStub , ResourceStorage, async_ResourceStorage{
    public ResourceStorage_stub(WrappedServiceStub innerstub) : base(innerstub) {
    }
    public List<BucketInfo> resource_bucket_info {
    get {
    return MessageElementUtil.UnpackList<BucketInfo>(rr_innerstub.PropertyGet("resource_bucket_info"));
    }
    }
    public ResourceInfo resource_get_info(ResourceIdentifier identifier) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackStructure("identifier",identifier));
    using(MessageElement rr_me=rr_innerstub.FunctionCall("resource_get_info",rr_param))
    {
    return MessageElementUtil.UnpackStructure<ResourceInfo>(rr_me);
    }
    }
    }
    public Generator2<ResourcePart> resource_get(ResourceIdentifier identifier) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackStructure("identifier",identifier));
    WrappedGeneratorClient generator_client = rr_innerstub.GeneratorFunctionCall("resource_get",rr_param);
    return new Generator2Client<ResourcePart>(generator_client);
    }
    }
    public Generator2<ResourcePart> resource_get_all(com.robotraconteur.identifier.Identifier bucket_identifier) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackStructure("bucket_identifier",bucket_identifier));
    WrappedGeneratorClient generator_client = rr_innerstub.GeneratorFunctionCall("resource_get_all",rr_param);
    return new Generator2Client<ResourcePart>(generator_client);
    }
    }
    public void resource_bucket_add(com.robotraconteur.identifier.Identifier bucket_identifier) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackStructure("bucket_identifier",bucket_identifier));
    using(MessageElement rr_me=rr_innerstub.FunctionCall("resource_bucket_add",rr_param))
    {
    }
    }
    }
    public void resource_bucket_delete(com.robotraconteur.identifier.Identifier bucket_identifier) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackStructure("bucket_identifier",bucket_identifier));
    using(MessageElement rr_me=rr_innerstub.FunctionCall("resource_bucket_delete",rr_param))
    {
    }
    }
    }
    public Generator3<ResourcePart> resource_set(ResourceIdentifier identifier, bool overwrite) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackStructure("identifier",identifier));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackScalar<bool>("overwrite",overwrite));
    WrappedGeneratorClient generator_client = rr_innerstub.GeneratorFunctionCall("resource_set",rr_param);
    return new Generator3Client<ResourcePart>(generator_client);
    }
    }
    public void resource_delete(ResourceIdentifier identifier) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackStructure("identifier",identifier));
    using(MessageElement rr_me=rr_innerstub.FunctionCall("resource_delete",rr_param))
    {
    }
    }
    }
    public void resource_copy(ResourceIdentifier identifier, ResourceIdentifier new_identifier, bool copy) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackStructure("identifier",identifier));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackStructure("new_identifier",new_identifier));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackScalar<bool>("copy",copy));
    using(MessageElement rr_me=rr_innerstub.FunctionCall("resource_copy",rr_param))
    {
    }
    }
    }
    public override void DispatchEvent(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    }
    public override MessageElement CallbackCall(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public virtual async Task<List<BucketInfo>> async_get_resource_bucket_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("resource_bucket_info",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackList<BucketInfo>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<ResourceInfo> async_resource_get_info(ResourceIdentifier identifier,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackStructure("identifier",identifier));
    using(var rr_return = await rr_async_FunctionCall("resource_get_info",rr_param,rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<ResourceInfo>(rr_return);
    return rr_ret;
    } } }
    public virtual async Task<Generator2<ResourcePart>> async_resource_get(ResourceIdentifier identifier,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackStructure("identifier",identifier));
    var rr_return = await rr_async_GeneratorFunctionCall("resource_get",rr_param,rr_timeout);
    Generator2Client< ResourcePart> rr_ret=new Generator2Client< ResourcePart>(rr_return);
    return rr_ret;
    } }
    public virtual async Task<Generator2<ResourcePart>> async_resource_get_all(com.robotraconteur.identifier.Identifier bucket_identifier,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackStructure("bucket_identifier",bucket_identifier));
    var rr_return = await rr_async_GeneratorFunctionCall("resource_get_all",rr_param,rr_timeout);
    Generator2Client< ResourcePart> rr_ret=new Generator2Client< ResourcePart>(rr_return);
    return rr_ret;
    } }
    public virtual async Task async_resource_bucket_add(com.robotraconteur.identifier.Identifier bucket_identifier,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackStructure("bucket_identifier",bucket_identifier));
    using(var rr_return = await rr_async_FunctionCall("resource_bucket_add",rr_param,rr_timeout)) {
    } } }
    public virtual async Task async_resource_bucket_delete(com.robotraconteur.identifier.Identifier bucket_identifier,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackStructure("bucket_identifier",bucket_identifier));
    using(var rr_return = await rr_async_FunctionCall("resource_bucket_delete",rr_param,rr_timeout)) {
    } } }
    public virtual async Task<Generator3<ResourcePart>> async_resource_set(ResourceIdentifier identifier, bool overwrite,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackStructure("identifier",identifier));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackScalar<bool>("overwrite",overwrite));
    var rr_return = await rr_async_GeneratorFunctionCall("resource_set",rr_param,rr_timeout);
    Generator3Client< ResourcePart> rr_ret=new Generator3Client< ResourcePart>(rr_return);
    return rr_ret;
    } }
    public virtual async Task async_resource_delete(ResourceIdentifier identifier,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackStructure("identifier",identifier));
    using(var rr_return = await rr_async_FunctionCall("resource_delete",rr_param,rr_timeout)) {
    } } }
    public virtual async Task async_resource_copy(ResourceIdentifier identifier, ResourceIdentifier new_identifier, bool copy,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackStructure("identifier",identifier));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackStructure("new_identifier",new_identifier));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackScalar<bool>("copy",copy));
    using(var rr_return = await rr_async_FunctionCall("resource_copy",rr_param,rr_timeout)) {
    } } }
}
public class ResourceReadOnlyStorage_skel : ServiceSkel {
    protected ResourceReadOnlyStorage obj;
    protected async_ResourceReadOnlyStorage async_obj;
    public ResourceReadOnlyStorage_skel(object o) : base(o)    {
    obj=(ResourceReadOnlyStorage)o;
    async_obj = o as async_ResourceReadOnlyStorage;
    }
    public override void ReleaseCastObject() { 
    obj=null;
    async_obj=null;
    base.ReleaseCastObject();
    }
    public override MessageElement CallGetProperty(string membername, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    case "resource_bucket_info":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_resource_bucket_info().ContinueWith(t => async_adapter.EndTask<List<BucketInfo>>(t,async_ret => MessageElementUtil.PackListType<BucketInfo>("return",async_ret)));
    return null;
    }
    List<BucketInfo> ret=obj.resource_bucket_info;
    return MessageElementUtil.PackListType<BucketInfo>("return",ret);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void CallSetProperty(string membername, MessageElement m, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override MessageElement CallFunction(string rr_membername, vectorptr_messageelement rr_m, WrappedServiceSkelAsyncAdapter rr_async_adapter) {
    switch (rr_membername) {
    case "resource_get_info":
    {
    ResourceIdentifier identifier=MessageElementUtil.UnpackStructure<ResourceIdentifier>(vectorptr_messageelement_util.FindElement(rr_m,"identifier"));
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_resource_get_info(identifier).ContinueWith(t => rr_async_adapter.EndTask<ResourceInfo>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    ResourceInfo rr_ret=this.obj.resource_get_info(identifier);
    return MessageElementUtil.PackStructure("return",rr_ret);
    }
    case "resource_get":
    {
    ResourceIdentifier identifier=MessageElementUtil.UnpackStructure<ResourceIdentifier>(vectorptr_messageelement_util.FindElement(rr_m,"identifier"));
    Generator2<ResourcePart> rr_ret=this.obj.resource_get(identifier);
    int generator_index = innerskel.RegisterGeneratorServer("resource_get", new WrappedGenerator2ServerDirectorNET<ResourcePart>(rr_ret));
    return new MessageElement("index",generator_index);
    }
    case "resource_get_all":
    {
    com.robotraconteur.identifier.Identifier bucket_identifier=MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(vectorptr_messageelement_util.FindElement(rr_m,"bucket_identifier"));
    Generator2<ResourcePart> rr_ret=this.obj.resource_get_all(bucket_identifier);
    int generator_index = innerskel.RegisterGeneratorServer("resource_get_all", new WrappedGenerator2ServerDirectorNET<ResourcePart>(rr_ret));
    return new MessageElement("index",generator_index);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override object GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(ResourceReadOnlyStorage)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(ResourceReadOnlyStorage)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void InitPipeServers(object rrobj1) {
    obj=(ResourceReadOnlyStorage)rrobj1;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(ResourceReadOnlyStorage)rrobj1;
    }
    public override void InitWireServers(object rrobj1) {
    obj=(ResourceReadOnlyStorage)rrobj1;
    }
    public override WrappedArrayMemoryDirector GetArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedMultiDimArrayMemoryDirector GetMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodArrayMemoryDirector GetPodArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodMultiDimArrayMemoryDirector GetPodMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedArrayMemoryDirector GetNamedArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedMultiDimArrayMemoryDirector GetNamedMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override string RRType { get { return "com.robotraconteur.resource.ResourceReadOnlyStorage"; } }
}
public class ResourceStorage_skel : ServiceSkel {
    protected ResourceStorage obj;
    protected async_ResourceStorage async_obj;
    public ResourceStorage_skel(object o) : base(o)    {
    obj=(ResourceStorage)o;
    async_obj = o as async_ResourceStorage;
    }
    public override void ReleaseCastObject() { 
    obj=null;
    async_obj=null;
    base.ReleaseCastObject();
    }
    public override MessageElement CallGetProperty(string membername, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    case "resource_bucket_info":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_resource_bucket_info().ContinueWith(t => async_adapter.EndTask<List<BucketInfo>>(t,async_ret => MessageElementUtil.PackListType<BucketInfo>("return",async_ret)));
    return null;
    }
    List<BucketInfo> ret=obj.resource_bucket_info;
    return MessageElementUtil.PackListType<BucketInfo>("return",ret);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void CallSetProperty(string membername, MessageElement m, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override MessageElement CallFunction(string rr_membername, vectorptr_messageelement rr_m, WrappedServiceSkelAsyncAdapter rr_async_adapter) {
    switch (rr_membername) {
    case "resource_get_info":
    {
    ResourceIdentifier identifier=MessageElementUtil.UnpackStructure<ResourceIdentifier>(vectorptr_messageelement_util.FindElement(rr_m,"identifier"));
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_resource_get_info(identifier).ContinueWith(t => rr_async_adapter.EndTask<ResourceInfo>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    ResourceInfo rr_ret=this.obj.resource_get_info(identifier);
    return MessageElementUtil.PackStructure("return",rr_ret);
    }
    case "resource_get":
    {
    ResourceIdentifier identifier=MessageElementUtil.UnpackStructure<ResourceIdentifier>(vectorptr_messageelement_util.FindElement(rr_m,"identifier"));
    Generator2<ResourcePart> rr_ret=this.obj.resource_get(identifier);
    int generator_index = innerskel.RegisterGeneratorServer("resource_get", new WrappedGenerator2ServerDirectorNET<ResourcePart>(rr_ret));
    return new MessageElement("index",generator_index);
    }
    case "resource_get_all":
    {
    com.robotraconteur.identifier.Identifier bucket_identifier=MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(vectorptr_messageelement_util.FindElement(rr_m,"bucket_identifier"));
    Generator2<ResourcePart> rr_ret=this.obj.resource_get_all(bucket_identifier);
    int generator_index = innerskel.RegisterGeneratorServer("resource_get_all", new WrappedGenerator2ServerDirectorNET<ResourcePart>(rr_ret));
    return new MessageElement("index",generator_index);
    }
    case "resource_bucket_add":
    {
    com.robotraconteur.identifier.Identifier bucket_identifier=MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(vectorptr_messageelement_util.FindElement(rr_m,"bucket_identifier"));
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_resource_bucket_add(bucket_identifier).ContinueWith(t => rr_async_adapter.EndTask(t,new MessageElement("return",(int)0)));
    return null;
    }
    this.obj.resource_bucket_add(bucket_identifier);
    return new MessageElement("return",(int)0);
    }
    case "resource_bucket_delete":
    {
    com.robotraconteur.identifier.Identifier bucket_identifier=MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(vectorptr_messageelement_util.FindElement(rr_m,"bucket_identifier"));
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_resource_bucket_delete(bucket_identifier).ContinueWith(t => rr_async_adapter.EndTask(t,new MessageElement("return",(int)0)));
    return null;
    }
    this.obj.resource_bucket_delete(bucket_identifier);
    return new MessageElement("return",(int)0);
    }
    case "resource_set":
    {
    ResourceIdentifier identifier=MessageElementUtil.UnpackStructure<ResourceIdentifier>(vectorptr_messageelement_util.FindElement(rr_m,"identifier"));
    bool overwrite=(MessageElementUtil.UnpackScalar<bool>(vectorptr_messageelement_util.FindElement(rr_m,"overwrite")));
    Generator3<ResourcePart> rr_ret=this.obj.resource_set(identifier, overwrite);
    int generator_index = innerskel.RegisterGeneratorServer("resource_set", new WrappedGenerator3ServerDirectorNET<ResourcePart>(rr_ret));
    return new MessageElement("index",generator_index);
    }
    case "resource_delete":
    {
    ResourceIdentifier identifier=MessageElementUtil.UnpackStructure<ResourceIdentifier>(vectorptr_messageelement_util.FindElement(rr_m,"identifier"));
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_resource_delete(identifier).ContinueWith(t => rr_async_adapter.EndTask(t,new MessageElement("return",(int)0)));
    return null;
    }
    this.obj.resource_delete(identifier);
    return new MessageElement("return",(int)0);
    }
    case "resource_copy":
    {
    ResourceIdentifier identifier=MessageElementUtil.UnpackStructure<ResourceIdentifier>(vectorptr_messageelement_util.FindElement(rr_m,"identifier"));
    ResourceIdentifier new_identifier=MessageElementUtil.UnpackStructure<ResourceIdentifier>(vectorptr_messageelement_util.FindElement(rr_m,"new_identifier"));
    bool copy=(MessageElementUtil.UnpackScalar<bool>(vectorptr_messageelement_util.FindElement(rr_m,"copy")));
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_resource_copy(identifier, new_identifier, copy).ContinueWith(t => rr_async_adapter.EndTask(t,new MessageElement("return",(int)0)));
    return null;
    }
    this.obj.resource_copy(identifier, new_identifier, copy);
    return new MessageElement("return",(int)0);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override object GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(ResourceStorage)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(ResourceStorage)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void InitPipeServers(object rrobj1) {
    obj=(ResourceStorage)rrobj1;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(ResourceStorage)rrobj1;
    }
    public override void InitWireServers(object rrobj1) {
    obj=(ResourceStorage)rrobj1;
    }
    public override WrappedArrayMemoryDirector GetArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedMultiDimArrayMemoryDirector GetMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodArrayMemoryDirector GetPodArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodMultiDimArrayMemoryDirector GetPodMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedArrayMemoryDirector GetNamedArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedMultiDimArrayMemoryDirector GetNamedMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override string RRType { get { return "com.robotraconteur.resource.ResourceStorage"; } }
}
public class ResourceReadOnlyStorage_default_impl : ResourceReadOnlyStorage{
    public virtual List<BucketInfo> resource_bucket_info {get; set;} = default(List<BucketInfo>);
    public virtual ResourceInfo resource_get_info(ResourceIdentifier identifier) {
    throw new NotImplementedException();    }
    public virtual Generator2<ResourcePart> resource_get(ResourceIdentifier identifier) {
    throw new NotImplementedException();    }
    public virtual Generator2<ResourcePart> resource_get_all(com.robotraconteur.identifier.Identifier bucket_identifier) {
    throw new NotImplementedException();    }
}
public class ResourceStorage_default_impl : ResourceStorage{
    public virtual List<BucketInfo> resource_bucket_info {get; set;} = default(List<BucketInfo>);
    public virtual ResourceInfo resource_get_info(ResourceIdentifier identifier) {
    throw new NotImplementedException();    }
    public virtual Generator2<ResourcePart> resource_get(ResourceIdentifier identifier) {
    throw new NotImplementedException();    }
    public virtual Generator2<ResourcePart> resource_get_all(com.robotraconteur.identifier.Identifier bucket_identifier) {
    throw new NotImplementedException();    }
    public virtual void resource_bucket_add(com.robotraconteur.identifier.Identifier bucket_identifier) {
    throw new NotImplementedException();    }
    public virtual void resource_bucket_delete(com.robotraconteur.identifier.Identifier bucket_identifier) {
    throw new NotImplementedException();    }
    public virtual Generator3<ResourcePart> resource_set(ResourceIdentifier identifier, bool overwrite) {
    throw new NotImplementedException();    }
    public virtual void resource_delete(ResourceIdentifier identifier) {
    throw new NotImplementedException();    }
    public virtual void resource_copy(ResourceIdentifier identifier, ResourceIdentifier new_identifier, bool copy) {
    throw new NotImplementedException();    }
}
public static class RRExtensions{
}
}
namespace com.robotraconteur.robotics.joints
{
public class JointLimits
{
    public double lower;
    public double upper;
    public double home;
    public double velocity;
    public double acceleration;
    public double jerk;
    public double effort;
    public double reduced_velocity;
    public double reduced_acceleration;
    public double reduced_jerk;
    public double reduced_effort;
}

public class JointInfo
{
    public com.robotraconteur.identifier.Identifier joint_identifier;
    public JointType joint_type;
    public JointLimits joint_limits;
    public JointPositionUnits default_units;
    public JointEffortUnits default_effort_units;
    public bool passive;
    public Dictionary<string,object> extended;
}

public static class com__robotraconteur__robotics__jointsConstants 
{
}
    public enum JointPositionUnits
    {
    implicit_ = 0,
    meter = 1,
    radian = 2,
    degree = 3,
    ticks_lin = 4,
    ticks_rot = 5,
    nanoticks_lin = 6,
    nanoticks_rot = 7
    };
    public enum JointVelocityUnits
    {
    implicit_ = 0,
    meter_second = 16,
    radian_second = 17,
    degree_second = 18,
    ticks_lin_second = 19,
    ticks_rot_second = 20,
    nanoticks_lin_second = 21,
    nanoticks_rot_second = 22
    };
    public enum JointAccelerationUnits
    {
    implicit_ = 0,
    meter_second2 = 32,
    radian_second2 = 33,
    degree_second2 = 34,
    ticks_lin_second2 = 35,
    ticks_rot_second2 = 36,
    nanoticks_lin_second2 = 37,
    nanoticks_rot_second2 = 38
    };
    public enum JointJerkUnits
    {
    implicit_ = 0,
    meter_second2 = 48,
    radian_second3 = 49,
    degree_second3 = 50,
    ticks_lin_second3 = 51,
    ticks_rot_second3 = 52,
    nanoticks_lin_second3 = 53,
    nanoticks_rot_second3 = 54
    };
    public enum JointEffortUnits
    {
    implicit_ = 0,
    newton = 64,
    newton_meter = 65,
    ampere = 66,
    volt = 67,
    pascal = 68,
    coulomb = 69,
    tesla = 70,
    weber = 71,
    meter_second2 = 72,
    radian_second2 = 73,
    degree_second2 = 74
    };
    public enum JointType
    {
    unknown = 0,
    revolute = 1,
    continuous = 2,
    prismatic = 3,
    wheel = 4,
    screw = 5,
    other = 6,
    revolute2 = 7,
    universal = 8,
    ball = 9,
    planar = 10,
    floating = 11,
    other_compound = 12,
    fixed_ = 13
    };
}
namespace com.robotraconteur.robotics.joints
{
public class com__robotraconteur__robotics__jointsFactory : ServiceFactory
{
    public override string DefString()
{
    const string s="service com.robotraconteur.robotics.joints\n\nstdver 0.10\n\nimport com.robotraconteur.units\nimport com.robotraconteur.identifier\n\nusing com.robotraconteur.units.SIUnit\nusing com.robotraconteur.identifier.Identifier\n\nenum JointPositionUnits\nimplicit = 0,\nmeter,\nradian,\ndegree,\n# ticks_lin = m/(2^20)\nticks_lin,\n# ticks_rot = rev/(2^20)\nticks_rot,\n# nanoticks_lin = nm/(2^20)\nnanoticks_lin,\n# nanoticks_rot = nrev/(2^20)\nnanoticks_rot\nend\n\nenum JointVelocityUnits\nimplicit = 0,\nmeter_second = 16,\nradian_second,\ndegree_second,\nticks_lin_second,\nticks_rot_second,\nnanoticks_lin_second,\nnanoticks_rot_second\nend\n\nenum JointAccelerationUnits\nimplicit = 0,\nmeter_second2 = 32,\nradian_second2,\ndegree_second2,\nticks_lin_second2,\nticks_rot_second2,\nnanoticks_lin_second2,\nnanoticks_rot_second2\nend\n\nenum JointJerkUnits\nimplicit = 0,\nmeter_second2 = 48,\nradian_second3,\ndegree_second3,\nticks_lin_second3,\nticks_rot_second3,\nnanoticks_lin_second3,\nnanoticks_rot_second3\nend\n\nenum JointEffortUnits\nimplicit = 0,\nnewton = 64,\nnewton_meter,\nampere,\nvolt,\npascal,\ncoulomb,\ntesla,\nweber,\nmeter_second2,\nradian_second2,\ndegree_second2\nend\n\nenum JointType\nunknown = 0,\nrevolute,\ncontinuous,\nprismatic,\nwheel,\nscrew,\nother,\n# Compound joint types\nrevolute2,\nuniversal,\nball,\nplanar,\nfloating,\nother_compound,\n# Fixed used in scenes\nfixed\nend\n\nstruct JointLimits\nfield double lower\nfield double upper\nfield double home\nfield double velocity\nfield double acceleration\nfield double jerk\nfield double effort\nfield double reduced_velocity\nfield double reduced_acceleration\nfield double reduced_jerk\nfield double reduced_effort\nend\n\nstruct JointInfo\nfield Identifier joint_identifier\nfield JointType joint_type\nfield JointLimits joint_limits\nfield JointPositionUnits default_units\nfield JointEffortUnits default_effort_units\nfield bool passive\nfield varvalue{string} extended\nend\n\n";
    return s;
    }
    public override string GetServiceName() {return "com.robotraconteur.robotics.joints";}
    public JointLimits_stub JointLimits_stubentry;
    public JointInfo_stub JointInfo_stubentry;
    public com__robotraconteur__robotics__jointsFactory()
{
    JointLimits_stubentry=new JointLimits_stub(this);
    JointInfo_stubentry=new JointInfo_stub(this);
    }
    public override IStructureStub FindStructureStub(string objecttype)
    {
    if (objecttype=="JointLimits")    return JointLimits_stubentry;
    if (objecttype=="JointInfo")    return JointInfo_stubentry;
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public override IPodStub FindPodStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override INamedArrayStub FindNamedArrayStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override ServiceStub CreateStub(WrappedServiceStub innerstub) {
    string objecttype=innerstub.RR_objecttype.GetServiceDefinition().Name + "." + innerstub.RR_objecttype.Name;    string objshort;
    if (CompareNamespace(objecttype, out objshort)) {
    switch (objshort) {
    default:
    break;
    }
    } else {
    string ext_service_type=RobotRaconteurNode.SplitQualifiedName(objecttype).Item1;
    return RobotRaconteurNode.s.GetServiceType(ext_service_type).CreateStub(innerstub);
    }
    throw new ServiceException("Could not create stub");
    }
    public override ServiceSkel CreateSkel(object obj) {
    string objtype = RobotRaconteurNode.GetTypeString(ServiceSkelUtil.FindParentInterface(obj.GetType()));
    string objshort;
    if (CompareNamespace(objtype, out objshort)) {
    switch(objshort) {
    default:
    break;
    }
    } else {
    string ext_service_type=RobotRaconteurNode.SplitQualifiedName(objtype).Item1;
    return RobotRaconteurNode.s.GetServiceFactory(ext_service_type).CreateSkel(obj);
    }
    throw new ServiceException("Could not create skel");
    }
    public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp){
    if (rr_exp==null) return rr_exp;
    string rr_type=rr_exp.Error;
    if (!rr_type.Contains(".")) return rr_exp;
    string rr_stype;
    if (CompareNamespace(rr_type, out rr_stype)) {
    } else {
    return RobotRaconteurNode.s.DownCastException(rr_exp); 
    }
    return rr_exp;
    }
}

public class JointLimits_stub : IStructureStub {
    public JointLimits_stub(com__robotraconteur__robotics__jointsFactory d) {def=d;}
    private com__robotraconteur__robotics__jointsFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    JointLimits s = (JointLimits)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<double>("lower",s.lower));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<double>("upper",s.upper));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<double>("home",s.home));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<double>("velocity",s.velocity));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<double>("acceleration",s.acceleration));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<double>("jerk",s.jerk));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<double>("effort",s.effort));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<double>("reduced_velocity",s.reduced_velocity));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<double>("reduced_acceleration",s.reduced_acceleration));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<double>("reduced_jerk",s.reduced_jerk));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<double>("reduced_effort",s.reduced_effort));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.robotics.joints.JointLimits",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    JointLimits s=new JointLimits();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.lower =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(mm,"lower")));
    s.upper =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(mm,"upper")));
    s.home =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(mm,"home")));
    s.velocity =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(mm,"velocity")));
    s.acceleration =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(mm,"acceleration")));
    s.jerk =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(mm,"jerk")));
    s.effort =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(mm,"effort")));
    s.reduced_velocity =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(mm,"reduced_velocity")));
    s.reduced_acceleration =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(mm,"reduced_acceleration")));
    s.reduced_jerk =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(mm,"reduced_jerk")));
    s.reduced_effort =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(mm,"reduced_effort")));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class JointInfo_stub : IStructureStub {
    public JointInfo_stub(com__robotraconteur__robotics__jointsFactory d) {def=d;}
    private com__robotraconteur__robotics__jointsFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    JointInfo s = (JointInfo)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("joint_identifier",s.joint_identifier));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackEnum<JointType>("joint_type",s.joint_type));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("joint_limits",s.joint_limits));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackEnum<JointPositionUnits>("default_units",s.default_units));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackEnum<JointEffortUnits>("default_effort_units",s.default_effort_units));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<bool>("passive",s.passive));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackMapType<string,object>("extended",s.extended));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.robotics.joints.JointInfo",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    JointInfo s=new JointInfo();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.joint_identifier =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(MessageElement.FindElement(mm,"joint_identifier"));
    s.joint_type =MessageElementUtil.UnpackEnum<JointType>(MessageElement.FindElement(mm,"joint_type"));
    s.joint_limits =MessageElementUtil.UnpackStructure<JointLimits>(MessageElement.FindElement(mm,"joint_limits"));
    s.default_units =MessageElementUtil.UnpackEnum<JointPositionUnits>(MessageElement.FindElement(mm,"default_units"));
    s.default_effort_units =MessageElementUtil.UnpackEnum<JointEffortUnits>(MessageElement.FindElement(mm,"default_effort_units"));
    s.passive =(MessageElementUtil.UnpackScalar<bool>(MessageElement.FindElement(mm,"passive")));
    s.extended =MessageElementUtil.UnpackMap<string,object>(MessageElement.FindElement(mm,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public static class RRExtensions{
}
}
namespace com.robotraconteur.robotics.payload
{
public class PayloadInfo
{
    public com.robotraconteur.device.DeviceInfo device_info;
    public com.robotraconteur.geometry.SpatialInertia inertia;
    public List<com.robotraconteur.fiducial.Fiducial> fiducials;
    public Dictionary<string,object> extended;
}

}
namespace com.robotraconteur.robotics.payload
{
public class com__robotraconteur__robotics__payloadFactory : ServiceFactory
{
    public override string DefString()
{
    const string s="service com.robotraconteur.robotics.payload\n\nstdver 0.10\n\nimport com.robotraconteur.device\nimport com.robotraconteur.geometry\nimport com.robotraconteur.fiducial\n\nusing com.robotraconteur.device.DeviceInfo\nusing com.robotraconteur.geometry.Transform\nusing com.robotraconteur.geometry.SpatialInertia\nusing com.robotraconteur.fiducial.Fiducial\n\nstruct PayloadInfo\nfield DeviceInfo device_info\nfield SpatialInertia inertia\nfield Fiducial{list} fiducials\nfield varvalue{string} extended\nend\n\n";
    return s;
    }
    public override string GetServiceName() {return "com.robotraconteur.robotics.payload";}
    public PayloadInfo_stub PayloadInfo_stubentry;
    public com__robotraconteur__robotics__payloadFactory()
{
    PayloadInfo_stubentry=new PayloadInfo_stub(this);
    }
    public override IStructureStub FindStructureStub(string objecttype)
    {
    if (objecttype=="PayloadInfo")    return PayloadInfo_stubentry;
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public override IPodStub FindPodStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override INamedArrayStub FindNamedArrayStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override ServiceStub CreateStub(WrappedServiceStub innerstub) {
    string objecttype=innerstub.RR_objecttype.GetServiceDefinition().Name + "." + innerstub.RR_objecttype.Name;    string objshort;
    if (CompareNamespace(objecttype, out objshort)) {
    switch (objshort) {
    default:
    break;
    }
    } else {
    string ext_service_type=RobotRaconteurNode.SplitQualifiedName(objecttype).Item1;
    return RobotRaconteurNode.s.GetServiceType(ext_service_type).CreateStub(innerstub);
    }
    throw new ServiceException("Could not create stub");
    }
    public override ServiceSkel CreateSkel(object obj) {
    string objtype = RobotRaconteurNode.GetTypeString(ServiceSkelUtil.FindParentInterface(obj.GetType()));
    string objshort;
    if (CompareNamespace(objtype, out objshort)) {
    switch(objshort) {
    default:
    break;
    }
    } else {
    string ext_service_type=RobotRaconteurNode.SplitQualifiedName(objtype).Item1;
    return RobotRaconteurNode.s.GetServiceFactory(ext_service_type).CreateSkel(obj);
    }
    throw new ServiceException("Could not create skel");
    }
    public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp){
    if (rr_exp==null) return rr_exp;
    string rr_type=rr_exp.Error;
    if (!rr_type.Contains(".")) return rr_exp;
    string rr_stype;
    if (CompareNamespace(rr_type, out rr_stype)) {
    } else {
    return RobotRaconteurNode.s.DownCastException(rr_exp); 
    }
    return rr_exp;
    }
}

public class PayloadInfo_stub : IStructureStub {
    public PayloadInfo_stub(com__robotraconteur__robotics__payloadFactory d) {def=d;}
    private com__robotraconteur__robotics__payloadFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    PayloadInfo s = (PayloadInfo)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("device_info",s.device_info));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.SpatialInertia>("inertia",ref s.inertia));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackListType<com.robotraconteur.fiducial.Fiducial>("fiducials",s.fiducials));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackMapType<string,object>("extended",s.extended));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.robotics.payload.PayloadInfo",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    PayloadInfo s=new PayloadInfo();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.device_info =MessageElementUtil.UnpackStructure<com.robotraconteur.device.DeviceInfo>(MessageElement.FindElement(mm,"device_info"));
    s.inertia =MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.SpatialInertia>(MessageElement.FindElement(mm,"inertia"));
    s.fiducials =MessageElementUtil.UnpackList<com.robotraconteur.fiducial.Fiducial>(MessageElement.FindElement(mm,"fiducials"));
    s.extended =MessageElementUtil.UnpackMap<string,object>(MessageElement.FindElement(mm,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public static class RRExtensions{
}
}
namespace com.robotraconteur.robotics.robot
{
public class RobotKinChainInfo
{
    public com.robotraconteur.identifier.Identifier kin_chain_identifier;
    public com.robotraconteur.geometry.Vector3[] H;
    public com.robotraconteur.geometry.Vector3[] P;
    public com.robotraconteur.geometry.SpatialInertia[] link_inertias;
    public List<com.robotraconteur.identifier.Identifier> link_identifiers;
    public List<com.robotraconteur.fiducial.Fiducial> link_fiducials;
    public uint[] joint_numbers;
    public com.robotraconteur.geometry.Pose flange_pose;
    public com.robotraconteur.identifier.Identifier flange_identifier;
    public com.robotraconteur.robotics.tool.ToolInfo current_tool;
    public com.robotraconteur.robotics.payload.PayloadInfo current_payload;
    public com.robotraconteur.geometry.SpatialVelocity tcp_max_velocity;
    public com.robotraconteur.geometry.SpatialAcceleration tcp_max_acceleration;
    public com.robotraconteur.geometry.SpatialVelocity tcp_reduced_max_velocity;
    public com.robotraconteur.geometry.SpatialAcceleration tcp_reduced_max_acceleration;
    public string description;
    public Dictionary<string,object> extended;
}

public class RobotInfo
{
    public com.robotraconteur.device.DeviceInfo device_info;
    public RobotTypeCode robot_type;
    public List<com.robotraconteur.robotics.joints.JointInfo> joint_info;
    public List<RobotKinChainInfo> chains;
    public uint robot_capabilities;
    public List<com.robotraconteur.signal.SignalInfo> signal_info;
    public List<com.robotraconteur.param.ParameterInfo> parameter_info;
    public ushort config_seqno;
    public List<com.robotraconteur.robotics.trajectory.InterpolationMode> trajectory_interpolation_modes;
    public Dictionary<string,object> extended;
}

public class RobotState
{
    public com.robotraconteur.datetime.TimeSpec3 ts;
    public ulong seqno;
    public RobotCommandMode command_mode;
    public RobotOperationalMode operational_mode;
    public RobotControllerState controller_state;
    public ulong robot_state_flags;
    public double[] joint_position;
    public double[] joint_velocity;
    public double[] joint_effort;
    public double[] joint_position_command;
    public double[] joint_velocity_command;
    public com.robotraconteur.geometry.Pose[] kin_chain_tcp;
    public com.robotraconteur.geometry.SpatialVelocity[] kin_chain_tcp_vel;
    public bool trajectory_running;
}

public class AdvancedRobotState
{
    public com.robotraconteur.datetime.TimeSpec3 ts;
    public ulong seqno;
    public RobotCommandMode command_mode;
    public RobotOperationalMode operational_mode;
    public RobotControllerState controller_state;
    public ulong robot_state_flags;
    public double[] joint_position;
    public double[] joint_velocity;
    public double[] joint_effort;
    public double[] joint_position_command;
    public double[] joint_velocity_command;
    public byte[] joint_position_units;
    public byte[] joint_effort_units;
    public com.robotraconteur.geometry.Pose[] kin_chain_tcp;
    public com.robotraconteur.geometry.SpatialVelocity[] kin_chain_tcp_vel;
    public bool trajectory_running;
    public double trajectory_time;
    public double trajectory_max_time;
    public uint trajectory_current_waypoint;
    public ushort config_seqno;
}

public class RobotStateSensorData
{
    public com.robotraconteur.sensordata.SensorDataHeader data_header;
    public AdvancedRobotState robot_state;
}

public class RobotJointCommand
{
    public ulong seqno;
    public ulong state_seqno;
    public double[] command;
    public byte[] units;
}

[RobotRaconteurServiceObjectInterface()]
public interface Robot : com.robotraconteur.device.Device, com.robotraconteur.device.clock.DeviceClock, com.robotraconteur.device.isoch.IsochDevice
{
    com.robotraconteur.device.DeviceInfo device_info { get; 	}
    RobotInfo robot_info { get; 	}
    RobotCommandMode command_mode { get;  set; 	}
    RobotOperationalMode operational_mode { get; 	}
    RobotControllerState controller_state { get; 	}
    List<com.robotraconteur.eventlog.EventLogMessage> current_errors { get; 	}
    double speed_ratio { get;  set; 	}
    com.robotraconteur.device.isoch.IsochInfo isoch_info { get; 	}
    uint isoch_downsample { get;  set; 	}
    void halt();
    void enable();
    void disable();
    void reset_errors();
    void jog_freespace(double[] joint_position, double[] max_velocity, bool wait);
    void jog_joint(double[] joint_velocity, double timeout, bool wait);
    void jog_cartesian(Dictionary<int,com.robotraconteur.geometry.SpatialVelocity> max_velocity, double timeout, bool wait);
    Generator2<com.robotraconteur.robotics.trajectory.TrajectoryStatus> execute_trajectory(com.robotraconteur.robotics.trajectory.JointTrajectory trajectory);
    Generator2<com.robotraconteur.action.ActionStatusCode> home();
    double[] getf_signal(string signal_name);
    void setf_signal(string signal_name, double[] value_);
    void tool_attached(int chain, com.robotraconteur.robotics.tool.ToolInfo tool);
    void tool_detached(int chain, string tool_name);
    void payload_attached(int chain, com.robotraconteur.robotics.payload.PayloadInfo payload, com.robotraconteur.geometry.Pose pose);
    void payload_detached(int chain, string payload_name);
    object getf_param(string param_name);
    void setf_param(string param_name, object value_);
    event Action<int, string> tool_changed;
    event Action<int, string> payload_changed;
    event Action<string> param_changed;
    Pipe<RobotStateSensorData> robot_state_sensor_data{ get; set; }
    Wire<RobotState> robot_state{ get; set; }
    Wire<AdvancedRobotState> advanced_robot_state{ get; set; }
    Wire<com.robotraconteur.device.clock.DeviceTime> device_clock_now{ get; set; }
    Wire<RobotJointCommand> position_command{ get; set; }
    Wire<RobotJointCommand> velocity_command{ get; set; }
}

public static class com__robotraconteur__robotics__robotConstants 
{
}
    public enum RobotTypeCode
    {
    unknown = 0,
    serial = 1,
    dual_arm = 2,
    differential_drive = 3,
    planar = 4,
    floating = 5,
    freeform = 6,
    other = 7
    };
    public enum RobotCommandMode
    {
    invalid_state = -1,
    halt = 0,
    jog = 1,
    trajectory = 2,
    position_command = 3,
    velocity_command = 4,
    homing = 5
    };
    public enum RobotOperationalMode
    {
    undefined = 0,
    manual_reduced_speed = 1,
    manual_full_speed = 2,
    auto = 3,
    cobot = 4
    };
    public enum RobotControllerState
    {
    undefined = 0,
    init = 1,
    motor_on = 2,
    motor_off = 3,
    guard_stop = 4,
    emergency_stop = 5,
    emergency_stop_reset = 6
    };
    public enum RobotCapabilities
    {
    unknown = 0,
    jog_command = 0x1,
    trajectory_command = 0x2,
    position_command = 0x4,
    velocity_command = 0x8,
    homing_command = 0x10,
    software_reset_errors = 0x20,
    software_enable = 0x40,
    interpolated_trajectory = 0x80,
    raster_trajectory = 0x100,
    trajectory_queueing = 0x200,
    speed_ratio = 0x400
    };
    public enum RobotStateFlags
    {
    unknown = 0,
    error = 0x1,
    fatal_error = 0x2,
    estop = 0x4,
    estop_button1 = 0x8,
    estop_button2 = 0x10,
    estop_button3 = 0x20,
    estop_button4 = 0x40,
    estop_guard1 = 0x80,
    estop_guard2 = 0x100,
    estop_guard3 = 0x200,
    estop_guard4 = 0x400,
    estop_software = 0x800,
    estop_fault = 0x1000,
    estop_internal = 0x2000,
    estop_other = 0x4000,
    estop_released = 0x8000,
    enabling_switch = 0x10000,
    enabled = 0x20000,
    ready = 0x40000,
    homed = 0x80000,
    homing_required = 0x100000,
    communication_failure = 0x200000,
    valid_position_command = 0x1000000,
    valid_velocity_command = 0x2000000,
    trajectory_running = 0x4000000
    };
}
namespace com.robotraconteur.robotics.robot
{
public class com__robotraconteur__robotics__robotFactory : ServiceFactory
{
    public override string DefString()
{
    const string s="service com.robotraconteur.robotics.robot\n\nstdver 0.10\n\nimport com.robotraconteur.geometry\nimport com.robotraconteur.sensordata\nimport com.robotraconteur.device\nimport com.robotraconteur.signal\nimport com.robotraconteur.param\nimport com.robotraconteur.robotics.joints\nimport com.robotraconteur.robotics.tool\nimport com.robotraconteur.robotics.payload\nimport com.robotraconteur.robotics.trajectory\nimport com.robotraconteur.identifier\nimport com.robotraconteur.action\nimport com.robotraconteur.eventlog\nimport com.robotraconteur.device.isoch\nimport com.robotraconteur.device.clock\nimport com.robotraconteur.datetime\nimport com.robotraconteur.fiducial\n\nusing com.robotraconteur.geometry.Point\nusing com.robotraconteur.geometry.Vector3\nusing com.robotraconteur.geometry.Transform\nusing com.robotraconteur.geometry.SpatialInertia\nusing com.robotraconteur.geometry.Pose\nusing com.robotraconteur.geometry.SpatialVelocity\nusing com.robotraconteur.geometry.SpatialAcceleration\nusing com.robotraconteur.sensordata.SensorDataHeader\nusing com.robotraconteur.device.DeviceInfo\nusing com.robotraconteur.device.Device\nusing com.robotraconteur.signal.SignalInfo\nusing com.robotraconteur.robotics.joints.JointInfo\nusing com.robotraconteur.robotics.tool.ToolInfo\nusing com.robotraconteur.robotics.payload.PayloadInfo\nusing com.robotraconteur.param.ParameterInfo\nusing com.robotraconteur.robotics.trajectory.TrajectoryStatus\nusing com.robotraconteur.robotics.trajectory.JointTrajectory\nusing com.robotraconteur.robotics.trajectory.InterpolationMode\nusing com.robotraconteur.identifier.Identifier\nusing com.robotraconteur.action.ActionStatusCode\nusing com.robotraconteur.eventlog.EventLogMessage\nusing com.robotraconteur.device.isoch.IsochDevice\nusing com.robotraconteur.device.isoch.IsochInfo\nusing com.robotraconteur.device.clock.DeviceClock\nusing com.robotraconteur.device.clock.DeviceTime\nusing com.robotraconteur.datetime.TimeSpec3\nusing com.robotraconteur.fiducial.Fiducial\n\n\nenum RobotTypeCode\nunknown = 0,\nserial = 1,\ndual_arm,\ndifferential_drive,\nplanar,\nfloating,\nfreeform,\nother\nend\n\nenum RobotCommandMode\ninvalid_state = -1,\nhalt = 0,\njog,\ntrajectory,\nposition_command,\nvelocity_command,\nhoming\nend\n\nenum RobotOperationalMode\nundefined = 0,\nmanual_reduced_speed,\nmanual_full_speed,\nauto,\ncobot\nend\n\nenum RobotControllerState\nundefined = 0,\ninit = 1,\nmotor_on,\nmotor_off,\nguard_stop,\nemergency_stop,\nemergency_stop_reset\nend\n\nenum RobotCapabilities\nunknown = 0,\njog_command = 0x1,\ntrajectory_command = 0x2,\nposition_command = 0x4,\nvelocity_command = 0x8,\nhoming_command = 0x10,\nsoftware_reset_errors = 0x20,\nsoftware_enable = 0x40,\ninterpolated_trajectory = 0x80,\nraster_trajectory = 0x100,\ntrajectory_queueing = 0x200,\nspeed_ratio = 0x400\nend\n\nenum RobotStateFlags\nunknown = 0,\nerror = 0x1,\nfatal_error = 0x2,\nestop = 0x4,\nestop_button1 = 0x8,\nestop_button2 = 0x10,\nestop_button3 = 0x20,\nestop_button4 = 0x40,\nestop_guard1 = 0x80,\nestop_guard2 = 0x100,\nestop_guard3 = 0x200,\nestop_guard4 = 0x400,\nestop_software = 0x800,\nestop_fault = 0x1000,\nestop_internal = 0x2000,\nestop_other = 0x4000,\nestop_released = 0x8000,\nenabling_switch = 0x10000,\nenabled = 0x20000,\nready = 0x40000,\nhomed = 0x80000,\nhoming_required = 0x100000,\ncommunication_failure = 0x200000,\nvalid_position_command = 0x1000000,\nvalid_velocity_command = 0x2000000,\ntrajectory_running = 0x4000000\nend\n\nstruct RobotKinChainInfo\nfield Identifier kin_chain_identifier\nfield Vector3[] H\nfield Vector3[] P\nfield SpatialInertia[] link_inertias\nfield Identifier{list} link_identifiers\nfield Fiducial{list} link_fiducials\nfield uint32[] joint_numbers\nfield Pose flange_pose\nfield Identifier flange_identifier\nfield ToolInfo current_tool\nfield PayloadInfo current_payload\nfield SpatialVelocity tcp_max_velocity\nfield SpatialAcceleration tcp_max_acceleration\nfield SpatialVelocity tcp_reduced_max_velocity\nfield SpatialAcceleration tcp_reduced_max_acceleration\nfield string description\nfield varvalue{string} extended\nend\n\nstruct RobotInfo\nfield DeviceInfo device_info\nfield RobotTypeCode robot_type\nfield JointInfo{list} joint_info\nfield RobotKinChainInfo{list} chains\nfield uint32 robot_capabilities\nfield SignalInfo{list} signal_info\nfield ParameterInfo{list} parameter_info\nfield uint16 config_seqno\nfield InterpolationMode{list} trajectory_interpolation_modes\nfield varvalue{string} extended\nend\n\nstruct RobotState\nfield TimeSpec3 ts\nfield uint64 seqno\nfield RobotCommandMode command_mode\nfield RobotOperationalMode operational_mode\nfield RobotControllerState controller_state\nfield uint64 robot_state_flags\nfield double[] joint_position\nfield double[] joint_velocity\nfield double[] joint_effort\nfield double[] joint_position_command\nfield double[] joint_velocity_command\nfield Pose[] kin_chain_tcp\nfield SpatialVelocity[] kin_chain_tcp_vel\nfield bool trajectory_running\nend\n\nstruct AdvancedRobotState\nfield TimeSpec3 ts\nfield uint64 seqno\nfield RobotCommandMode command_mode\nfield RobotOperationalMode operational_mode\nfield RobotControllerState controller_state\nfield uint64 robot_state_flags\nfield double[] joint_position\nfield double[] joint_velocity\nfield double[] joint_effort\nfield double[] joint_position_command\nfield double[] joint_velocity_command\nfield uint8[] joint_position_units\nfield uint8[] joint_effort_units\nfield Pose[] kin_chain_tcp\nfield SpatialVelocity[] kin_chain_tcp_vel\nfield bool trajectory_running\nfield double trajectory_time\nfield double trajectory_max_time\nfield uint32 trajectory_current_waypoint\nfield uint16 config_seqno\nend\n\nstruct RobotStateSensorData\nfield SensorDataHeader data_header\nfield AdvancedRobotState robot_state\nend\n\nstruct RobotJointCommand\nfield uint64 seqno\nfield uint64 state_seqno\nfield double[] command\n# Use JointUnits values\nfield uint8[] units\nend\n\nobject Robot\nimplements Device\nimplements DeviceClock\nimplements IsochDevice\nproperty DeviceInfo device_info [readonly,nolock]\nproperty RobotInfo robot_info [readonly,nolock]\nproperty RobotCommandMode command_mode [nolockread]\nproperty RobotOperationalMode operational_mode [readonly, nolock]\nproperty RobotControllerState controller_state [readonly, nolock]\nproperty EventLogMessage{list} current_errors [readonly, nolock]\nfunction void halt() [urgent]\nfunction void enable()\nfunction void disable() [urgent]\nfunction void reset_errors()\nproperty double speed_ratio\nfunction void jog_freespace(double[] joint_position, double[] max_velocity, bool wait)\nfunction void jog_joint(double[] joint_velocity, double timeout, bool wait)\nfunction void jog_cartesian(SpatialVelocity{int32} max_velocity, double timeout, bool wait)\nfunction TrajectoryStatus{generator} execute_trajectory(JointTrajectory trajectory)\nwire RobotState robot_state [readonly,nolock]\nwire AdvancedRobotState advanced_robot_state [readonly,nolock]\npipe RobotStateSensorData robot_state_sensor_data [readonly,nolock]\nproperty IsochInfo isoch_info [readonly,nolock]\nproperty uint32 isoch_downsample [perclient]\nwire DeviceTime device_clock_now [readonly,nolock]\nwire RobotJointCommand position_command [writeonly]\nwire RobotJointCommand velocity_command [writeonly]\nfunction ActionStatusCode{generator} home()\nfunction double[] getf_signal(string signal_name)\nfunction void setf_signal(string signal_name, double[] value)\nfunction void tool_attached(int32 chain, ToolInfo tool)\nfunction void tool_detached(int32 chain, string tool_name)\nevent tool_changed(int32 chain, string tool_name)\nfunction void payload_attached(int32 chain, PayloadInfo payload, Pose pose)\nfunction void payload_detached(int32 chain, string payload_name)\nevent payload_changed(int32 chain, string payload_name)\nfunction varvalue getf_param(string param_name)\nfunction void setf_param(string param_name, varvalue value)\nevent param_changed(string param_name)\nend\n\n";
    return s;
    }
    public override string GetServiceName() {return "com.robotraconteur.robotics.robot";}
    public RobotKinChainInfo_stub RobotKinChainInfo_stubentry;
    public RobotInfo_stub RobotInfo_stubentry;
    public RobotState_stub RobotState_stubentry;
    public AdvancedRobotState_stub AdvancedRobotState_stubentry;
    public RobotStateSensorData_stub RobotStateSensorData_stubentry;
    public RobotJointCommand_stub RobotJointCommand_stubentry;
    public com__robotraconteur__robotics__robotFactory()
{
    RobotKinChainInfo_stubentry=new RobotKinChainInfo_stub(this);
    RobotInfo_stubentry=new RobotInfo_stub(this);
    RobotState_stubentry=new RobotState_stub(this);
    AdvancedRobotState_stubentry=new AdvancedRobotState_stub(this);
    RobotStateSensorData_stubentry=new RobotStateSensorData_stub(this);
    RobotJointCommand_stubentry=new RobotJointCommand_stub(this);
    }
    public override IStructureStub FindStructureStub(string objecttype)
    {
    if (objecttype=="RobotKinChainInfo")    return RobotKinChainInfo_stubentry;
    if (objecttype=="RobotInfo")    return RobotInfo_stubentry;
    if (objecttype=="RobotState")    return RobotState_stubentry;
    if (objecttype=="AdvancedRobotState")    return AdvancedRobotState_stubentry;
    if (objecttype=="RobotStateSensorData")    return RobotStateSensorData_stubentry;
    if (objecttype=="RobotJointCommand")    return RobotJointCommand_stubentry;
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public override IPodStub FindPodStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override INamedArrayStub FindNamedArrayStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override ServiceStub CreateStub(WrappedServiceStub innerstub) {
    string objecttype=innerstub.RR_objecttype.GetServiceDefinition().Name + "." + innerstub.RR_objecttype.Name;    string objshort;
    if (CompareNamespace(objecttype, out objshort)) {
    switch (objshort) {
    case "Robot":
    return new Robot_stub(innerstub);
    default:
    break;
    }
    } else {
    string ext_service_type=RobotRaconteurNode.SplitQualifiedName(objecttype).Item1;
    return RobotRaconteurNode.s.GetServiceType(ext_service_type).CreateStub(innerstub);
    }
    throw new ServiceException("Could not create stub");
    }
    public override ServiceSkel CreateSkel(object obj) {
    string objtype = RobotRaconteurNode.GetTypeString(ServiceSkelUtil.FindParentInterface(obj.GetType()));
    string objshort;
    if (CompareNamespace(objtype, out objshort)) {
    switch(objshort) {
    case "Robot":
    return new Robot_skel((Robot)obj);
    default:
    break;
    }
    } else {
    string ext_service_type=RobotRaconteurNode.SplitQualifiedName(objtype).Item1;
    return RobotRaconteurNode.s.GetServiceFactory(ext_service_type).CreateSkel(obj);
    }
    throw new ServiceException("Could not create skel");
    }
    public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp){
    if (rr_exp==null) return rr_exp;
    string rr_type=rr_exp.Error;
    if (!rr_type.Contains(".")) return rr_exp;
    string rr_stype;
    if (CompareNamespace(rr_type, out rr_stype)) {
    } else {
    return RobotRaconteurNode.s.DownCastException(rr_exp); 
    }
    return rr_exp;
    }
}

public class RobotKinChainInfo_stub : IStructureStub {
    public RobotKinChainInfo_stub(com__robotraconteur__robotics__robotFactory d) {def=d;}
    private com__robotraconteur__robotics__robotFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    RobotKinChainInfo s = (RobotKinChainInfo)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("kin_chain_identifier",s.kin_chain_identifier));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackNamedArray<com.robotraconteur.geometry.Vector3>("H",s.H));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackNamedArray<com.robotraconteur.geometry.Vector3>("P",s.P));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackNamedArray<com.robotraconteur.geometry.SpatialInertia>("link_inertias",s.link_inertias));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackListType<com.robotraconteur.identifier.Identifier>("link_identifiers",s.link_identifiers));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackListType<com.robotraconteur.fiducial.Fiducial>("link_fiducials",s.link_fiducials));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackArray<uint>("joint_numbers",s.joint_numbers));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Pose>("flange_pose",ref s.flange_pose));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("flange_identifier",s.flange_identifier));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("current_tool",s.current_tool));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("current_payload",s.current_payload));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.SpatialVelocity>("tcp_max_velocity",ref s.tcp_max_velocity));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.SpatialAcceleration>("tcp_max_acceleration",ref s.tcp_max_acceleration));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.SpatialVelocity>("tcp_reduced_max_velocity",ref s.tcp_reduced_max_velocity));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.SpatialAcceleration>("tcp_reduced_max_acceleration",ref s.tcp_reduced_max_acceleration));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackString("description",s.description));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackMapType<string,object>("extended",s.extended));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.robotics.robot.RobotKinChainInfo",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    RobotKinChainInfo s=new RobotKinChainInfo();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.kin_chain_identifier =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(MessageElement.FindElement(mm,"kin_chain_identifier"));
    s.H =MessageElementUtil.UnpackNamedArray<com.robotraconteur.geometry.Vector3>(MessageElement.FindElement(mm,"H"));
    s.P =MessageElementUtil.UnpackNamedArray<com.robotraconteur.geometry.Vector3>(MessageElement.FindElement(mm,"P"));
    s.link_inertias =MessageElementUtil.UnpackNamedArray<com.robotraconteur.geometry.SpatialInertia>(MessageElement.FindElement(mm,"link_inertias"));
    s.link_identifiers =MessageElementUtil.UnpackList<com.robotraconteur.identifier.Identifier>(MessageElement.FindElement(mm,"link_identifiers"));
    s.link_fiducials =MessageElementUtil.UnpackList<com.robotraconteur.fiducial.Fiducial>(MessageElement.FindElement(mm,"link_fiducials"));
    s.joint_numbers =MessageElementUtil.UnpackArray<uint>(MessageElement.FindElement(mm,"joint_numbers"));
    s.flange_pose =MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.Pose>(MessageElement.FindElement(mm,"flange_pose"));
    s.flange_identifier =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(MessageElement.FindElement(mm,"flange_identifier"));
    s.current_tool =MessageElementUtil.UnpackStructure<com.robotraconteur.robotics.tool.ToolInfo>(MessageElement.FindElement(mm,"current_tool"));
    s.current_payload =MessageElementUtil.UnpackStructure<com.robotraconteur.robotics.payload.PayloadInfo>(MessageElement.FindElement(mm,"current_payload"));
    s.tcp_max_velocity =MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.SpatialVelocity>(MessageElement.FindElement(mm,"tcp_max_velocity"));
    s.tcp_max_acceleration =MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.SpatialAcceleration>(MessageElement.FindElement(mm,"tcp_max_acceleration"));
    s.tcp_reduced_max_velocity =MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.SpatialVelocity>(MessageElement.FindElement(mm,"tcp_reduced_max_velocity"));
    s.tcp_reduced_max_acceleration =MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.SpatialAcceleration>(MessageElement.FindElement(mm,"tcp_reduced_max_acceleration"));
    s.description =MessageElementUtil.UnpackString(MessageElement.FindElement(mm,"description"));
    s.extended =MessageElementUtil.UnpackMap<string,object>(MessageElement.FindElement(mm,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class RobotInfo_stub : IStructureStub {
    public RobotInfo_stub(com__robotraconteur__robotics__robotFactory d) {def=d;}
    private com__robotraconteur__robotics__robotFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    RobotInfo s = (RobotInfo)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("device_info",s.device_info));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackEnum<RobotTypeCode>("robot_type",s.robot_type));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackListType<com.robotraconteur.robotics.joints.JointInfo>("joint_info",s.joint_info));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackListType<RobotKinChainInfo>("chains",s.chains));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<uint>("robot_capabilities",s.robot_capabilities));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackListType<com.robotraconteur.signal.SignalInfo>("signal_info",s.signal_info));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackListType<com.robotraconteur.param.ParameterInfo>("parameter_info",s.parameter_info));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<ushort>("config_seqno",s.config_seqno));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackListType<com.robotraconteur.robotics.trajectory.InterpolationMode>("trajectory_interpolation_modes",s.trajectory_interpolation_modes));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackMapType<string,object>("extended",s.extended));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.robotics.robot.RobotInfo",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    RobotInfo s=new RobotInfo();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.device_info =MessageElementUtil.UnpackStructure<com.robotraconteur.device.DeviceInfo>(MessageElement.FindElement(mm,"device_info"));
    s.robot_type =MessageElementUtil.UnpackEnum<RobotTypeCode>(MessageElement.FindElement(mm,"robot_type"));
    s.joint_info =MessageElementUtil.UnpackList<com.robotraconteur.robotics.joints.JointInfo>(MessageElement.FindElement(mm,"joint_info"));
    s.chains =MessageElementUtil.UnpackList<RobotKinChainInfo>(MessageElement.FindElement(mm,"chains"));
    s.robot_capabilities =(MessageElementUtil.UnpackScalar<uint>(MessageElement.FindElement(mm,"robot_capabilities")));
    s.signal_info =MessageElementUtil.UnpackList<com.robotraconteur.signal.SignalInfo>(MessageElement.FindElement(mm,"signal_info"));
    s.parameter_info =MessageElementUtil.UnpackList<com.robotraconteur.param.ParameterInfo>(MessageElement.FindElement(mm,"parameter_info"));
    s.config_seqno =(MessageElementUtil.UnpackScalar<ushort>(MessageElement.FindElement(mm,"config_seqno")));
    s.trajectory_interpolation_modes =MessageElementUtil.UnpackList<com.robotraconteur.robotics.trajectory.InterpolationMode>(MessageElement.FindElement(mm,"trajectory_interpolation_modes"));
    s.extended =MessageElementUtil.UnpackMap<string,object>(MessageElement.FindElement(mm,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class RobotState_stub : IStructureStub {
    public RobotState_stub(com__robotraconteur__robotics__robotFactory d) {def=d;}
    private com__robotraconteur__robotics__robotFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    RobotState s = (RobotState)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.datetime.TimeSpec3>("ts",ref s.ts));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<ulong>("seqno",s.seqno));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackEnum<RobotCommandMode>("command_mode",s.command_mode));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackEnum<RobotOperationalMode>("operational_mode",s.operational_mode));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackEnum<RobotControllerState>("controller_state",s.controller_state));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<ulong>("robot_state_flags",s.robot_state_flags));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackArray<double>("joint_position",s.joint_position));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackArray<double>("joint_velocity",s.joint_velocity));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackArray<double>("joint_effort",s.joint_effort));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackArray<double>("joint_position_command",s.joint_position_command));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackArray<double>("joint_velocity_command",s.joint_velocity_command));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackNamedArray<com.robotraconteur.geometry.Pose>("kin_chain_tcp",s.kin_chain_tcp));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackNamedArray<com.robotraconteur.geometry.SpatialVelocity>("kin_chain_tcp_vel",s.kin_chain_tcp_vel));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<bool>("trajectory_running",s.trajectory_running));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.robotics.robot.RobotState",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    RobotState s=new RobotState();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.ts =MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.datetime.TimeSpec3>(MessageElement.FindElement(mm,"ts"));
    s.seqno =(MessageElementUtil.UnpackScalar<ulong>(MessageElement.FindElement(mm,"seqno")));
    s.command_mode =MessageElementUtil.UnpackEnum<RobotCommandMode>(MessageElement.FindElement(mm,"command_mode"));
    s.operational_mode =MessageElementUtil.UnpackEnum<RobotOperationalMode>(MessageElement.FindElement(mm,"operational_mode"));
    s.controller_state =MessageElementUtil.UnpackEnum<RobotControllerState>(MessageElement.FindElement(mm,"controller_state"));
    s.robot_state_flags =(MessageElementUtil.UnpackScalar<ulong>(MessageElement.FindElement(mm,"robot_state_flags")));
    s.joint_position =MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(mm,"joint_position"));
    s.joint_velocity =MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(mm,"joint_velocity"));
    s.joint_effort =MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(mm,"joint_effort"));
    s.joint_position_command =MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(mm,"joint_position_command"));
    s.joint_velocity_command =MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(mm,"joint_velocity_command"));
    s.kin_chain_tcp =MessageElementUtil.UnpackNamedArray<com.robotraconteur.geometry.Pose>(MessageElement.FindElement(mm,"kin_chain_tcp"));
    s.kin_chain_tcp_vel =MessageElementUtil.UnpackNamedArray<com.robotraconteur.geometry.SpatialVelocity>(MessageElement.FindElement(mm,"kin_chain_tcp_vel"));
    s.trajectory_running =(MessageElementUtil.UnpackScalar<bool>(MessageElement.FindElement(mm,"trajectory_running")));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class AdvancedRobotState_stub : IStructureStub {
    public AdvancedRobotState_stub(com__robotraconteur__robotics__robotFactory d) {def=d;}
    private com__robotraconteur__robotics__robotFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    AdvancedRobotState s = (AdvancedRobotState)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.datetime.TimeSpec3>("ts",ref s.ts));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<ulong>("seqno",s.seqno));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackEnum<RobotCommandMode>("command_mode",s.command_mode));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackEnum<RobotOperationalMode>("operational_mode",s.operational_mode));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackEnum<RobotControllerState>("controller_state",s.controller_state));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<ulong>("robot_state_flags",s.robot_state_flags));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackArray<double>("joint_position",s.joint_position));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackArray<double>("joint_velocity",s.joint_velocity));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackArray<double>("joint_effort",s.joint_effort));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackArray<double>("joint_position_command",s.joint_position_command));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackArray<double>("joint_velocity_command",s.joint_velocity_command));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackArray<byte>("joint_position_units",s.joint_position_units));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackArray<byte>("joint_effort_units",s.joint_effort_units));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackNamedArray<com.robotraconteur.geometry.Pose>("kin_chain_tcp",s.kin_chain_tcp));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackNamedArray<com.robotraconteur.geometry.SpatialVelocity>("kin_chain_tcp_vel",s.kin_chain_tcp_vel));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<bool>("trajectory_running",s.trajectory_running));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<double>("trajectory_time",s.trajectory_time));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<double>("trajectory_max_time",s.trajectory_max_time));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<uint>("trajectory_current_waypoint",s.trajectory_current_waypoint));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<ushort>("config_seqno",s.config_seqno));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.robotics.robot.AdvancedRobotState",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    AdvancedRobotState s=new AdvancedRobotState();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.ts =MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.datetime.TimeSpec3>(MessageElement.FindElement(mm,"ts"));
    s.seqno =(MessageElementUtil.UnpackScalar<ulong>(MessageElement.FindElement(mm,"seqno")));
    s.command_mode =MessageElementUtil.UnpackEnum<RobotCommandMode>(MessageElement.FindElement(mm,"command_mode"));
    s.operational_mode =MessageElementUtil.UnpackEnum<RobotOperationalMode>(MessageElement.FindElement(mm,"operational_mode"));
    s.controller_state =MessageElementUtil.UnpackEnum<RobotControllerState>(MessageElement.FindElement(mm,"controller_state"));
    s.robot_state_flags =(MessageElementUtil.UnpackScalar<ulong>(MessageElement.FindElement(mm,"robot_state_flags")));
    s.joint_position =MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(mm,"joint_position"));
    s.joint_velocity =MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(mm,"joint_velocity"));
    s.joint_effort =MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(mm,"joint_effort"));
    s.joint_position_command =MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(mm,"joint_position_command"));
    s.joint_velocity_command =MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(mm,"joint_velocity_command"));
    s.joint_position_units =MessageElementUtil.UnpackArray<byte>(MessageElement.FindElement(mm,"joint_position_units"));
    s.joint_effort_units =MessageElementUtil.UnpackArray<byte>(MessageElement.FindElement(mm,"joint_effort_units"));
    s.kin_chain_tcp =MessageElementUtil.UnpackNamedArray<com.robotraconteur.geometry.Pose>(MessageElement.FindElement(mm,"kin_chain_tcp"));
    s.kin_chain_tcp_vel =MessageElementUtil.UnpackNamedArray<com.robotraconteur.geometry.SpatialVelocity>(MessageElement.FindElement(mm,"kin_chain_tcp_vel"));
    s.trajectory_running =(MessageElementUtil.UnpackScalar<bool>(MessageElement.FindElement(mm,"trajectory_running")));
    s.trajectory_time =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(mm,"trajectory_time")));
    s.trajectory_max_time =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(mm,"trajectory_max_time")));
    s.trajectory_current_waypoint =(MessageElementUtil.UnpackScalar<uint>(MessageElement.FindElement(mm,"trajectory_current_waypoint")));
    s.config_seqno =(MessageElementUtil.UnpackScalar<ushort>(MessageElement.FindElement(mm,"config_seqno")));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class RobotStateSensorData_stub : IStructureStub {
    public RobotStateSensorData_stub(com__robotraconteur__robotics__robotFactory d) {def=d;}
    private com__robotraconteur__robotics__robotFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    RobotStateSensorData s = (RobotStateSensorData)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("data_header",s.data_header));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("robot_state",s.robot_state));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.robotics.robot.RobotStateSensorData",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    RobotStateSensorData s=new RobotStateSensorData();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.data_header =MessageElementUtil.UnpackStructure<com.robotraconteur.sensordata.SensorDataHeader>(MessageElement.FindElement(mm,"data_header"));
    s.robot_state =MessageElementUtil.UnpackStructure<AdvancedRobotState>(MessageElement.FindElement(mm,"robot_state"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class RobotJointCommand_stub : IStructureStub {
    public RobotJointCommand_stub(com__robotraconteur__robotics__robotFactory d) {def=d;}
    private com__robotraconteur__robotics__robotFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    RobotJointCommand s = (RobotJointCommand)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<ulong>("seqno",s.seqno));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<ulong>("state_seqno",s.state_seqno));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackArray<double>("command",s.command));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackArray<byte>("units",s.units));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.robotics.robot.RobotJointCommand",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    RobotJointCommand s=new RobotJointCommand();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.seqno =(MessageElementUtil.UnpackScalar<ulong>(MessageElement.FindElement(mm,"seqno")));
    s.state_seqno =(MessageElementUtil.UnpackScalar<ulong>(MessageElement.FindElement(mm,"state_seqno")));
    s.command =MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(mm,"command"));
    s.units =MessageElementUtil.UnpackArray<byte>(MessageElement.FindElement(mm,"units"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public interface async_Robot : com.robotraconteur.device.async_Device, com.robotraconteur.device.clock.async_DeviceClock, com.robotraconteur.device.isoch.async_IsochDevice
{
    Task<com.robotraconteur.device.DeviceInfo> async_get_device_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<RobotInfo> async_get_robot_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<RobotCommandMode> async_get_command_mode(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_command_mode(RobotCommandMode value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<RobotOperationalMode> async_get_operational_mode(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<RobotControllerState> async_get_controller_state(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<List<com.robotraconteur.eventlog.EventLogMessage>> async_get_current_errors(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<double> async_get_speed_ratio(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_speed_ratio(double value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<com.robotraconteur.device.isoch.IsochInfo> async_get_isoch_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<uint> async_get_isoch_downsample(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_isoch_downsample(uint value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_halt(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_enable(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_disable(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_reset_errors(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_jog_freespace(double[] joint_position, double[] max_velocity, bool wait,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_jog_joint(double[] joint_velocity, double timeout, bool wait,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_jog_cartesian(Dictionary<int,com.robotraconteur.geometry.SpatialVelocity> max_velocity, double timeout, bool wait,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<Generator2<com.robotraconteur.robotics.trajectory.TrajectoryStatus>> async_execute_trajectory(com.robotraconteur.robotics.trajectory.JointTrajectory trajectory,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<Generator2<com.robotraconteur.action.ActionStatusCode>> async_home(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<double[]> async_getf_signal(string signal_name,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_setf_signal(string signal_name, double[] value_,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_tool_attached(int chain, com.robotraconteur.robotics.tool.ToolInfo tool,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_tool_detached(int chain, string tool_name,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_payload_attached(int chain, com.robotraconteur.robotics.payload.PayloadInfo payload, com.robotraconteur.geometry.Pose pose,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_payload_detached(int chain, string payload_name,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<object> async_getf_param(string param_name,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_setf_param(string param_name, object value_,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
}
public class Robot_stub : ServiceStub , Robot, async_Robot{
    private Pipe<RobotStateSensorData> rr_robot_state_sensor_data;
    private Wire<RobotState> rr_robot_state;
    private Wire<AdvancedRobotState> rr_advanced_robot_state;
    private Wire<com.robotraconteur.device.clock.DeviceTime> rr_device_clock_now;
    private Wire<RobotJointCommand> rr_position_command;
    private Wire<RobotJointCommand> rr_velocity_command;
    public Robot_stub(WrappedServiceStub innerstub) : base(innerstub) {
    rr_robot_state_sensor_data=new Pipe<RobotStateSensorData>(innerstub.GetPipe("robot_state_sensor_data"));
    rr_robot_state=new Wire<RobotState>(innerstub.GetWire("robot_state"));
    rr_advanced_robot_state=new Wire<AdvancedRobotState>(innerstub.GetWire("advanced_robot_state"));
    rr_device_clock_now=new Wire<com.robotraconteur.device.clock.DeviceTime>(innerstub.GetWire("device_clock_now"));
    rr_position_command=new Wire<RobotJointCommand>(innerstub.GetWire("position_command"));
    rr_velocity_command=new Wire<RobotJointCommand>(innerstub.GetWire("velocity_command"));
    }
    public com.robotraconteur.device.DeviceInfo device_info {
    get {
    return MessageElementUtil.UnpackStructure<com.robotraconteur.device.DeviceInfo>(rr_innerstub.PropertyGet("device_info"));
    }
    }
    public RobotInfo robot_info {
    get {
    return MessageElementUtil.UnpackStructure<RobotInfo>(rr_innerstub.PropertyGet("robot_info"));
    }
    }
    public RobotCommandMode command_mode {
    get {
    return MessageElementUtil.UnpackEnum<RobotCommandMode>(rr_innerstub.PropertyGet("command_mode"));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackEnum<RobotCommandMode>("value",value))
    {
    rr_innerstub.PropertySet("command_mode", m);
    }
    }
    }
    public RobotOperationalMode operational_mode {
    get {
    return MessageElementUtil.UnpackEnum<RobotOperationalMode>(rr_innerstub.PropertyGet("operational_mode"));
    }
    }
    public RobotControllerState controller_state {
    get {
    return MessageElementUtil.UnpackEnum<RobotControllerState>(rr_innerstub.PropertyGet("controller_state"));
    }
    }
    public List<com.robotraconteur.eventlog.EventLogMessage> current_errors {
    get {
    return MessageElementUtil.UnpackList<com.robotraconteur.eventlog.EventLogMessage>(rr_innerstub.PropertyGet("current_errors"));
    }
    }
    public double speed_ratio {
    get {
    return (MessageElementUtil.UnpackScalar<double>(rr_innerstub.PropertyGet("speed_ratio")));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackScalar<double>("value",value))
    {
    rr_innerstub.PropertySet("speed_ratio", m);
    }
    }
    }
    public com.robotraconteur.device.isoch.IsochInfo isoch_info {
    get {
    return MessageElementUtil.UnpackStructure<com.robotraconteur.device.isoch.IsochInfo>(rr_innerstub.PropertyGet("isoch_info"));
    }
    }
    public uint isoch_downsample {
    get {
    return (MessageElementUtil.UnpackScalar<uint>(rr_innerstub.PropertyGet("isoch_downsample")));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackScalar<uint>("value",value))
    {
    rr_innerstub.PropertySet("isoch_downsample", m);
    }
    }
    }
    public void halt() {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    using(MessageElement rr_me=rr_innerstub.FunctionCall("halt",rr_param))
    {
    }
    }
    }
    public void enable() {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    using(MessageElement rr_me=rr_innerstub.FunctionCall("enable",rr_param))
    {
    }
    }
    }
    public void disable() {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    using(MessageElement rr_me=rr_innerstub.FunctionCall("disable",rr_param))
    {
    }
    }
    }
    public void reset_errors() {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    using(MessageElement rr_me=rr_innerstub.FunctionCall("reset_errors",rr_param))
    {
    }
    }
    }
    public void jog_freespace(double[] joint_position, double[] max_velocity, bool wait) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackArray<double>("joint_position",joint_position));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackArray<double>("max_velocity",max_velocity));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackScalar<bool>("wait",wait));
    using(MessageElement rr_me=rr_innerstub.FunctionCall("jog_freespace",rr_param))
    {
    }
    }
    }
    public void jog_joint(double[] joint_velocity, double timeout, bool wait) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackArray<double>("joint_velocity",joint_velocity));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackScalar<double>("timeout",timeout));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackScalar<bool>("wait",wait));
    using(MessageElement rr_me=rr_innerstub.FunctionCall("jog_joint",rr_param))
    {
    }
    }
    }
    public void jog_cartesian(Dictionary<int,com.robotraconteur.geometry.SpatialVelocity> max_velocity, double timeout, bool wait) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackMapType<int,com.robotraconteur.geometry.SpatialVelocity>("max_velocity",max_velocity));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackScalar<double>("timeout",timeout));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackScalar<bool>("wait",wait));
    using(MessageElement rr_me=rr_innerstub.FunctionCall("jog_cartesian",rr_param))
    {
    }
    }
    }
    public Generator2<com.robotraconteur.robotics.trajectory.TrajectoryStatus> execute_trajectory(com.robotraconteur.robotics.trajectory.JointTrajectory trajectory) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackStructure("trajectory",trajectory));
    WrappedGeneratorClient generator_client = rr_innerstub.GeneratorFunctionCall("execute_trajectory",rr_param);
    return new Generator2Client<com.robotraconteur.robotics.trajectory.TrajectoryStatus>(generator_client);
    }
    }
    public Generator2<com.robotraconteur.action.ActionStatusCode> home() {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    WrappedGeneratorClient generator_client = rr_innerstub.GeneratorFunctionCall("home",rr_param);
    return new Generator2Client<com.robotraconteur.action.ActionStatusCode>(generator_client);
    }
    }
    public double[] getf_signal(string signal_name) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("signal_name",signal_name));
    using(MessageElement rr_me=rr_innerstub.FunctionCall("getf_signal",rr_param))
    {
    return MessageElementUtil.UnpackArray<double>(rr_me);
    }
    }
    }
    public void setf_signal(string signal_name, double[] value_) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("signal_name",signal_name));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackArray<double>("value",value_));
    using(MessageElement rr_me=rr_innerstub.FunctionCall("setf_signal",rr_param))
    {
    }
    }
    }
    public void tool_attached(int chain, com.robotraconteur.robotics.tool.ToolInfo tool) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackScalar<int>("chain",chain));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackStructure("tool",tool));
    using(MessageElement rr_me=rr_innerstub.FunctionCall("tool_attached",rr_param))
    {
    }
    }
    }
    public void tool_detached(int chain, string tool_name) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackScalar<int>("chain",chain));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("tool_name",tool_name));
    using(MessageElement rr_me=rr_innerstub.FunctionCall("tool_detached",rr_param))
    {
    }
    }
    }
    public void payload_attached(int chain, com.robotraconteur.robotics.payload.PayloadInfo payload, com.robotraconteur.geometry.Pose pose) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackScalar<int>("chain",chain));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackStructure("payload",payload));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Pose>("pose",ref pose));
    using(MessageElement rr_me=rr_innerstub.FunctionCall("payload_attached",rr_param))
    {
    }
    }
    }
    public void payload_detached(int chain, string payload_name) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackScalar<int>("chain",chain));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("payload_name",payload_name));
    using(MessageElement rr_me=rr_innerstub.FunctionCall("payload_detached",rr_param))
    {
    }
    }
    }
    public object getf_param(string param_name) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("param_name",param_name));
    using(MessageElement rr_me=rr_innerstub.FunctionCall("getf_param",rr_param))
    {
    return MessageElementUtil.UnpackVarType(rr_me);
    }
    }
    }
    public void setf_param(string param_name, object value_) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("param_name",param_name));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackVarType("value",value_));
    using(MessageElement rr_me=rr_innerstub.FunctionCall("setf_param",rr_param))
    {
    }
    }
    }
    public event Action<int, string> tool_changed;
    public event Action<int, string> payload_changed;
    public event Action<string> param_changed;
    public override void DispatchEvent(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    case "tool_changed":
    {
    if (tool_changed != null) { 
    int chain=(MessageElementUtil.UnpackScalar<int>(vectorptr_messageelement_util.FindElement(rr_m,"chain")));
    string tool_name=MessageElementUtil.UnpackString(vectorptr_messageelement_util.FindElement(rr_m,"tool_name"));
    tool_changed(chain, tool_name);
    }
    return;
    }
    case "payload_changed":
    {
    if (payload_changed != null) { 
    int chain=(MessageElementUtil.UnpackScalar<int>(vectorptr_messageelement_util.FindElement(rr_m,"chain")));
    string payload_name=MessageElementUtil.UnpackString(vectorptr_messageelement_util.FindElement(rr_m,"payload_name"));
    payload_changed(chain, payload_name);
    }
    return;
    }
    case "param_changed":
    {
    if (param_changed != null) { 
    string param_name=MessageElementUtil.UnpackString(vectorptr_messageelement_util.FindElement(rr_m,"param_name"));
    param_changed(param_name);
    }
    return;
    }
    default:
    break;
    }
    }
    public Pipe<RobotStateSensorData> robot_state_sensor_data {
    get { return rr_robot_state_sensor_data;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<RobotState> robot_state {
    get { return rr_robot_state;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<AdvancedRobotState> advanced_robot_state {
    get { return rr_advanced_robot_state;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<com.robotraconteur.device.clock.DeviceTime> device_clock_now {
    get { return rr_device_clock_now;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<RobotJointCommand> position_command {
    get { return rr_position_command;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<RobotJointCommand> velocity_command {
    get { return rr_velocity_command;  }
    set { throw new InvalidOperationException();}
    }
    public override MessageElement CallbackCall(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public virtual async Task<com.robotraconteur.device.DeviceInfo> async_get_device_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("device_info",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<com.robotraconteur.device.DeviceInfo>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<RobotInfo> async_get_robot_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("robot_info",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<RobotInfo>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<RobotCommandMode> async_get_command_mode(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("command_mode",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackEnum<RobotCommandMode>(rr_value);
    return rr_ret;
    } }
    public virtual async Task async_set_command_mode(RobotCommandMode value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackEnum<RobotCommandMode>("value",value))
    {
    await rr_async_PropertySet("command_mode",mm,rr_timeout);
    }
    }
    public virtual async Task<RobotOperationalMode> async_get_operational_mode(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("operational_mode",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackEnum<RobotOperationalMode>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<RobotControllerState> async_get_controller_state(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("controller_state",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackEnum<RobotControllerState>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<List<com.robotraconteur.eventlog.EventLogMessage>> async_get_current_errors(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("current_errors",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackList<com.robotraconteur.eventlog.EventLogMessage>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<double> async_get_speed_ratio(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("speed_ratio",rr_timeout)) {
    var rr_ret=(MessageElementUtil.UnpackScalar<double>(rr_value));
    return rr_ret;
    } }
    public virtual async Task async_set_speed_ratio(double value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackScalar<double>("value",value))
    {
    await rr_async_PropertySet("speed_ratio",mm,rr_timeout);
    }
    }
    public virtual async Task<com.robotraconteur.device.isoch.IsochInfo> async_get_isoch_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("isoch_info",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<com.robotraconteur.device.isoch.IsochInfo>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<uint> async_get_isoch_downsample(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("isoch_downsample",rr_timeout)) {
    var rr_ret=(MessageElementUtil.UnpackScalar<uint>(rr_value));
    return rr_ret;
    } }
    public virtual async Task async_set_isoch_downsample(uint value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackScalar<uint>("value",value))
    {
    await rr_async_PropertySet("isoch_downsample",mm,rr_timeout);
    }
    }
    public virtual async Task async_halt(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    using(var rr_return = await rr_async_FunctionCall("halt",rr_param,rr_timeout)) {
    } } }
    public virtual async Task async_enable(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    using(var rr_return = await rr_async_FunctionCall("enable",rr_param,rr_timeout)) {
    } } }
    public virtual async Task async_disable(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    using(var rr_return = await rr_async_FunctionCall("disable",rr_param,rr_timeout)) {
    } } }
    public virtual async Task async_reset_errors(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    using(var rr_return = await rr_async_FunctionCall("reset_errors",rr_param,rr_timeout)) {
    } } }
    public virtual async Task async_jog_freespace(double[] joint_position, double[] max_velocity, bool wait,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackArray<double>("joint_position",joint_position));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackArray<double>("max_velocity",max_velocity));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackScalar<bool>("wait",wait));
    using(var rr_return = await rr_async_FunctionCall("jog_freespace",rr_param,rr_timeout)) {
    } } }
    public virtual async Task async_jog_joint(double[] joint_velocity, double timeout, bool wait,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackArray<double>("joint_velocity",joint_velocity));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackScalar<double>("timeout",timeout));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackScalar<bool>("wait",wait));
    using(var rr_return = await rr_async_FunctionCall("jog_joint",rr_param,rr_timeout)) {
    } } }
    public virtual async Task async_jog_cartesian(Dictionary<int,com.robotraconteur.geometry.SpatialVelocity> max_velocity, double timeout, bool wait,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackMapType<int,com.robotraconteur.geometry.SpatialVelocity>("max_velocity",max_velocity));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackScalar<double>("timeout",timeout));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackScalar<bool>("wait",wait));
    using(var rr_return = await rr_async_FunctionCall("jog_cartesian",rr_param,rr_timeout)) {
    } } }
    public virtual async Task<Generator2<com.robotraconteur.robotics.trajectory.TrajectoryStatus>> async_execute_trajectory(com.robotraconteur.robotics.trajectory.JointTrajectory trajectory,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackStructure("trajectory",trajectory));
    var rr_return = await rr_async_GeneratorFunctionCall("execute_trajectory",rr_param,rr_timeout);
    Generator2Client< com.robotraconteur.robotics.trajectory.TrajectoryStatus> rr_ret=new Generator2Client< com.robotraconteur.robotics.trajectory.TrajectoryStatus>(rr_return);
    return rr_ret;
    } }
    public virtual async Task<Generator2<com.robotraconteur.action.ActionStatusCode>> async_home(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    var rr_return = await rr_async_GeneratorFunctionCall("home",rr_param,rr_timeout);
    Generator2Client< com.robotraconteur.action.ActionStatusCode> rr_ret=new Generator2Client< com.robotraconteur.action.ActionStatusCode>(rr_return);
    return rr_ret;
    } }
    public virtual async Task<double[]> async_getf_signal(string signal_name,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("signal_name",signal_name));
    using(var rr_return = await rr_async_FunctionCall("getf_signal",rr_param,rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackArray<double>(rr_return);
    return rr_ret;
    } } }
    public virtual async Task async_setf_signal(string signal_name, double[] value_,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("signal_name",signal_name));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackArray<double>("value",value_));
    using(var rr_return = await rr_async_FunctionCall("setf_signal",rr_param,rr_timeout)) {
    } } }
    public virtual async Task async_tool_attached(int chain, com.robotraconteur.robotics.tool.ToolInfo tool,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackScalar<int>("chain",chain));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackStructure("tool",tool));
    using(var rr_return = await rr_async_FunctionCall("tool_attached",rr_param,rr_timeout)) {
    } } }
    public virtual async Task async_tool_detached(int chain, string tool_name,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackScalar<int>("chain",chain));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("tool_name",tool_name));
    using(var rr_return = await rr_async_FunctionCall("tool_detached",rr_param,rr_timeout)) {
    } } }
    public virtual async Task async_payload_attached(int chain, com.robotraconteur.robotics.payload.PayloadInfo payload, com.robotraconteur.geometry.Pose pose,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackScalar<int>("chain",chain));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackStructure("payload",payload));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Pose>("pose",ref pose));
    using(var rr_return = await rr_async_FunctionCall("payload_attached",rr_param,rr_timeout)) {
    } } }
    public virtual async Task async_payload_detached(int chain, string payload_name,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackScalar<int>("chain",chain));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("payload_name",payload_name));
    using(var rr_return = await rr_async_FunctionCall("payload_detached",rr_param,rr_timeout)) {
    } } }
    public virtual async Task<object> async_getf_param(string param_name,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("param_name",param_name));
    using(var rr_return = await rr_async_FunctionCall("getf_param",rr_param,rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackVarType(rr_return);
    return rr_ret;
    } } }
    public virtual async Task async_setf_param(string param_name, object value_,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("param_name",param_name));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackVarType("value",value_));
    using(var rr_return = await rr_async_FunctionCall("setf_param",rr_param,rr_timeout)) {
    } } }
}
public class Robot_skel : ServiceSkel {
    protected Robot obj;
    protected async_Robot async_obj;
    public Robot_skel(object o) : base(o)    {
    obj=(Robot)o;
    async_obj = o as async_Robot;
    }
    public override void ReleaseCastObject() { 
    obj=null;
    async_obj=null;
    base.ReleaseCastObject();
    }
    public override MessageElement CallGetProperty(string membername, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    case "device_info":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_device_info().ContinueWith(t => async_adapter.EndTask<com.robotraconteur.device.DeviceInfo>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    com.robotraconteur.device.DeviceInfo ret=obj.device_info;
    return MessageElementUtil.PackStructure("return",ret);
    }
    case "robot_info":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_robot_info().ContinueWith(t => async_adapter.EndTask<RobotInfo>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    RobotInfo ret=obj.robot_info;
    return MessageElementUtil.PackStructure("return",ret);
    }
    case "command_mode":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_command_mode().ContinueWith(t => async_adapter.EndTask<RobotCommandMode>(t,async_ret => MessageElementUtil.PackEnum<RobotCommandMode>("return",async_ret)));
    return null;
    }
    RobotCommandMode ret=obj.command_mode;
    return MessageElementUtil.PackEnum<RobotCommandMode>("return",ret);
    }
    case "operational_mode":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_operational_mode().ContinueWith(t => async_adapter.EndTask<RobotOperationalMode>(t,async_ret => MessageElementUtil.PackEnum<RobotOperationalMode>("return",async_ret)));
    return null;
    }
    RobotOperationalMode ret=obj.operational_mode;
    return MessageElementUtil.PackEnum<RobotOperationalMode>("return",ret);
    }
    case "controller_state":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_controller_state().ContinueWith(t => async_adapter.EndTask<RobotControllerState>(t,async_ret => MessageElementUtil.PackEnum<RobotControllerState>("return",async_ret)));
    return null;
    }
    RobotControllerState ret=obj.controller_state;
    return MessageElementUtil.PackEnum<RobotControllerState>("return",ret);
    }
    case "current_errors":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_current_errors().ContinueWith(t => async_adapter.EndTask<List<com.robotraconteur.eventlog.EventLogMessage>>(t,async_ret => MessageElementUtil.PackListType<com.robotraconteur.eventlog.EventLogMessage>("return",async_ret)));
    return null;
    }
    List<com.robotraconteur.eventlog.EventLogMessage> ret=obj.current_errors;
    return MessageElementUtil.PackListType<com.robotraconteur.eventlog.EventLogMessage>("return",ret);
    }
    case "speed_ratio":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_speed_ratio().ContinueWith(t => async_adapter.EndTask<double>(t,async_ret => MessageElementUtil.PackScalar<double>("return",async_ret)));
    return null;
    }
    double ret=obj.speed_ratio;
    return MessageElementUtil.PackScalar<double>("return",ret);
    }
    case "isoch_info":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_isoch_info().ContinueWith(t => async_adapter.EndTask<com.robotraconteur.device.isoch.IsochInfo>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    com.robotraconteur.device.isoch.IsochInfo ret=obj.isoch_info;
    return MessageElementUtil.PackStructure("return",ret);
    }
    case "isoch_downsample":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_isoch_downsample().ContinueWith(t => async_adapter.EndTask<uint>(t,async_ret => MessageElementUtil.PackScalar<uint>("return",async_ret)));
    return null;
    }
    uint ret=obj.isoch_downsample;
    return MessageElementUtil.PackScalar<uint>("return",ret);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void CallSetProperty(string membername, MessageElement m, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    case "command_mode":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_command_mode(MessageElementUtil.UnpackEnum<RobotCommandMode>(m)).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.command_mode=MessageElementUtil.UnpackEnum<RobotCommandMode>(m);
    return;
    }
    case "speed_ratio":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_speed_ratio((MessageElementUtil.UnpackScalar<double>(m))).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.speed_ratio=(MessageElementUtil.UnpackScalar<double>(m));
    return;
    }
    case "isoch_downsample":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_isoch_downsample((MessageElementUtil.UnpackScalar<uint>(m))).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.isoch_downsample=(MessageElementUtil.UnpackScalar<uint>(m));
    return;
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override MessageElement CallFunction(string rr_membername, vectorptr_messageelement rr_m, WrappedServiceSkelAsyncAdapter rr_async_adapter) {
    switch (rr_membername) {
    case "halt":
    {
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_halt().ContinueWith(t => rr_async_adapter.EndTask(t,new MessageElement("return",(int)0)));
    return null;
    }
    this.obj.halt();
    return new MessageElement("return",(int)0);
    }
    case "enable":
    {
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_enable().ContinueWith(t => rr_async_adapter.EndTask(t,new MessageElement("return",(int)0)));
    return null;
    }
    this.obj.enable();
    return new MessageElement("return",(int)0);
    }
    case "disable":
    {
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_disable().ContinueWith(t => rr_async_adapter.EndTask(t,new MessageElement("return",(int)0)));
    return null;
    }
    this.obj.disable();
    return new MessageElement("return",(int)0);
    }
    case "reset_errors":
    {
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_reset_errors().ContinueWith(t => rr_async_adapter.EndTask(t,new MessageElement("return",(int)0)));
    return null;
    }
    this.obj.reset_errors();
    return new MessageElement("return",(int)0);
    }
    case "jog_freespace":
    {
    double[] joint_position=MessageElementUtil.UnpackArray<double>(vectorptr_messageelement_util.FindElement(rr_m,"joint_position"));
    double[] max_velocity=MessageElementUtil.UnpackArray<double>(vectorptr_messageelement_util.FindElement(rr_m,"max_velocity"));
    bool wait=(MessageElementUtil.UnpackScalar<bool>(vectorptr_messageelement_util.FindElement(rr_m,"wait")));
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_jog_freespace(joint_position, max_velocity, wait).ContinueWith(t => rr_async_adapter.EndTask(t,new MessageElement("return",(int)0)));
    return null;
    }
    this.obj.jog_freespace(joint_position, max_velocity, wait);
    return new MessageElement("return",(int)0);
    }
    case "jog_joint":
    {
    double[] joint_velocity=MessageElementUtil.UnpackArray<double>(vectorptr_messageelement_util.FindElement(rr_m,"joint_velocity"));
    double timeout=(MessageElementUtil.UnpackScalar<double>(vectorptr_messageelement_util.FindElement(rr_m,"timeout")));
    bool wait=(MessageElementUtil.UnpackScalar<bool>(vectorptr_messageelement_util.FindElement(rr_m,"wait")));
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_jog_joint(joint_velocity, timeout, wait).ContinueWith(t => rr_async_adapter.EndTask(t,new MessageElement("return",(int)0)));
    return null;
    }
    this.obj.jog_joint(joint_velocity, timeout, wait);
    return new MessageElement("return",(int)0);
    }
    case "jog_cartesian":
    {
    Dictionary<int,com.robotraconteur.geometry.SpatialVelocity> max_velocity=MessageElementUtil.UnpackMap<int,com.robotraconteur.geometry.SpatialVelocity>(vectorptr_messageelement_util.FindElement(rr_m,"max_velocity"));
    double timeout=(MessageElementUtil.UnpackScalar<double>(vectorptr_messageelement_util.FindElement(rr_m,"timeout")));
    bool wait=(MessageElementUtil.UnpackScalar<bool>(vectorptr_messageelement_util.FindElement(rr_m,"wait")));
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_jog_cartesian(max_velocity, timeout, wait).ContinueWith(t => rr_async_adapter.EndTask(t,new MessageElement("return",(int)0)));
    return null;
    }
    this.obj.jog_cartesian(max_velocity, timeout, wait);
    return new MessageElement("return",(int)0);
    }
    case "execute_trajectory":
    {
    com.robotraconteur.robotics.trajectory.JointTrajectory trajectory=MessageElementUtil.UnpackStructure<com.robotraconteur.robotics.trajectory.JointTrajectory>(vectorptr_messageelement_util.FindElement(rr_m,"trajectory"));
    Generator2<com.robotraconteur.robotics.trajectory.TrajectoryStatus> rr_ret=this.obj.execute_trajectory(trajectory);
    int generator_index = innerskel.RegisterGeneratorServer("execute_trajectory", new WrappedGenerator2ServerDirectorNET<com.robotraconteur.robotics.trajectory.TrajectoryStatus>(rr_ret));
    return new MessageElement("index",generator_index);
    }
    case "home":
    {
    Generator2<com.robotraconteur.action.ActionStatusCode> rr_ret=this.obj.home();
    int generator_index = innerskel.RegisterGeneratorServer("home", new WrappedGenerator2ServerDirectorNET<com.robotraconteur.action.ActionStatusCode>(rr_ret));
    return new MessageElement("index",generator_index);
    }
    case "getf_signal":
    {
    string signal_name=MessageElementUtil.UnpackString(vectorptr_messageelement_util.FindElement(rr_m,"signal_name"));
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_getf_signal(signal_name).ContinueWith(t => rr_async_adapter.EndTask<double[]>(t,async_ret => MessageElementUtil.PackArray<double>("return",async_ret)));
    return null;
    }
    double[] rr_ret=this.obj.getf_signal(signal_name);
    return MessageElementUtil.PackArray<double>("return",rr_ret);
    }
    case "setf_signal":
    {
    string signal_name=MessageElementUtil.UnpackString(vectorptr_messageelement_util.FindElement(rr_m,"signal_name"));
    double[] value_=MessageElementUtil.UnpackArray<double>(vectorptr_messageelement_util.FindElement(rr_m,"value"));
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_setf_signal(signal_name, value_).ContinueWith(t => rr_async_adapter.EndTask(t,new MessageElement("return",(int)0)));
    return null;
    }
    this.obj.setf_signal(signal_name, value_);
    return new MessageElement("return",(int)0);
    }
    case "tool_attached":
    {
    int chain=(MessageElementUtil.UnpackScalar<int>(vectorptr_messageelement_util.FindElement(rr_m,"chain")));
    com.robotraconteur.robotics.tool.ToolInfo tool=MessageElementUtil.UnpackStructure<com.robotraconteur.robotics.tool.ToolInfo>(vectorptr_messageelement_util.FindElement(rr_m,"tool"));
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_tool_attached(chain, tool).ContinueWith(t => rr_async_adapter.EndTask(t,new MessageElement("return",(int)0)));
    return null;
    }
    this.obj.tool_attached(chain, tool);
    return new MessageElement("return",(int)0);
    }
    case "tool_detached":
    {
    int chain=(MessageElementUtil.UnpackScalar<int>(vectorptr_messageelement_util.FindElement(rr_m,"chain")));
    string tool_name=MessageElementUtil.UnpackString(vectorptr_messageelement_util.FindElement(rr_m,"tool_name"));
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_tool_detached(chain, tool_name).ContinueWith(t => rr_async_adapter.EndTask(t,new MessageElement("return",(int)0)));
    return null;
    }
    this.obj.tool_detached(chain, tool_name);
    return new MessageElement("return",(int)0);
    }
    case "payload_attached":
    {
    int chain=(MessageElementUtil.UnpackScalar<int>(vectorptr_messageelement_util.FindElement(rr_m,"chain")));
    com.robotraconteur.robotics.payload.PayloadInfo payload=MessageElementUtil.UnpackStructure<com.robotraconteur.robotics.payload.PayloadInfo>(vectorptr_messageelement_util.FindElement(rr_m,"payload"));
    com.robotraconteur.geometry.Pose pose=MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.Pose>(vectorptr_messageelement_util.FindElement(rr_m,"pose"));
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_payload_attached(chain, payload, pose).ContinueWith(t => rr_async_adapter.EndTask(t,new MessageElement("return",(int)0)));
    return null;
    }
    this.obj.payload_attached(chain, payload, pose);
    return new MessageElement("return",(int)0);
    }
    case "payload_detached":
    {
    int chain=(MessageElementUtil.UnpackScalar<int>(vectorptr_messageelement_util.FindElement(rr_m,"chain")));
    string payload_name=MessageElementUtil.UnpackString(vectorptr_messageelement_util.FindElement(rr_m,"payload_name"));
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_payload_detached(chain, payload_name).ContinueWith(t => rr_async_adapter.EndTask(t,new MessageElement("return",(int)0)));
    return null;
    }
    this.obj.payload_detached(chain, payload_name);
    return new MessageElement("return",(int)0);
    }
    case "getf_param":
    {
    string param_name=MessageElementUtil.UnpackString(vectorptr_messageelement_util.FindElement(rr_m,"param_name"));
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_getf_param(param_name).ContinueWith(t => rr_async_adapter.EndTask<object>(t,async_ret => MessageElementUtil.PackVarType("return",async_ret)));
    return null;
    }
    object rr_ret=this.obj.getf_param(param_name);
    return MessageElementUtil.PackVarType("return",rr_ret);
    }
    case "setf_param":
    {
    string param_name=MessageElementUtil.UnpackString(vectorptr_messageelement_util.FindElement(rr_m,"param_name"));
    object value_=MessageElementUtil.UnpackVarType(vectorptr_messageelement_util.FindElement(rr_m,"value"));
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_setf_param(param_name, value_).ContinueWith(t => rr_async_adapter.EndTask(t,new MessageElement("return",(int)0)));
    return null;
    }
    this.obj.setf_param(param_name, value_);
    return new MessageElement("return",(int)0);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override object GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(Robot)rrobj1;
    obj.tool_changed+=rr_tool_changed;
    obj.payload_changed+=rr_payload_changed;
    obj.param_changed+=rr_param_changed;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(Robot)rrobj1;
    obj.tool_changed-=rr_tool_changed;
    obj.payload_changed-=rr_payload_changed;
    obj.param_changed-=rr_param_changed;
    }
    public void rr_tool_changed(int chain, string tool_name) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement()) {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackScalar<int>("chain",chain));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("tool_name",tool_name));
    this.innerskel.WrappedDispatchEvent("tool_changed",rr_param);
    }
    }
    public void rr_payload_changed(int chain, string payload_name) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement()) {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackScalar<int>("chain",chain));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("payload_name",payload_name));
    this.innerskel.WrappedDispatchEvent("payload_changed",rr_param);
    }
    }
    public void rr_param_changed(string param_name) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement()) {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("param_name",param_name));
    this.innerskel.WrappedDispatchEvent("param_changed",rr_param);
    }
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void InitPipeServers(object rrobj1) {
    obj=(Robot)rrobj1;
    obj.robot_state_sensor_data=new Pipe<RobotStateSensorData>(innerskel.GetPipe("robot_state_sensor_data"));
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(Robot)rrobj1;
    }
    public override void InitWireServers(object rrobj1) {
    obj=(Robot)rrobj1;
    obj.robot_state=new Wire<RobotState>(innerskel.GetWire("robot_state"));
    obj.advanced_robot_state=new Wire<AdvancedRobotState>(innerskel.GetWire("advanced_robot_state"));
    obj.device_clock_now=new Wire<com.robotraconteur.device.clock.DeviceTime>(innerskel.GetWire("device_clock_now"));
    obj.position_command=new Wire<RobotJointCommand>(innerskel.GetWire("position_command"));
    obj.velocity_command=new Wire<RobotJointCommand>(innerskel.GetWire("velocity_command"));
    }
    public override WrappedArrayMemoryDirector GetArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedMultiDimArrayMemoryDirector GetMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodArrayMemoryDirector GetPodArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodMultiDimArrayMemoryDirector GetPodMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedArrayMemoryDirector GetNamedArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedMultiDimArrayMemoryDirector GetNamedMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override string RRType { get { return "com.robotraconteur.robotics.robot.Robot"; } }
}
public class Robot_default_impl : Robot{
    protected PipeBroadcaster<RobotStateSensorData> rrvar_robot_state_sensor_data;
    protected WireBroadcaster<RobotState> rrvar_robot_state;
    protected WireBroadcaster<AdvancedRobotState> rrvar_advanced_robot_state;
    protected WireBroadcaster<com.robotraconteur.device.clock.DeviceTime> rrvar_device_clock_now;
    protected WireUnicastReceiver<RobotJointCommand> rrvar_position_command;
    protected WireUnicastReceiver<RobotJointCommand> rrvar_velocity_command;
    public virtual com.robotraconteur.device.DeviceInfo device_info {get; set;} = default(com.robotraconteur.device.DeviceInfo);
    public virtual RobotInfo robot_info {get; set;} = default(RobotInfo);
    public virtual RobotCommandMode command_mode {get; set;} = default(RobotCommandMode);
    public virtual RobotOperationalMode operational_mode {get; set;} = default(RobotOperationalMode);
    public virtual RobotControllerState controller_state {get; set;} = default(RobotControllerState);
    public virtual List<com.robotraconteur.eventlog.EventLogMessage> current_errors {get; set;} = default(List<com.robotraconteur.eventlog.EventLogMessage>);
    public virtual double speed_ratio {get; set;} = default(double);
    public virtual com.robotraconteur.device.isoch.IsochInfo isoch_info {get; set;} = default(com.robotraconteur.device.isoch.IsochInfo);
    public virtual uint isoch_downsample {get; set;} = default(uint);
    public virtual void halt() {
    throw new NotImplementedException();    }
    public virtual void enable() {
    throw new NotImplementedException();    }
    public virtual void disable() {
    throw new NotImplementedException();    }
    public virtual void reset_errors() {
    throw new NotImplementedException();    }
    public virtual void jog_freespace(double[] joint_position, double[] max_velocity, bool wait) {
    throw new NotImplementedException();    }
    public virtual void jog_joint(double[] joint_velocity, double timeout, bool wait) {
    throw new NotImplementedException();    }
    public virtual void jog_cartesian(Dictionary<int,com.robotraconteur.geometry.SpatialVelocity> max_velocity, double timeout, bool wait) {
    throw new NotImplementedException();    }
    public virtual Generator2<com.robotraconteur.robotics.trajectory.TrajectoryStatus> execute_trajectory(com.robotraconteur.robotics.trajectory.JointTrajectory trajectory) {
    throw new NotImplementedException();    }
    public virtual Generator2<com.robotraconteur.action.ActionStatusCode> home() {
    throw new NotImplementedException();    }
    public virtual double[] getf_signal(string signal_name) {
    throw new NotImplementedException();    }
    public virtual void setf_signal(string signal_name, double[] value_) {
    throw new NotImplementedException();    }
    public virtual void tool_attached(int chain, com.robotraconteur.robotics.tool.ToolInfo tool) {
    throw new NotImplementedException();    }
    public virtual void tool_detached(int chain, string tool_name) {
    throw new NotImplementedException();    }
    public virtual void payload_attached(int chain, com.robotraconteur.robotics.payload.PayloadInfo payload, com.robotraconteur.geometry.Pose pose) {
    throw new NotImplementedException();    }
    public virtual void payload_detached(int chain, string payload_name) {
    throw new NotImplementedException();    }
    public virtual object getf_param(string param_name) {
    throw new NotImplementedException();    }
    public virtual void setf_param(string param_name, object value_) {
    throw new NotImplementedException();    }
    public virtual event Action<int, string> tool_changed;
    protected virtual void rrfire_tool_changed(int chain, string tool_name) {
    tool_changed?.Invoke(chain, tool_name);
    }
    public virtual event Action<int, string> payload_changed;
    protected virtual void rrfire_payload_changed(int chain, string payload_name) {
    payload_changed?.Invoke(chain, payload_name);
    }
    public virtual event Action<string> param_changed;
    protected virtual void rrfire_param_changed(string param_name) {
    param_changed?.Invoke(param_name);
    }
    public virtual Pipe<RobotStateSensorData> robot_state_sensor_data {
    get { return rrvar_robot_state_sensor_data.Pipe;  }
    set {
    if (rrvar_robot_state_sensor_data!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_robot_state_sensor_data= new PipeBroadcaster<RobotStateSensorData>(value);
    }
    }
    public virtual Wire<RobotState> robot_state {
    get { return rrvar_robot_state.Wire;  }
    set {
    if (rrvar_robot_state!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_robot_state= new WireBroadcaster<RobotState>(value);
    }
    }
    public virtual Wire<AdvancedRobotState> advanced_robot_state {
    get { return rrvar_advanced_robot_state.Wire;  }
    set {
    if (rrvar_advanced_robot_state!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_advanced_robot_state= new WireBroadcaster<AdvancedRobotState>(value);
    }
    }
    public virtual Wire<com.robotraconteur.device.clock.DeviceTime> device_clock_now {
    get { return rrvar_device_clock_now.Wire;  }
    set {
    if (rrvar_device_clock_now!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_device_clock_now= new WireBroadcaster<com.robotraconteur.device.clock.DeviceTime>(value);
    }
    }
    public virtual Wire<RobotJointCommand> position_command {
    get { return rrvar_position_command.Wire;  }
    set {
    if (rrvar_position_command!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_position_command= new WireUnicastReceiver<RobotJointCommand>(value);
    }
    }
    public virtual Wire<RobotJointCommand> velocity_command {
    get { return rrvar_velocity_command.Wire;  }
    set {
    if (rrvar_velocity_command!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_velocity_command= new WireUnicastReceiver<RobotJointCommand>(value);
    }
    }
}
public static class RRExtensions{
}
}
namespace com.robotraconteur.robotics.tool
{
public class ToolInfo
{
    public com.robotraconteur.device.DeviceInfo device_info;
    public ToolTypeCode tool_type;
    public uint tool_capabilities;
    public com.robotraconteur.geometry.Transform tcp;
    public com.robotraconteur.geometry.SpatialInertia inertia;
    public List<com.robotraconteur.fiducial.Fiducial> fiducials;
    public double actuation_time;
    public double close_position;
    public double open_position;
    public double command_min;
    public double command_max;
    public double command_close;
    public double command_open;
    public List<com.robotraconteur.sensor.SensorTypeCode> sensor_type;
    public double[] sensor_min;
    public double[] sensor_max;
    public List<com.robotraconteur.units.SIUnit> sensor_units;
    public Dictionary<string,object> extended;
}

public class ToolState
{
    public com.robotraconteur.datetime.TimeSpec3 ts;
    public ulong seqno;
    public uint tool_state_flags;
    public double position;
    public double command;
    public double[] sensor;
}

public class ToolStateSensorData
{
    public com.robotraconteur.sensordata.SensorDataHeader data_header;
    public ToolState robot_state;
}

[RobotRaconteurServiceObjectInterface()]
public interface Tool : com.robotraconteur.device.Device, com.robotraconteur.device.clock.DeviceClock, com.robotraconteur.device.isoch.IsochDevice
{
    com.robotraconteur.device.DeviceInfo device_info { get; 	}
    ToolInfo tool_info { get; 	}
    com.robotraconteur.device.isoch.IsochInfo isoch_info { get; 	}
    uint isoch_downsample { get;  set; 	}
    void open();
    void close();
    void halt();
    void setf_command(double command);
    object getf_param(string param_name);
    void setf_param(string param_name, object value_);
    void enable();
    void disable();
    void reset_errors();
    void home();
    Pipe<ToolStateSensorData> tool_state_sensor_data{ get; set; }
    Wire<ToolState> tool_state{ get; set; }
    Wire<com.robotraconteur.device.clock.DeviceTime> device_clock_now{ get; set; }
}

public static class com__robotraconteur__robotics__toolConstants 
{
}
    public enum ToolTypeCode
    {
    unknown = 0,
    basic_gripper = 1,
    basic_continuous_gripper = 2,
    pneumatic_gripper = 3,
    electric_gripper = 4,
    vacuum_gripper = 5,
    soft_gripper = 6,
    welder = 7,
    hand = 8,
    palletizer = 9,
    other = 10
    };
    public enum ToolCapabilities
    {
    unknown = 0,
    open_close_command = 0x1,
    continuous_command = 0x2,
    homing_command = 0x4,
    software_reset_errors = 0x8,
    software_enable = 0x10,
    sensor_feedback = 0x20
    };
    public enum ToolStateFlags
    {
    unknown = 0,
    error = 0x1,
    fatal_error = 0x2,
    estop = 0x4,
    communication_failure = 0x8,
    enabled = 0x10,
    ready = 0x20,
    opened = 0x40,
    closed = 0x80,
    between = 0x100,
    actuating = 0x200,
    homing = 0x400,
    requires_homing = 0x800,
    homed = 0x1000,
    gripping = 0x2000,
    missed = 0x4000
    };
}
namespace com.robotraconteur.robotics.tool
{
public class com__robotraconteur__robotics__toolFactory : ServiceFactory
{
    public override string DefString()
{
    const string s="service com.robotraconteur.robotics.tool\n\nstdver 0.10\n\nimport com.robotraconteur.device\nimport com.robotraconteur.geometry\nimport com.robotraconteur.sensor\nimport com.robotraconteur.robotics.joints\nimport com.robotraconteur.units\nimport com.robotraconteur.sensordata\nimport com.robotraconteur.device.isoch\nimport com.robotraconteur.device.clock\nimport com.robotraconteur.datetime\nimport com.robotraconteur.fiducial\n\nusing com.robotraconteur.device.DeviceInfo\nusing com.robotraconteur.device.Device\nusing com.robotraconteur.geometry.Transform\nusing com.robotraconteur.geometry.SpatialInertia\nusing com.robotraconteur.sensor.SensorTypeCode\nusing com.robotraconteur.robotics.joints.JointPositionUnits\nusing com.robotraconteur.units.SIUnit\nusing com.robotraconteur.sensordata.SensorDataHeader\nusing com.robotraconteur.device.isoch.IsochDevice\nusing com.robotraconteur.device.isoch.IsochInfo\nusing com.robotraconteur.device.clock.DeviceClock\nusing com.robotraconteur.device.clock.DeviceTime\nusing com.robotraconteur.datetime.TimeSpec3\nusing com.robotraconteur.fiducial.Fiducial\n\nenum ToolTypeCode\nunknown = 0,\nbasic_gripper,\nbasic_continuous_gripper,\npneumatic_gripper,\nelectric_gripper,\nvacuum_gripper,\nsoft_gripper,\nwelder,\nhand,\npalletizer,\nother\nend\n\nenum ToolCapabilities\nunknown = 0,\nopen_close_command = 0x1,\ncontinuous_command = 0x2,\nhoming_command = 0x4,\nsoftware_reset_errors = 0x8,\nsoftware_enable = 0x10,\nsensor_feedback = 0x20\nend\n\nenum ToolStateFlags\nunknown = 0,\nerror = 0x1,\nfatal_error = 0x2,\nestop = 0x4,\ncommunication_failure = 0x8,\nenabled = 0x10,\nready = 0x20,\nopened = 0x40,\nclosed = 0x80,\nbetween = 0x100,\nactuating = 0x200,\nhoming = 0x400,\nrequires_homing = 0x800,\nhomed = 0x1000,\ngripping = 0x2000,\nmissed = 0x4000\nend\n\nstruct ToolInfo\nfield DeviceInfo device_info\nfield ToolTypeCode tool_type\nfield uint32 tool_capabilities\nfield Transform tcp\nfield SpatialInertia inertia\nfield Fiducial{list} fiducials\nfield double actuation_time\nfield double close_position\nfield double open_position\nfield double command_min\nfield double command_max\nfield double command_close\nfield double command_open\nfield SensorTypeCode{list} sensor_type\nfield double[] sensor_min\nfield double[] sensor_max\nfield SIUnit{list} sensor_units\nfield varvalue{string} extended\nend\n\nstruct ToolState\nfield TimeSpec3 ts\nfield uint64 seqno\nfield uint32 tool_state_flags\nfield double position\nfield double command\nfield double[] sensor\nend\n\nstruct ToolStateSensorData\nfield SensorDataHeader data_header\nfield ToolState robot_state\nend\n\nobject Tool\nimplements Device\nimplements DeviceClock\nimplements IsochDevice\nproperty DeviceInfo device_info [readonly,nolock]\nproperty ToolInfo tool_info [readonly,nolock]\nfunction void open()\nfunction void close()\nfunction void halt() [urgent]\nfunction void setf_command(double command)\nwire ToolState tool_state [readonly,nolock]\npipe ToolStateSensorData tool_state_sensor_data [readonly,nolock]\nproperty IsochInfo isoch_info [readonly,nolock]\nproperty uint32 isoch_downsample [perclient]\nwire DeviceTime device_clock_now [readonly,nolock]\nfunction varvalue getf_param(string param_name)\nfunction void setf_param(string param_name, varvalue value)\nfunction void enable()\nfunction void disable() [urgent]\nfunction void reset_errors()\nfunction void home()\nend\n\n";
    return s;
    }
    public override string GetServiceName() {return "com.robotraconteur.robotics.tool";}
    public ToolInfo_stub ToolInfo_stubentry;
    public ToolState_stub ToolState_stubentry;
    public ToolStateSensorData_stub ToolStateSensorData_stubentry;
    public com__robotraconteur__robotics__toolFactory()
{
    ToolInfo_stubentry=new ToolInfo_stub(this);
    ToolState_stubentry=new ToolState_stub(this);
    ToolStateSensorData_stubentry=new ToolStateSensorData_stub(this);
    }
    public override IStructureStub FindStructureStub(string objecttype)
    {
    if (objecttype=="ToolInfo")    return ToolInfo_stubentry;
    if (objecttype=="ToolState")    return ToolState_stubentry;
    if (objecttype=="ToolStateSensorData")    return ToolStateSensorData_stubentry;
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public override IPodStub FindPodStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override INamedArrayStub FindNamedArrayStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override ServiceStub CreateStub(WrappedServiceStub innerstub) {
    string objecttype=innerstub.RR_objecttype.GetServiceDefinition().Name + "." + innerstub.RR_objecttype.Name;    string objshort;
    if (CompareNamespace(objecttype, out objshort)) {
    switch (objshort) {
    case "Tool":
    return new Tool_stub(innerstub);
    default:
    break;
    }
    } else {
    string ext_service_type=RobotRaconteurNode.SplitQualifiedName(objecttype).Item1;
    return RobotRaconteurNode.s.GetServiceType(ext_service_type).CreateStub(innerstub);
    }
    throw new ServiceException("Could not create stub");
    }
    public override ServiceSkel CreateSkel(object obj) {
    string objtype = RobotRaconteurNode.GetTypeString(ServiceSkelUtil.FindParentInterface(obj.GetType()));
    string objshort;
    if (CompareNamespace(objtype, out objshort)) {
    switch(objshort) {
    case "Tool":
    return new Tool_skel((Tool)obj);
    default:
    break;
    }
    } else {
    string ext_service_type=RobotRaconteurNode.SplitQualifiedName(objtype).Item1;
    return RobotRaconteurNode.s.GetServiceFactory(ext_service_type).CreateSkel(obj);
    }
    throw new ServiceException("Could not create skel");
    }
    public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp){
    if (rr_exp==null) return rr_exp;
    string rr_type=rr_exp.Error;
    if (!rr_type.Contains(".")) return rr_exp;
    string rr_stype;
    if (CompareNamespace(rr_type, out rr_stype)) {
    } else {
    return RobotRaconteurNode.s.DownCastException(rr_exp); 
    }
    return rr_exp;
    }
}

public class ToolInfo_stub : IStructureStub {
    public ToolInfo_stub(com__robotraconteur__robotics__toolFactory d) {def=d;}
    private com__robotraconteur__robotics__toolFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    ToolInfo s = (ToolInfo)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("device_info",s.device_info));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackEnum<ToolTypeCode>("tool_type",s.tool_type));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<uint>("tool_capabilities",s.tool_capabilities));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Transform>("tcp",ref s.tcp));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.SpatialInertia>("inertia",ref s.inertia));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackListType<com.robotraconteur.fiducial.Fiducial>("fiducials",s.fiducials));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<double>("actuation_time",s.actuation_time));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<double>("close_position",s.close_position));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<double>("open_position",s.open_position));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<double>("command_min",s.command_min));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<double>("command_max",s.command_max));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<double>("command_close",s.command_close));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<double>("command_open",s.command_open));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackListType<com.robotraconteur.sensor.SensorTypeCode>("sensor_type",s.sensor_type));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackArray<double>("sensor_min",s.sensor_min));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackArray<double>("sensor_max",s.sensor_max));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackListType<com.robotraconteur.units.SIUnit>("sensor_units",s.sensor_units));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackMapType<string,object>("extended",s.extended));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.robotics.tool.ToolInfo",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    ToolInfo s=new ToolInfo();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.device_info =MessageElementUtil.UnpackStructure<com.robotraconteur.device.DeviceInfo>(MessageElement.FindElement(mm,"device_info"));
    s.tool_type =MessageElementUtil.UnpackEnum<ToolTypeCode>(MessageElement.FindElement(mm,"tool_type"));
    s.tool_capabilities =(MessageElementUtil.UnpackScalar<uint>(MessageElement.FindElement(mm,"tool_capabilities")));
    s.tcp =MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.Transform>(MessageElement.FindElement(mm,"tcp"));
    s.inertia =MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.SpatialInertia>(MessageElement.FindElement(mm,"inertia"));
    s.fiducials =MessageElementUtil.UnpackList<com.robotraconteur.fiducial.Fiducial>(MessageElement.FindElement(mm,"fiducials"));
    s.actuation_time =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(mm,"actuation_time")));
    s.close_position =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(mm,"close_position")));
    s.open_position =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(mm,"open_position")));
    s.command_min =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(mm,"command_min")));
    s.command_max =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(mm,"command_max")));
    s.command_close =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(mm,"command_close")));
    s.command_open =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(mm,"command_open")));
    s.sensor_type =MessageElementUtil.UnpackList<com.robotraconteur.sensor.SensorTypeCode>(MessageElement.FindElement(mm,"sensor_type"));
    s.sensor_min =MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(mm,"sensor_min"));
    s.sensor_max =MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(mm,"sensor_max"));
    s.sensor_units =MessageElementUtil.UnpackList<com.robotraconteur.units.SIUnit>(MessageElement.FindElement(mm,"sensor_units"));
    s.extended =MessageElementUtil.UnpackMap<string,object>(MessageElement.FindElement(mm,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class ToolState_stub : IStructureStub {
    public ToolState_stub(com__robotraconteur__robotics__toolFactory d) {def=d;}
    private com__robotraconteur__robotics__toolFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    ToolState s = (ToolState)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.datetime.TimeSpec3>("ts",ref s.ts));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<ulong>("seqno",s.seqno));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<uint>("tool_state_flags",s.tool_state_flags));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<double>("position",s.position));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<double>("command",s.command));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackArray<double>("sensor",s.sensor));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.robotics.tool.ToolState",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    ToolState s=new ToolState();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.ts =MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.datetime.TimeSpec3>(MessageElement.FindElement(mm,"ts"));
    s.seqno =(MessageElementUtil.UnpackScalar<ulong>(MessageElement.FindElement(mm,"seqno")));
    s.tool_state_flags =(MessageElementUtil.UnpackScalar<uint>(MessageElement.FindElement(mm,"tool_state_flags")));
    s.position =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(mm,"position")));
    s.command =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(mm,"command")));
    s.sensor =MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(mm,"sensor"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class ToolStateSensorData_stub : IStructureStub {
    public ToolStateSensorData_stub(com__robotraconteur__robotics__toolFactory d) {def=d;}
    private com__robotraconteur__robotics__toolFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    ToolStateSensorData s = (ToolStateSensorData)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("data_header",s.data_header));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("robot_state",s.robot_state));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.robotics.tool.ToolStateSensorData",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    ToolStateSensorData s=new ToolStateSensorData();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.data_header =MessageElementUtil.UnpackStructure<com.robotraconteur.sensordata.SensorDataHeader>(MessageElement.FindElement(mm,"data_header"));
    s.robot_state =MessageElementUtil.UnpackStructure<ToolState>(MessageElement.FindElement(mm,"robot_state"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public interface async_Tool : com.robotraconteur.device.async_Device, com.robotraconteur.device.clock.async_DeviceClock, com.robotraconteur.device.isoch.async_IsochDevice
{
    Task<com.robotraconteur.device.DeviceInfo> async_get_device_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<ToolInfo> async_get_tool_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<com.robotraconteur.device.isoch.IsochInfo> async_get_isoch_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<uint> async_get_isoch_downsample(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_isoch_downsample(uint value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_open(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_close(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_halt(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_setf_command(double command,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<object> async_getf_param(string param_name,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_setf_param(string param_name, object value_,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_enable(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_disable(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_reset_errors(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_home(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
}
public class Tool_stub : ServiceStub , Tool, async_Tool{
    private Pipe<ToolStateSensorData> rr_tool_state_sensor_data;
    private Wire<ToolState> rr_tool_state;
    private Wire<com.robotraconteur.device.clock.DeviceTime> rr_device_clock_now;
    public Tool_stub(WrappedServiceStub innerstub) : base(innerstub) {
    rr_tool_state_sensor_data=new Pipe<ToolStateSensorData>(innerstub.GetPipe("tool_state_sensor_data"));
    rr_tool_state=new Wire<ToolState>(innerstub.GetWire("tool_state"));
    rr_device_clock_now=new Wire<com.robotraconteur.device.clock.DeviceTime>(innerstub.GetWire("device_clock_now"));
    }
    public com.robotraconteur.device.DeviceInfo device_info {
    get {
    return MessageElementUtil.UnpackStructure<com.robotraconteur.device.DeviceInfo>(rr_innerstub.PropertyGet("device_info"));
    }
    }
    public ToolInfo tool_info {
    get {
    return MessageElementUtil.UnpackStructure<ToolInfo>(rr_innerstub.PropertyGet("tool_info"));
    }
    }
    public com.robotraconteur.device.isoch.IsochInfo isoch_info {
    get {
    return MessageElementUtil.UnpackStructure<com.robotraconteur.device.isoch.IsochInfo>(rr_innerstub.PropertyGet("isoch_info"));
    }
    }
    public uint isoch_downsample {
    get {
    return (MessageElementUtil.UnpackScalar<uint>(rr_innerstub.PropertyGet("isoch_downsample")));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackScalar<uint>("value",value))
    {
    rr_innerstub.PropertySet("isoch_downsample", m);
    }
    }
    }
    public void open() {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    using(MessageElement rr_me=rr_innerstub.FunctionCall("open",rr_param))
    {
    }
    }
    }
    public void close() {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    using(MessageElement rr_me=rr_innerstub.FunctionCall("close",rr_param))
    {
    }
    }
    }
    public void halt() {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    using(MessageElement rr_me=rr_innerstub.FunctionCall("halt",rr_param))
    {
    }
    }
    }
    public void setf_command(double command) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackScalar<double>("command",command));
    using(MessageElement rr_me=rr_innerstub.FunctionCall("setf_command",rr_param))
    {
    }
    }
    }
    public object getf_param(string param_name) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("param_name",param_name));
    using(MessageElement rr_me=rr_innerstub.FunctionCall("getf_param",rr_param))
    {
    return MessageElementUtil.UnpackVarType(rr_me);
    }
    }
    }
    public void setf_param(string param_name, object value_) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("param_name",param_name));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackVarType("value",value_));
    using(MessageElement rr_me=rr_innerstub.FunctionCall("setf_param",rr_param))
    {
    }
    }
    }
    public void enable() {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    using(MessageElement rr_me=rr_innerstub.FunctionCall("enable",rr_param))
    {
    }
    }
    }
    public void disable() {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    using(MessageElement rr_me=rr_innerstub.FunctionCall("disable",rr_param))
    {
    }
    }
    }
    public void reset_errors() {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    using(MessageElement rr_me=rr_innerstub.FunctionCall("reset_errors",rr_param))
    {
    }
    }
    }
    public void home() {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    using(MessageElement rr_me=rr_innerstub.FunctionCall("home",rr_param))
    {
    }
    }
    }
    public override void DispatchEvent(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    }
    public Pipe<ToolStateSensorData> tool_state_sensor_data {
    get { return rr_tool_state_sensor_data;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<ToolState> tool_state {
    get { return rr_tool_state;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<com.robotraconteur.device.clock.DeviceTime> device_clock_now {
    get { return rr_device_clock_now;  }
    set { throw new InvalidOperationException();}
    }
    public override MessageElement CallbackCall(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public virtual async Task<com.robotraconteur.device.DeviceInfo> async_get_device_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("device_info",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<com.robotraconteur.device.DeviceInfo>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<ToolInfo> async_get_tool_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("tool_info",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<ToolInfo>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<com.robotraconteur.device.isoch.IsochInfo> async_get_isoch_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("isoch_info",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<com.robotraconteur.device.isoch.IsochInfo>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<uint> async_get_isoch_downsample(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("isoch_downsample",rr_timeout)) {
    var rr_ret=(MessageElementUtil.UnpackScalar<uint>(rr_value));
    return rr_ret;
    } }
    public virtual async Task async_set_isoch_downsample(uint value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackScalar<uint>("value",value))
    {
    await rr_async_PropertySet("isoch_downsample",mm,rr_timeout);
    }
    }
    public virtual async Task async_open(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    using(var rr_return = await rr_async_FunctionCall("open",rr_param,rr_timeout)) {
    } } }
    public virtual async Task async_close(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    using(var rr_return = await rr_async_FunctionCall("close",rr_param,rr_timeout)) {
    } } }
    public virtual async Task async_halt(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    using(var rr_return = await rr_async_FunctionCall("halt",rr_param,rr_timeout)) {
    } } }
    public virtual async Task async_setf_command(double command,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackScalar<double>("command",command));
    using(var rr_return = await rr_async_FunctionCall("setf_command",rr_param,rr_timeout)) {
    } } }
    public virtual async Task<object> async_getf_param(string param_name,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("param_name",param_name));
    using(var rr_return = await rr_async_FunctionCall("getf_param",rr_param,rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackVarType(rr_return);
    return rr_ret;
    } } }
    public virtual async Task async_setf_param(string param_name, object value_,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("param_name",param_name));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackVarType("value",value_));
    using(var rr_return = await rr_async_FunctionCall("setf_param",rr_param,rr_timeout)) {
    } } }
    public virtual async Task async_enable(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    using(var rr_return = await rr_async_FunctionCall("enable",rr_param,rr_timeout)) {
    } } }
    public virtual async Task async_disable(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    using(var rr_return = await rr_async_FunctionCall("disable",rr_param,rr_timeout)) {
    } } }
    public virtual async Task async_reset_errors(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    using(var rr_return = await rr_async_FunctionCall("reset_errors",rr_param,rr_timeout)) {
    } } }
    public virtual async Task async_home(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    using(var rr_return = await rr_async_FunctionCall("home",rr_param,rr_timeout)) {
    } } }
}
public class Tool_skel : ServiceSkel {
    protected Tool obj;
    protected async_Tool async_obj;
    public Tool_skel(object o) : base(o)    {
    obj=(Tool)o;
    async_obj = o as async_Tool;
    }
    public override void ReleaseCastObject() { 
    obj=null;
    async_obj=null;
    base.ReleaseCastObject();
    }
    public override MessageElement CallGetProperty(string membername, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    case "device_info":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_device_info().ContinueWith(t => async_adapter.EndTask<com.robotraconteur.device.DeviceInfo>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    com.robotraconteur.device.DeviceInfo ret=obj.device_info;
    return MessageElementUtil.PackStructure("return",ret);
    }
    case "tool_info":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_tool_info().ContinueWith(t => async_adapter.EndTask<ToolInfo>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    ToolInfo ret=obj.tool_info;
    return MessageElementUtil.PackStructure("return",ret);
    }
    case "isoch_info":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_isoch_info().ContinueWith(t => async_adapter.EndTask<com.robotraconteur.device.isoch.IsochInfo>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    com.robotraconteur.device.isoch.IsochInfo ret=obj.isoch_info;
    return MessageElementUtil.PackStructure("return",ret);
    }
    case "isoch_downsample":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_isoch_downsample().ContinueWith(t => async_adapter.EndTask<uint>(t,async_ret => MessageElementUtil.PackScalar<uint>("return",async_ret)));
    return null;
    }
    uint ret=obj.isoch_downsample;
    return MessageElementUtil.PackScalar<uint>("return",ret);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void CallSetProperty(string membername, MessageElement m, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    case "isoch_downsample":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_isoch_downsample((MessageElementUtil.UnpackScalar<uint>(m))).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.isoch_downsample=(MessageElementUtil.UnpackScalar<uint>(m));
    return;
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override MessageElement CallFunction(string rr_membername, vectorptr_messageelement rr_m, WrappedServiceSkelAsyncAdapter rr_async_adapter) {
    switch (rr_membername) {
    case "open":
    {
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_open().ContinueWith(t => rr_async_adapter.EndTask(t,new MessageElement("return",(int)0)));
    return null;
    }
    this.obj.open();
    return new MessageElement("return",(int)0);
    }
    case "close":
    {
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_close().ContinueWith(t => rr_async_adapter.EndTask(t,new MessageElement("return",(int)0)));
    return null;
    }
    this.obj.close();
    return new MessageElement("return",(int)0);
    }
    case "halt":
    {
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_halt().ContinueWith(t => rr_async_adapter.EndTask(t,new MessageElement("return",(int)0)));
    return null;
    }
    this.obj.halt();
    return new MessageElement("return",(int)0);
    }
    case "setf_command":
    {
    double command=(MessageElementUtil.UnpackScalar<double>(vectorptr_messageelement_util.FindElement(rr_m,"command")));
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_setf_command(command).ContinueWith(t => rr_async_adapter.EndTask(t,new MessageElement("return",(int)0)));
    return null;
    }
    this.obj.setf_command(command);
    return new MessageElement("return",(int)0);
    }
    case "getf_param":
    {
    string param_name=MessageElementUtil.UnpackString(vectorptr_messageelement_util.FindElement(rr_m,"param_name"));
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_getf_param(param_name).ContinueWith(t => rr_async_adapter.EndTask<object>(t,async_ret => MessageElementUtil.PackVarType("return",async_ret)));
    return null;
    }
    object rr_ret=this.obj.getf_param(param_name);
    return MessageElementUtil.PackVarType("return",rr_ret);
    }
    case "setf_param":
    {
    string param_name=MessageElementUtil.UnpackString(vectorptr_messageelement_util.FindElement(rr_m,"param_name"));
    object value_=MessageElementUtil.UnpackVarType(vectorptr_messageelement_util.FindElement(rr_m,"value"));
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_setf_param(param_name, value_).ContinueWith(t => rr_async_adapter.EndTask(t,new MessageElement("return",(int)0)));
    return null;
    }
    this.obj.setf_param(param_name, value_);
    return new MessageElement("return",(int)0);
    }
    case "enable":
    {
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_enable().ContinueWith(t => rr_async_adapter.EndTask(t,new MessageElement("return",(int)0)));
    return null;
    }
    this.obj.enable();
    return new MessageElement("return",(int)0);
    }
    case "disable":
    {
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_disable().ContinueWith(t => rr_async_adapter.EndTask(t,new MessageElement("return",(int)0)));
    return null;
    }
    this.obj.disable();
    return new MessageElement("return",(int)0);
    }
    case "reset_errors":
    {
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_reset_errors().ContinueWith(t => rr_async_adapter.EndTask(t,new MessageElement("return",(int)0)));
    return null;
    }
    this.obj.reset_errors();
    return new MessageElement("return",(int)0);
    }
    case "home":
    {
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_home().ContinueWith(t => rr_async_adapter.EndTask(t,new MessageElement("return",(int)0)));
    return null;
    }
    this.obj.home();
    return new MessageElement("return",(int)0);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override object GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(Tool)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(Tool)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void InitPipeServers(object rrobj1) {
    obj=(Tool)rrobj1;
    obj.tool_state_sensor_data=new Pipe<ToolStateSensorData>(innerskel.GetPipe("tool_state_sensor_data"));
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(Tool)rrobj1;
    }
    public override void InitWireServers(object rrobj1) {
    obj=(Tool)rrobj1;
    obj.tool_state=new Wire<ToolState>(innerskel.GetWire("tool_state"));
    obj.device_clock_now=new Wire<com.robotraconteur.device.clock.DeviceTime>(innerskel.GetWire("device_clock_now"));
    }
    public override WrappedArrayMemoryDirector GetArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedMultiDimArrayMemoryDirector GetMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodArrayMemoryDirector GetPodArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodMultiDimArrayMemoryDirector GetPodMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedArrayMemoryDirector GetNamedArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedMultiDimArrayMemoryDirector GetNamedMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override string RRType { get { return "com.robotraconteur.robotics.tool.Tool"; } }
}
public class Tool_default_impl : Tool{
    protected PipeBroadcaster<ToolStateSensorData> rrvar_tool_state_sensor_data;
    protected WireBroadcaster<ToolState> rrvar_tool_state;
    protected WireBroadcaster<com.robotraconteur.device.clock.DeviceTime> rrvar_device_clock_now;
    public virtual com.robotraconteur.device.DeviceInfo device_info {get; set;} = default(com.robotraconteur.device.DeviceInfo);
    public virtual ToolInfo tool_info {get; set;} = default(ToolInfo);
    public virtual com.robotraconteur.device.isoch.IsochInfo isoch_info {get; set;} = default(com.robotraconteur.device.isoch.IsochInfo);
    public virtual uint isoch_downsample {get; set;} = default(uint);
    public virtual void open() {
    throw new NotImplementedException();    }
    public virtual void close() {
    throw new NotImplementedException();    }
    public virtual void halt() {
    throw new NotImplementedException();    }
    public virtual void setf_command(double command) {
    throw new NotImplementedException();    }
    public virtual object getf_param(string param_name) {
    throw new NotImplementedException();    }
    public virtual void setf_param(string param_name, object value_) {
    throw new NotImplementedException();    }
    public virtual void enable() {
    throw new NotImplementedException();    }
    public virtual void disable() {
    throw new NotImplementedException();    }
    public virtual void reset_errors() {
    throw new NotImplementedException();    }
    public virtual void home() {
    throw new NotImplementedException();    }
    public virtual Pipe<ToolStateSensorData> tool_state_sensor_data {
    get { return rrvar_tool_state_sensor_data.Pipe;  }
    set {
    if (rrvar_tool_state_sensor_data!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_tool_state_sensor_data= new PipeBroadcaster<ToolStateSensorData>(value);
    }
    }
    public virtual Wire<ToolState> tool_state {
    get { return rrvar_tool_state.Wire;  }
    set {
    if (rrvar_tool_state!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_tool_state= new WireBroadcaster<ToolState>(value);
    }
    }
    public virtual Wire<com.robotraconteur.device.clock.DeviceTime> device_clock_now {
    get { return rrvar_device_clock_now.Wire;  }
    set {
    if (rrvar_device_clock_now!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_device_clock_now= new WireBroadcaster<com.robotraconteur.device.clock.DeviceTime>(value);
    }
    }
}
public static class RRExtensions{
}
}
namespace com.robotraconteur.robotics.trajectory
{
public class JointTrajectoryWaypoint
{
    public double[] joint_position;
    public double[] joint_velocity;
    public double[] position_tolerance;
    public double[] velocity_tolerance;
    public InterpolationMode interpolation_mode;
    public TrajectoryWaypointType waypoint_type;
    public double time_from_start;
}

public class JointTrajectory
{
    public List<string> joint_names;
    public List<com.robotraconteur.robotics.joints.JointPositionUnits> joint_units;
    public List<JointTrajectoryWaypoint> waypoints;
    public Dictionary<string,object> extended;
}

public class TrajectoryStatus
{
    public ulong seqno;
    public com.robotraconteur.action.ActionStatusCode action_status;
    public uint current_waypoint;
    public double trajectory_time;
}

public class AdvancedJointTrajectoryDeviceWaypoint
{
    public List<double[]> joint_position;
    public List<double[]> joint_velocity;
    public List<double[]> joint_acceleration;
    public List<double[]> joint_jerk;
    public List<double[]> joint_effort;
    public List<double[]> position_tolerance;
    public List<double[]> velocity_tolerance;
    public InterpolationMode interpolation_mode;
    public TrajectoryWaypointType waypoint_type;
    public Dictionary<string,object> signals;
}

public class AdvancedJointTrajectoryWaypoint
{
    public List<AdvancedJointTrajectoryDeviceWaypoint> joints;
    public double time_from_start;
}

public class AdvancedJointTrajectoryDevice
{
    public com.robotraconteur.identifier.Identifier device;
    public List<string> joint_names;
    public List<com.robotraconteur.robotics.joints.JointPositionUnits> joint_units;
    public List<com.robotraconteur.robotics.joints.JointEffortUnits> joint_effort_units;
    public Dictionary<string,object> extended;
}

public class AdvancedJointTrajectory
{
    public List<AdvancedJointTrajectoryDevice> devices;
    public List<AdvancedJointTrajectoryWaypoint> waypoints;
    public Dictionary<string,object> extended;
}

public class FreeformJointTrajectoryWaypoint
{
    public List<object> joint_position;
    public List<object> joint_velocity;
    public List<object> position_tolerance;
    public List<object> velocity_tolerance;
    public string interpolation_mode;
    public Dictionary<string,object> signals;
    public double time_from_start;
    public Dictionary<string,object> extended;
}

public class FreeformJointTrajectory
{
    public List<string> joint_names;
    public List<string> joint_units;
    public List<FreeformJointTrajectoryWaypoint> waypoints;
    public Dictionary<string,object> extended;
}

public static class com__robotraconteur__robotics__trajectoryConstants 
{
}
    public enum InterpolationMode
    {
    default_ = 0,
    joint = 1,
    linear = 2,
    cylindrical = 3,
    spherical = 4,
    joint_cubic_spline = 5,
    cubic_spline = 6,
    custom = 7
    };
    public enum TrajectoryWaypointType
    {
    unspecified = 0,
    start = 1,
    path = 2,
    goal = 3,
    intermediate_stop = 4,
    raster = 5,
    other = 6
    };
}
namespace com.robotraconteur.robotics.trajectory
{
public class com__robotraconteur__robotics__trajectoryFactory : ServiceFactory
{
    public override string DefString()
{
    const string s="service com.robotraconteur.robotics.trajectory\n\nstdver 0.10\n\nimport com.robotraconteur.robotics.joints\nimport com.robotraconteur.identifier\nimport com.robotraconteur.action\n\nusing com.robotraconteur.robotics.joints.JointPositionUnits\nusing com.robotraconteur.robotics.joints.JointEffortUnits\nusing com.robotraconteur.identifier.Identifier\nusing com.robotraconteur.action.ActionStatusCode\n\nenum InterpolationMode\ndefault = 0,\njoint,\nlinear,\ncylindrical,\nspherical,\njoint_cubic_spline,\ncubic_spline,\ncustom\nend\n\nenum TrajectoryWaypointType\nunspecified = 0,\nstart = 1,\npath,\ngoal,\nintermediate_stop,\nraster,\nother\nend\n\nstruct JointTrajectoryWaypoint\nfield double[] joint_position\nfield double[] joint_velocity\nfield double[] position_tolerance\nfield double[] velocity_tolerance\nfield InterpolationMode interpolation_mode\nfield TrajectoryWaypointType waypoint_type\nfield double time_from_start\nend\n\nstruct JointTrajectory\nfield string{list} joint_names\nfield JointPositionUnits{list} joint_units\nfield JointTrajectoryWaypoint{list} waypoints\nfield varvalue{string} extended\nend\n\nstruct TrajectoryStatus\nfield uint64 seqno\nfield ActionStatusCode action_status\nfield uint32 current_waypoint\nfield double trajectory_time\nend\n\nstruct AdvancedJointTrajectoryDeviceWaypoint\n# Use list for compound joints\nfield double[]{list} joint_position\nfield double[]{list} joint_velocity\nfield double[]{list} joint_acceleration\nfield double[]{list} joint_jerk\nfield double[]{list} joint_effort\nfield double[]{list} position_tolerance\nfield double[]{list} velocity_tolerance\nfield InterpolationMode interpolation_mode\nfield TrajectoryWaypointType waypoint_type\nfield varvalue{string} signals\nend\n\nstruct AdvancedJointTrajectoryWaypoint\nfield AdvancedJointTrajectoryDeviceWaypoint{list} joints\nfield double time_from_start\nend\n\nstruct AdvancedJointTrajectoryDevice\nfield Identifier device\nfield string{list} joint_names\nfield JointPositionUnits{list} joint_units\nfield JointEffortUnits{list} joint_effort_units\nfield varvalue{string} extended\nend\n\nstruct AdvancedJointTrajectory\nfield AdvancedJointTrajectoryDevice{list} devices\nfield AdvancedJointTrajectoryWaypoint{list} waypoints\nfield varvalue{string} extended\nend\n\nstruct FreeformJointTrajectoryWaypoint\nfield varvalue{list} joint_position\nfield varvalue{list} joint_velocity\nfield varvalue{list} position_tolerance\nfield varvalue{list} velocity_tolerance\nfield string interpolation_mode\nfield varvalue{string} signals\nfield double time_from_start\nfield varvalue{string} extended\nend\n\nstruct FreeformJointTrajectory\nfield string{list} joint_names\nfield string{list} joint_units\nfield FreeformJointTrajectoryWaypoint{list} waypoints\nfield varvalue{string} extended\nend\n\n";
    return s;
    }
    public override string GetServiceName() {return "com.robotraconteur.robotics.trajectory";}
    public JointTrajectoryWaypoint_stub JointTrajectoryWaypoint_stubentry;
    public JointTrajectory_stub JointTrajectory_stubentry;
    public TrajectoryStatus_stub TrajectoryStatus_stubentry;
    public AdvancedJointTrajectoryDeviceWaypoint_stub AdvancedJointTrajectoryDeviceWaypoint_stubentry;
    public AdvancedJointTrajectoryWaypoint_stub AdvancedJointTrajectoryWaypoint_stubentry;
    public AdvancedJointTrajectoryDevice_stub AdvancedJointTrajectoryDevice_stubentry;
    public AdvancedJointTrajectory_stub AdvancedJointTrajectory_stubentry;
    public FreeformJointTrajectoryWaypoint_stub FreeformJointTrajectoryWaypoint_stubentry;
    public FreeformJointTrajectory_stub FreeformJointTrajectory_stubentry;
    public com__robotraconteur__robotics__trajectoryFactory()
{
    JointTrajectoryWaypoint_stubentry=new JointTrajectoryWaypoint_stub(this);
    JointTrajectory_stubentry=new JointTrajectory_stub(this);
    TrajectoryStatus_stubentry=new TrajectoryStatus_stub(this);
    AdvancedJointTrajectoryDeviceWaypoint_stubentry=new AdvancedJointTrajectoryDeviceWaypoint_stub(this);
    AdvancedJointTrajectoryWaypoint_stubentry=new AdvancedJointTrajectoryWaypoint_stub(this);
    AdvancedJointTrajectoryDevice_stubentry=new AdvancedJointTrajectoryDevice_stub(this);
    AdvancedJointTrajectory_stubentry=new AdvancedJointTrajectory_stub(this);
    FreeformJointTrajectoryWaypoint_stubentry=new FreeformJointTrajectoryWaypoint_stub(this);
    FreeformJointTrajectory_stubentry=new FreeformJointTrajectory_stub(this);
    }
    public override IStructureStub FindStructureStub(string objecttype)
    {
    if (objecttype=="JointTrajectoryWaypoint")    return JointTrajectoryWaypoint_stubentry;
    if (objecttype=="JointTrajectory")    return JointTrajectory_stubentry;
    if (objecttype=="TrajectoryStatus")    return TrajectoryStatus_stubentry;
    if (objecttype=="AdvancedJointTrajectoryDeviceWaypoint")    return AdvancedJointTrajectoryDeviceWaypoint_stubentry;
    if (objecttype=="AdvancedJointTrajectoryWaypoint")    return AdvancedJointTrajectoryWaypoint_stubentry;
    if (objecttype=="AdvancedJointTrajectoryDevice")    return AdvancedJointTrajectoryDevice_stubentry;
    if (objecttype=="AdvancedJointTrajectory")    return AdvancedJointTrajectory_stubentry;
    if (objecttype=="FreeformJointTrajectoryWaypoint")    return FreeformJointTrajectoryWaypoint_stubentry;
    if (objecttype=="FreeformJointTrajectory")    return FreeformJointTrajectory_stubentry;
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public override IPodStub FindPodStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override INamedArrayStub FindNamedArrayStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override ServiceStub CreateStub(WrappedServiceStub innerstub) {
    string objecttype=innerstub.RR_objecttype.GetServiceDefinition().Name + "." + innerstub.RR_objecttype.Name;    string objshort;
    if (CompareNamespace(objecttype, out objshort)) {
    switch (objshort) {
    default:
    break;
    }
    } else {
    string ext_service_type=RobotRaconteurNode.SplitQualifiedName(objecttype).Item1;
    return RobotRaconteurNode.s.GetServiceType(ext_service_type).CreateStub(innerstub);
    }
    throw new ServiceException("Could not create stub");
    }
    public override ServiceSkel CreateSkel(object obj) {
    string objtype = RobotRaconteurNode.GetTypeString(ServiceSkelUtil.FindParentInterface(obj.GetType()));
    string objshort;
    if (CompareNamespace(objtype, out objshort)) {
    switch(objshort) {
    default:
    break;
    }
    } else {
    string ext_service_type=RobotRaconteurNode.SplitQualifiedName(objtype).Item1;
    return RobotRaconteurNode.s.GetServiceFactory(ext_service_type).CreateSkel(obj);
    }
    throw new ServiceException("Could not create skel");
    }
    public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp){
    if (rr_exp==null) return rr_exp;
    string rr_type=rr_exp.Error;
    if (!rr_type.Contains(".")) return rr_exp;
    string rr_stype;
    if (CompareNamespace(rr_type, out rr_stype)) {
    } else {
    return RobotRaconteurNode.s.DownCastException(rr_exp); 
    }
    return rr_exp;
    }
}

public class JointTrajectoryWaypoint_stub : IStructureStub {
    public JointTrajectoryWaypoint_stub(com__robotraconteur__robotics__trajectoryFactory d) {def=d;}
    private com__robotraconteur__robotics__trajectoryFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    JointTrajectoryWaypoint s = (JointTrajectoryWaypoint)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackArray<double>("joint_position",s.joint_position));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackArray<double>("joint_velocity",s.joint_velocity));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackArray<double>("position_tolerance",s.position_tolerance));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackArray<double>("velocity_tolerance",s.velocity_tolerance));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackEnum<InterpolationMode>("interpolation_mode",s.interpolation_mode));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackEnum<TrajectoryWaypointType>("waypoint_type",s.waypoint_type));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<double>("time_from_start",s.time_from_start));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.robotics.trajectory.JointTrajectoryWaypoint",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    JointTrajectoryWaypoint s=new JointTrajectoryWaypoint();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.joint_position =MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(mm,"joint_position"));
    s.joint_velocity =MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(mm,"joint_velocity"));
    s.position_tolerance =MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(mm,"position_tolerance"));
    s.velocity_tolerance =MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(mm,"velocity_tolerance"));
    s.interpolation_mode =MessageElementUtil.UnpackEnum<InterpolationMode>(MessageElement.FindElement(mm,"interpolation_mode"));
    s.waypoint_type =MessageElementUtil.UnpackEnum<TrajectoryWaypointType>(MessageElement.FindElement(mm,"waypoint_type"));
    s.time_from_start =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(mm,"time_from_start")));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class JointTrajectory_stub : IStructureStub {
    public JointTrajectory_stub(com__robotraconteur__robotics__trajectoryFactory d) {def=d;}
    private com__robotraconteur__robotics__trajectoryFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    JointTrajectory s = (JointTrajectory)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackListType<string>("joint_names",s.joint_names));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackListType<com.robotraconteur.robotics.joints.JointPositionUnits>("joint_units",s.joint_units));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackListType<JointTrajectoryWaypoint>("waypoints",s.waypoints));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackMapType<string,object>("extended",s.extended));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.robotics.trajectory.JointTrajectory",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    JointTrajectory s=new JointTrajectory();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.joint_names =MessageElementUtil.UnpackList<string>(MessageElement.FindElement(mm,"joint_names"));
    s.joint_units =MessageElementUtil.UnpackList<com.robotraconteur.robotics.joints.JointPositionUnits>(MessageElement.FindElement(mm,"joint_units"));
    s.waypoints =MessageElementUtil.UnpackList<JointTrajectoryWaypoint>(MessageElement.FindElement(mm,"waypoints"));
    s.extended =MessageElementUtil.UnpackMap<string,object>(MessageElement.FindElement(mm,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class TrajectoryStatus_stub : IStructureStub {
    public TrajectoryStatus_stub(com__robotraconteur__robotics__trajectoryFactory d) {def=d;}
    private com__robotraconteur__robotics__trajectoryFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    TrajectoryStatus s = (TrajectoryStatus)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<ulong>("seqno",s.seqno));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackEnum<com.robotraconteur.action.ActionStatusCode>("action_status",s.action_status));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<uint>("current_waypoint",s.current_waypoint));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<double>("trajectory_time",s.trajectory_time));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.robotics.trajectory.TrajectoryStatus",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    TrajectoryStatus s=new TrajectoryStatus();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.seqno =(MessageElementUtil.UnpackScalar<ulong>(MessageElement.FindElement(mm,"seqno")));
    s.action_status =MessageElementUtil.UnpackEnum<com.robotraconteur.action.ActionStatusCode>(MessageElement.FindElement(mm,"action_status"));
    s.current_waypoint =(MessageElementUtil.UnpackScalar<uint>(MessageElement.FindElement(mm,"current_waypoint")));
    s.trajectory_time =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(mm,"trajectory_time")));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class AdvancedJointTrajectoryDeviceWaypoint_stub : IStructureStub {
    public AdvancedJointTrajectoryDeviceWaypoint_stub(com__robotraconteur__robotics__trajectoryFactory d) {def=d;}
    private com__robotraconteur__robotics__trajectoryFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    AdvancedJointTrajectoryDeviceWaypoint s = (AdvancedJointTrajectoryDeviceWaypoint)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackListType<double[]>("joint_position",s.joint_position));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackListType<double[]>("joint_velocity",s.joint_velocity));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackListType<double[]>("joint_acceleration",s.joint_acceleration));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackListType<double[]>("joint_jerk",s.joint_jerk));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackListType<double[]>("joint_effort",s.joint_effort));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackListType<double[]>("position_tolerance",s.position_tolerance));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackListType<double[]>("velocity_tolerance",s.velocity_tolerance));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackEnum<InterpolationMode>("interpolation_mode",s.interpolation_mode));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackEnum<TrajectoryWaypointType>("waypoint_type",s.waypoint_type));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackMapType<string,object>("signals",s.signals));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.robotics.trajectory.AdvancedJointTrajectoryDeviceWaypoint",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    AdvancedJointTrajectoryDeviceWaypoint s=new AdvancedJointTrajectoryDeviceWaypoint();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.joint_position =MessageElementUtil.UnpackList<double[]>(MessageElement.FindElement(mm,"joint_position"));
    s.joint_velocity =MessageElementUtil.UnpackList<double[]>(MessageElement.FindElement(mm,"joint_velocity"));
    s.joint_acceleration =MessageElementUtil.UnpackList<double[]>(MessageElement.FindElement(mm,"joint_acceleration"));
    s.joint_jerk =MessageElementUtil.UnpackList<double[]>(MessageElement.FindElement(mm,"joint_jerk"));
    s.joint_effort =MessageElementUtil.UnpackList<double[]>(MessageElement.FindElement(mm,"joint_effort"));
    s.position_tolerance =MessageElementUtil.UnpackList<double[]>(MessageElement.FindElement(mm,"position_tolerance"));
    s.velocity_tolerance =MessageElementUtil.UnpackList<double[]>(MessageElement.FindElement(mm,"velocity_tolerance"));
    s.interpolation_mode =MessageElementUtil.UnpackEnum<InterpolationMode>(MessageElement.FindElement(mm,"interpolation_mode"));
    s.waypoint_type =MessageElementUtil.UnpackEnum<TrajectoryWaypointType>(MessageElement.FindElement(mm,"waypoint_type"));
    s.signals =MessageElementUtil.UnpackMap<string,object>(MessageElement.FindElement(mm,"signals"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class AdvancedJointTrajectoryWaypoint_stub : IStructureStub {
    public AdvancedJointTrajectoryWaypoint_stub(com__robotraconteur__robotics__trajectoryFactory d) {def=d;}
    private com__robotraconteur__robotics__trajectoryFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    AdvancedJointTrajectoryWaypoint s = (AdvancedJointTrajectoryWaypoint)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackListType<AdvancedJointTrajectoryDeviceWaypoint>("joints",s.joints));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<double>("time_from_start",s.time_from_start));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.robotics.trajectory.AdvancedJointTrajectoryWaypoint",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    AdvancedJointTrajectoryWaypoint s=new AdvancedJointTrajectoryWaypoint();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.joints =MessageElementUtil.UnpackList<AdvancedJointTrajectoryDeviceWaypoint>(MessageElement.FindElement(mm,"joints"));
    s.time_from_start =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(mm,"time_from_start")));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class AdvancedJointTrajectoryDevice_stub : IStructureStub {
    public AdvancedJointTrajectoryDevice_stub(com__robotraconteur__robotics__trajectoryFactory d) {def=d;}
    private com__robotraconteur__robotics__trajectoryFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    AdvancedJointTrajectoryDevice s = (AdvancedJointTrajectoryDevice)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("device",s.device));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackListType<string>("joint_names",s.joint_names));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackListType<com.robotraconteur.robotics.joints.JointPositionUnits>("joint_units",s.joint_units));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackListType<com.robotraconteur.robotics.joints.JointEffortUnits>("joint_effort_units",s.joint_effort_units));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackMapType<string,object>("extended",s.extended));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.robotics.trajectory.AdvancedJointTrajectoryDevice",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    AdvancedJointTrajectoryDevice s=new AdvancedJointTrajectoryDevice();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.device =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(MessageElement.FindElement(mm,"device"));
    s.joint_names =MessageElementUtil.UnpackList<string>(MessageElement.FindElement(mm,"joint_names"));
    s.joint_units =MessageElementUtil.UnpackList<com.robotraconteur.robotics.joints.JointPositionUnits>(MessageElement.FindElement(mm,"joint_units"));
    s.joint_effort_units =MessageElementUtil.UnpackList<com.robotraconteur.robotics.joints.JointEffortUnits>(MessageElement.FindElement(mm,"joint_effort_units"));
    s.extended =MessageElementUtil.UnpackMap<string,object>(MessageElement.FindElement(mm,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class AdvancedJointTrajectory_stub : IStructureStub {
    public AdvancedJointTrajectory_stub(com__robotraconteur__robotics__trajectoryFactory d) {def=d;}
    private com__robotraconteur__robotics__trajectoryFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    AdvancedJointTrajectory s = (AdvancedJointTrajectory)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackListType<AdvancedJointTrajectoryDevice>("devices",s.devices));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackListType<AdvancedJointTrajectoryWaypoint>("waypoints",s.waypoints));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackMapType<string,object>("extended",s.extended));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.robotics.trajectory.AdvancedJointTrajectory",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    AdvancedJointTrajectory s=new AdvancedJointTrajectory();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.devices =MessageElementUtil.UnpackList<AdvancedJointTrajectoryDevice>(MessageElement.FindElement(mm,"devices"));
    s.waypoints =MessageElementUtil.UnpackList<AdvancedJointTrajectoryWaypoint>(MessageElement.FindElement(mm,"waypoints"));
    s.extended =MessageElementUtil.UnpackMap<string,object>(MessageElement.FindElement(mm,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class FreeformJointTrajectoryWaypoint_stub : IStructureStub {
    public FreeformJointTrajectoryWaypoint_stub(com__robotraconteur__robotics__trajectoryFactory d) {def=d;}
    private com__robotraconteur__robotics__trajectoryFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    FreeformJointTrajectoryWaypoint s = (FreeformJointTrajectoryWaypoint)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackListType<object>("joint_position",s.joint_position));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackListType<object>("joint_velocity",s.joint_velocity));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackListType<object>("position_tolerance",s.position_tolerance));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackListType<object>("velocity_tolerance",s.velocity_tolerance));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackString("interpolation_mode",s.interpolation_mode));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackMapType<string,object>("signals",s.signals));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<double>("time_from_start",s.time_from_start));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackMapType<string,object>("extended",s.extended));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.robotics.trajectory.FreeformJointTrajectoryWaypoint",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    FreeformJointTrajectoryWaypoint s=new FreeformJointTrajectoryWaypoint();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.joint_position =MessageElementUtil.UnpackList<object>(MessageElement.FindElement(mm,"joint_position"));
    s.joint_velocity =MessageElementUtil.UnpackList<object>(MessageElement.FindElement(mm,"joint_velocity"));
    s.position_tolerance =MessageElementUtil.UnpackList<object>(MessageElement.FindElement(mm,"position_tolerance"));
    s.velocity_tolerance =MessageElementUtil.UnpackList<object>(MessageElement.FindElement(mm,"velocity_tolerance"));
    s.interpolation_mode =MessageElementUtil.UnpackString(MessageElement.FindElement(mm,"interpolation_mode"));
    s.signals =MessageElementUtil.UnpackMap<string,object>(MessageElement.FindElement(mm,"signals"));
    s.time_from_start =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(mm,"time_from_start")));
    s.extended =MessageElementUtil.UnpackMap<string,object>(MessageElement.FindElement(mm,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class FreeformJointTrajectory_stub : IStructureStub {
    public FreeformJointTrajectory_stub(com__robotraconteur__robotics__trajectoryFactory d) {def=d;}
    private com__robotraconteur__robotics__trajectoryFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    FreeformJointTrajectory s = (FreeformJointTrajectory)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackListType<string>("joint_names",s.joint_names));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackListType<string>("joint_units",s.joint_units));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackListType<FreeformJointTrajectoryWaypoint>("waypoints",s.waypoints));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackMapType<string,object>("extended",s.extended));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.robotics.trajectory.FreeformJointTrajectory",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    FreeformJointTrajectory s=new FreeformJointTrajectory();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.joint_names =MessageElementUtil.UnpackList<string>(MessageElement.FindElement(mm,"joint_names"));
    s.joint_units =MessageElementUtil.UnpackList<string>(MessageElement.FindElement(mm,"joint_units"));
    s.waypoints =MessageElementUtil.UnpackList<FreeformJointTrajectoryWaypoint>(MessageElement.FindElement(mm,"waypoints"));
    s.extended =MessageElementUtil.UnpackMap<string,object>(MessageElement.FindElement(mm,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public static class RRExtensions{
}
}
namespace com.robotraconteur.sensor
{
public class SensorInfo
{
    public com.robotraconteur.device.DeviceInfo device_info;
    public SensorTypeCode sensor_type;
    public List<com.robotraconteur.units.SIUnit> units;
    public com.robotraconteur.datatype.DataType data_type;
    public double[] sensor_resolution;
    public bool analog_sensor;
    public double update_frequency;
    public List<com.robotraconteur.param.ParameterInfo> parameter_info;
    public Dictionary<string,object> extended;
}

public class SensorData
{
    public com.robotraconteur.sensordata.SensorDataHeader data_header;
    public uint data_flags;
    public double[] data;
    public com.robotraconteur.datatype.DataType data_type;
    public List<com.robotraconteur.units.SIUnit> data_units;
    public Dictionary<string,object> parameters;
    public Dictionary<string,object> extended;
}

[RobotRaconteurServiceObjectInterface()]
public interface Sensor : com.robotraconteur.device.Device
{
    com.robotraconteur.device.DeviceInfo device_info { get; 	}
    SensorInfo sensor_info { get; 	}
    object getf_param(string param_name);
    void setf_param(string param_name, object value_);
    Pipe<SensorData> sensor_data{ get; set; }
    Wire<double[]> sensor_value{ get; set; }
}

[RobotRaconteurServiceObjectInterface()]
public interface Vector2Sensor : com.robotraconteur.device.Device, Sensor
{
    com.robotraconteur.device.DeviceInfo device_info { get; 	}
    SensorInfo sensor_info { get; 	}
    object getf_param(string param_name);
    void setf_param(string param_name, object value_);
    Pipe<SensorData> sensor_data{ get; set; }
    Wire<double[]> sensor_value{ get; set; }
    Wire<com.robotraconteur.geometry.Vector2> vector2_sensor_value{ get; set; }
}

[RobotRaconteurServiceObjectInterface()]
public interface Vector3Sensor : Sensor, com.robotraconteur.device.Device
{
    com.robotraconteur.device.DeviceInfo device_info { get; 	}
    SensorInfo sensor_info { get; 	}
    object getf_param(string param_name);
    void setf_param(string param_name, object value_);
    Pipe<SensorData> sensor_data{ get; set; }
    Wire<double[]> sensor_value{ get; set; }
    Wire<com.robotraconteur.geometry.Vector3> vector3_sensor_value{ get; set; }
}

[RobotRaconteurServiceObjectInterface()]
public interface Vector6Sensor : Sensor, com.robotraconteur.device.Device
{
    com.robotraconteur.device.DeviceInfo device_info { get; 	}
    SensorInfo sensor_info { get; 	}
    object getf_param(string param_name);
    void setf_param(string param_name, object value_);
    Pipe<SensorData> sensor_data{ get; set; }
    Wire<double[]> sensor_value{ get; set; }
    Wire<com.robotraconteur.geometry.Vector6> vector6_sensor_value{ get; set; }
}

[RobotRaconteurServiceObjectInterface()]
public interface WrenchSensor : Sensor, com.robotraconteur.device.Device
{
    com.robotraconteur.device.DeviceInfo device_info { get; 	}
    SensorInfo sensor_info { get; 	}
    object getf_param(string param_name);
    void setf_param(string param_name, object value_);
    Pipe<SensorData> sensor_data{ get; set; }
    Wire<double[]> sensor_value{ get; set; }
    Wire<com.robotraconteur.geometry.Wrench> wrench_sensor_value{ get; set; }
}

[RobotRaconteurServiceObjectInterface()]
public interface FreeformSensor : Sensor, com.robotraconteur.device.Device
{
    com.robotraconteur.device.DeviceInfo device_info { get; 	}
    SensorInfo sensor_info { get; 	}
    object getf_param(string param_name);
    void setf_param(string param_name, object value_);
    Pipe<SensorData> sensor_data{ get; set; }
    Wire<double[]> sensor_value{ get; set; }
    Wire<object> freeform_sensor_value{ get; set; }
}

public static class com__robotraconteur__sensorConstants 
{
}
    public enum SensorTypeCode
    {
    unknown = 0,
    generic_digital = 1,
    generic_analog = 2,
    pushbutton = 3,
    dial = 4,
    limitswitch = 5,
    infrared = 6,
    pressure = 7,
    vacuum = 8,
    temperature = 9,
    humidity = 10,
    level = 11,
    contact = 12,
    ultrasonic = 13,
    magnetic = 14,
    encoder = 15,
    potentiometer = 16,
    resolver = 17,
    linear_encoder = 18,
    linear_potentiometer = 19,
    lvds = 20,
    accelerometer = 21,
    gyroscopic = 22,
    velocity = 23,
    angular_velocity = 24,
    spatial_velocity = 25,
    torque = 26,
    force = 27,
    proximity = 28,
    voltage = 29,
    current = 30,
    laser = 31,
    flow = 32,
    pyrometer = 33,
    forcetorque = 34,
    light_color = 35,
    light_intensity = 36,
    object_color = 37,
    altitude = 38,
    generic_word = 39,
    generic_vector = 40,
    position = 41,
    angle = 42,
    acceleration = 43,
    angular_acceleration = 44,
    inclinometer = 45,
    tilt = 46,
    motion = 47,
    radiation = 48,
    photoelectric = 49,
    leak = 50,
    chemical = 51,
    particle = 52,
    metal = 53,
    smoke = 54,
    flame = 55,
    vibration = 56,
    mark = 57,
    contamination = 58,
    inertial = 59,
    magnetometer = 60,
    navigation = 61,
    tactile = 62,
    meteorological = 63,
    horizon = 64,
    sun = 65,
    star = 66,
    moon = 67,
    attitude = 68,
    airspeed = 69,
    distance = 70,
    heading = 71,
    safety = 72,
    door = 73,
    security = 74,
    other = 0x8000,
    vendor_defined = 0x80000
    };
    public enum SensorDataFlags
    {
    unknown = 0,
    enabled = 0x1,
    streaming = 0x2,
    calibrated = 0x4,
    calibration_error = 0x8,
    out_of_range = 0x10,
    out_of_range_high = 0x20,
    out_of_range_low = 0x40,
    warning = 0x80,
    error = 0x100,
    fatal_error = 0x200,
    ready = 0x400
    };
}
namespace com.robotraconteur.sensor
{
public class com__robotraconteur__sensorFactory : ServiceFactory
{
    public override string DefString()
{
    const string s="service com.robotraconteur.sensor\n\nstdver 0.10\n\nimport com.robotraconteur.sensordata\nimport com.robotraconteur.device\nimport com.robotraconteur.param\nimport com.robotraconteur.geometry\nimport com.robotraconteur.units\nimport com.robotraconteur.datatype\n\nusing com.robotraconteur.sensordata.SensorDataHeader\nusing com.robotraconteur.device.DeviceInfo\nusing com.robotraconteur.device.Device\nusing com.robotraconteur.param.ParameterInfo\nusing com.robotraconteur.geometry.Vector2\nusing com.robotraconteur.geometry.Vector3\nusing com.robotraconteur.geometry.Vector6\nusing com.robotraconteur.geometry.Wrench\nusing com.robotraconteur.units.SIUnit\nusing com.robotraconteur.datatype.DataType\n\nenum SensorTypeCode\nunknown = 0,\ngeneric_digital,\ngeneric_analog,\npushbutton,\ndial,\nlimitswitch,\ninfrared,\npressure,\nvacuum,\ntemperature,\nhumidity,\nlevel,\ncontact,\nultrasonic,\nmagnetic,\nencoder,\npotentiometer,\nresolver,\nlinear_encoder,\nlinear_potentiometer,\nlvds,\naccelerometer,\ngyroscopic,\nvelocity,\nangular_velocity,\nspatial_velocity,\ntorque,\nforce,\nproximity,\nvoltage,\ncurrent,\nlaser,\nflow,\npyrometer,\nforcetorque,\nlight_color,\nlight_intensity,\nobject_color,\naltitude,\ngeneric_word,\ngeneric_vector,\nposition,\nangle,\nacceleration,\nangular_acceleration,\ninclinometer,\ntilt,\nmotion,\nradiation,\nphotoelectric,\nleak,\nchemical,\nparticle,\nmetal,\nsmoke,\nflame,\nvibration,\nmark,\ncontamination,\ninertial,\nmagnetometer,\nnavigation,\ntactile,\nmeteorological,\nhorizon,\nsun,\nstar,\nmoon,\nattitude,\nairspeed,\ndistance,\nheading,\nsafety,\ndoor,\nsecurity,\nother=0x8000,\nvendor_defined=0x80000\nend\n\nenum SensorDataFlags\nunknown = 0,\nenabled = 0x1,\nstreaming = 0x2,\ncalibrated = 0x4,\ncalibration_error = 0x8,\nout_of_range = 0x10,\nout_of_range_high = 0x20,\nout_of_range_low = 0x40,\nwarning = 0x80,\nerror = 0x100,\nfatal_error = 0x200,\nready = 0x400\nend\n\nstruct SensorInfo\nfield DeviceInfo device_info\nfield SensorTypeCode sensor_type\nfield SIUnit{list} units\nfield DataType data_type\nfield double[] sensor_resolution\nfield bool analog_sensor\nfield double update_frequency\nfield ParameterInfo{list} parameter_info\nfield varvalue{string} extended\nend\n\nstruct SensorData\nfield SensorDataHeader data_header\nfield uint32 data_flags\nfield double[] data\nfield DataType data_type\nfield SIUnit{list} data_units\nfield varvalue{string} parameters\nfield varvalue{string} extended\nend\n\nobject Sensor\nimplements Device\nproperty DeviceInfo device_info [readonly,nolock]\nproperty SensorInfo sensor_info [readonly,nolock]\nwire double[] sensor_value [readonly,nolock]\npipe SensorData sensor_data [readonly,nolock]\nfunction varvalue getf_param(string param_name)\nfunction void setf_param(string param_name, varvalue value)\nend\n\nobject Vector2Sensor\nimplements Device\nimplements Sensor\nproperty DeviceInfo device_info [readonly,nolock]\nproperty SensorInfo sensor_info [readonly,nolock]\nwire double[] sensor_value [readonly,nolock]\npipe SensorData sensor_data [readonly,nolock]\nfunction varvalue getf_param(string param_name)\nfunction void setf_param(string param_name, varvalue value)\nwire Vector2 vector2_sensor_value [readonly,nolock]\nend\n\nobject Vector3Sensor\nimplements Sensor\nimplements Device\nproperty DeviceInfo device_info [readonly,nolock]\nproperty SensorInfo sensor_info [readonly,nolock]\nwire double[] sensor_value [readonly,nolock]\npipe SensorData sensor_data [readonly,nolock]\nfunction varvalue getf_param(string param_name)\nfunction void setf_param(string param_name, varvalue value)\nwire Vector3 vector3_sensor_value [readonly,nolock]\nend\n\nobject Vector6Sensor\nimplements Sensor\nimplements Device\nproperty DeviceInfo device_info [readonly,nolock]\nproperty SensorInfo sensor_info [readonly,nolock]\nwire double[] sensor_value [readonly,nolock]\npipe SensorData sensor_data [readonly,nolock]\nfunction varvalue getf_param(string param_name)\nfunction void setf_param(string param_name, varvalue value)\nwire Vector6 vector6_sensor_value [readonly,nolock]\nend\n\nobject WrenchSensor\nimplements Sensor\nimplements Device\nproperty DeviceInfo device_info [readonly,nolock]\nproperty SensorInfo sensor_info [readonly,nolock]\nwire double[] sensor_value [readonly,nolock]\npipe SensorData sensor_data [readonly,nolock]\nfunction varvalue getf_param(string param_name)\nfunction void setf_param(string param_name, varvalue value)\nwire Wrench wrench_sensor_value [readonly,nolock]\nend\n\nobject FreeformSensor\nimplements Sensor\nimplements Device\nproperty DeviceInfo device_info [readonly,nolock]\nproperty SensorInfo sensor_info [readonly,nolock]\nwire double[] sensor_value [readonly,nolock]\npipe SensorData sensor_data [readonly,nolock]\nfunction varvalue getf_param(string param_name)\nfunction void setf_param(string param_name, varvalue value)\nwire varvalue freeform_sensor_value [readonly,nolock]\nend\n\n";
    return s;
    }
    public override string GetServiceName() {return "com.robotraconteur.sensor";}
    public SensorInfo_stub SensorInfo_stubentry;
    public SensorData_stub SensorData_stubentry;
    public com__robotraconteur__sensorFactory()
{
    SensorInfo_stubentry=new SensorInfo_stub(this);
    SensorData_stubentry=new SensorData_stub(this);
    }
    public override IStructureStub FindStructureStub(string objecttype)
    {
    if (objecttype=="SensorInfo")    return SensorInfo_stubentry;
    if (objecttype=="SensorData")    return SensorData_stubentry;
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public override IPodStub FindPodStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override INamedArrayStub FindNamedArrayStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override ServiceStub CreateStub(WrappedServiceStub innerstub) {
    string objecttype=innerstub.RR_objecttype.GetServiceDefinition().Name + "." + innerstub.RR_objecttype.Name;    string objshort;
    if (CompareNamespace(objecttype, out objshort)) {
    switch (objshort) {
    case "Sensor":
    return new Sensor_stub(innerstub);
    case "Vector2Sensor":
    return new Vector2Sensor_stub(innerstub);
    case "Vector3Sensor":
    return new Vector3Sensor_stub(innerstub);
    case "Vector6Sensor":
    return new Vector6Sensor_stub(innerstub);
    case "WrenchSensor":
    return new WrenchSensor_stub(innerstub);
    case "FreeformSensor":
    return new FreeformSensor_stub(innerstub);
    default:
    break;
    }
    } else {
    string ext_service_type=RobotRaconteurNode.SplitQualifiedName(objecttype).Item1;
    return RobotRaconteurNode.s.GetServiceType(ext_service_type).CreateStub(innerstub);
    }
    throw new ServiceException("Could not create stub");
    }
    public override ServiceSkel CreateSkel(object obj) {
    string objtype = RobotRaconteurNode.GetTypeString(ServiceSkelUtil.FindParentInterface(obj.GetType()));
    string objshort;
    if (CompareNamespace(objtype, out objshort)) {
    switch(objshort) {
    case "Sensor":
    return new Sensor_skel((Sensor)obj);
    case "Vector2Sensor":
    return new Vector2Sensor_skel((Vector2Sensor)obj);
    case "Vector3Sensor":
    return new Vector3Sensor_skel((Vector3Sensor)obj);
    case "Vector6Sensor":
    return new Vector6Sensor_skel((Vector6Sensor)obj);
    case "WrenchSensor":
    return new WrenchSensor_skel((WrenchSensor)obj);
    case "FreeformSensor":
    return new FreeformSensor_skel((FreeformSensor)obj);
    default:
    break;
    }
    } else {
    string ext_service_type=RobotRaconteurNode.SplitQualifiedName(objtype).Item1;
    return RobotRaconteurNode.s.GetServiceFactory(ext_service_type).CreateSkel(obj);
    }
    throw new ServiceException("Could not create skel");
    }
    public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp){
    if (rr_exp==null) return rr_exp;
    string rr_type=rr_exp.Error;
    if (!rr_type.Contains(".")) return rr_exp;
    string rr_stype;
    if (CompareNamespace(rr_type, out rr_stype)) {
    } else {
    return RobotRaconteurNode.s.DownCastException(rr_exp); 
    }
    return rr_exp;
    }
}

public class SensorInfo_stub : IStructureStub {
    public SensorInfo_stub(com__robotraconteur__sensorFactory d) {def=d;}
    private com__robotraconteur__sensorFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    SensorInfo s = (SensorInfo)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("device_info",s.device_info));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackEnum<SensorTypeCode>("sensor_type",s.sensor_type));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackListType<com.robotraconteur.units.SIUnit>("units",s.units));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("data_type",s.data_type));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackArray<double>("sensor_resolution",s.sensor_resolution));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<bool>("analog_sensor",s.analog_sensor));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<double>("update_frequency",s.update_frequency));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackListType<com.robotraconteur.param.ParameterInfo>("parameter_info",s.parameter_info));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackMapType<string,object>("extended",s.extended));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.sensor.SensorInfo",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    SensorInfo s=new SensorInfo();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.device_info =MessageElementUtil.UnpackStructure<com.robotraconteur.device.DeviceInfo>(MessageElement.FindElement(mm,"device_info"));
    s.sensor_type =MessageElementUtil.UnpackEnum<SensorTypeCode>(MessageElement.FindElement(mm,"sensor_type"));
    s.units =MessageElementUtil.UnpackList<com.robotraconteur.units.SIUnit>(MessageElement.FindElement(mm,"units"));
    s.data_type =MessageElementUtil.UnpackStructure<com.robotraconteur.datatype.DataType>(MessageElement.FindElement(mm,"data_type"));
    s.sensor_resolution =MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(mm,"sensor_resolution"));
    s.analog_sensor =(MessageElementUtil.UnpackScalar<bool>(MessageElement.FindElement(mm,"analog_sensor")));
    s.update_frequency =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(mm,"update_frequency")));
    s.parameter_info =MessageElementUtil.UnpackList<com.robotraconteur.param.ParameterInfo>(MessageElement.FindElement(mm,"parameter_info"));
    s.extended =MessageElementUtil.UnpackMap<string,object>(MessageElement.FindElement(mm,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class SensorData_stub : IStructureStub {
    public SensorData_stub(com__robotraconteur__sensorFactory d) {def=d;}
    private com__robotraconteur__sensorFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    SensorData s = (SensorData)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("data_header",s.data_header));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<uint>("data_flags",s.data_flags));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackArray<double>("data",s.data));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("data_type",s.data_type));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackListType<com.robotraconteur.units.SIUnit>("data_units",s.data_units));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackMapType<string,object>("parameters",s.parameters));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackMapType<string,object>("extended",s.extended));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.sensor.SensorData",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    SensorData s=new SensorData();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.data_header =MessageElementUtil.UnpackStructure<com.robotraconteur.sensordata.SensorDataHeader>(MessageElement.FindElement(mm,"data_header"));
    s.data_flags =(MessageElementUtil.UnpackScalar<uint>(MessageElement.FindElement(mm,"data_flags")));
    s.data =MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(mm,"data"));
    s.data_type =MessageElementUtil.UnpackStructure<com.robotraconteur.datatype.DataType>(MessageElement.FindElement(mm,"data_type"));
    s.data_units =MessageElementUtil.UnpackList<com.robotraconteur.units.SIUnit>(MessageElement.FindElement(mm,"data_units"));
    s.parameters =MessageElementUtil.UnpackMap<string,object>(MessageElement.FindElement(mm,"parameters"));
    s.extended =MessageElementUtil.UnpackMap<string,object>(MessageElement.FindElement(mm,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public interface async_Sensor : com.robotraconteur.device.async_Device
{
    Task<com.robotraconteur.device.DeviceInfo> async_get_device_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<SensorInfo> async_get_sensor_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<object> async_getf_param(string param_name,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_setf_param(string param_name, object value_,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
}
public class Sensor_stub : ServiceStub , Sensor, async_Sensor{
    private Pipe<SensorData> rr_sensor_data;
    private Wire<double[]> rr_sensor_value;
    public Sensor_stub(WrappedServiceStub innerstub) : base(innerstub) {
    rr_sensor_data=new Pipe<SensorData>(innerstub.GetPipe("sensor_data"));
    rr_sensor_value=new Wire<double[]>(innerstub.GetWire("sensor_value"));
    }
    public com.robotraconteur.device.DeviceInfo device_info {
    get {
    return MessageElementUtil.UnpackStructure<com.robotraconteur.device.DeviceInfo>(rr_innerstub.PropertyGet("device_info"));
    }
    }
    public SensorInfo sensor_info {
    get {
    return MessageElementUtil.UnpackStructure<SensorInfo>(rr_innerstub.PropertyGet("sensor_info"));
    }
    }
    public object getf_param(string param_name) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("param_name",param_name));
    using(MessageElement rr_me=rr_innerstub.FunctionCall("getf_param",rr_param))
    {
    return MessageElementUtil.UnpackVarType(rr_me);
    }
    }
    }
    public void setf_param(string param_name, object value_) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("param_name",param_name));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackVarType("value",value_));
    using(MessageElement rr_me=rr_innerstub.FunctionCall("setf_param",rr_param))
    {
    }
    }
    }
    public override void DispatchEvent(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    }
    public Pipe<SensorData> sensor_data {
    get { return rr_sensor_data;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<double[]> sensor_value {
    get { return rr_sensor_value;  }
    set { throw new InvalidOperationException();}
    }
    public override MessageElement CallbackCall(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public virtual async Task<com.robotraconteur.device.DeviceInfo> async_get_device_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("device_info",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<com.robotraconteur.device.DeviceInfo>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<SensorInfo> async_get_sensor_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("sensor_info",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<SensorInfo>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<object> async_getf_param(string param_name,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("param_name",param_name));
    using(var rr_return = await rr_async_FunctionCall("getf_param",rr_param,rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackVarType(rr_return);
    return rr_ret;
    } } }
    public virtual async Task async_setf_param(string param_name, object value_,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("param_name",param_name));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackVarType("value",value_));
    using(var rr_return = await rr_async_FunctionCall("setf_param",rr_param,rr_timeout)) {
    } } }
}
public interface async_Vector2Sensor : com.robotraconteur.device.async_Device, async_Sensor
{
    Task<com.robotraconteur.device.DeviceInfo> async_get_device_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<SensorInfo> async_get_sensor_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<object> async_getf_param(string param_name,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_setf_param(string param_name, object value_,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
}
public class Vector2Sensor_stub : ServiceStub , Vector2Sensor, async_Vector2Sensor{
    private Pipe<SensorData> rr_sensor_data;
    private Wire<double[]> rr_sensor_value;
    private Wire<com.robotraconteur.geometry.Vector2> rr_vector2_sensor_value;
    public Vector2Sensor_stub(WrappedServiceStub innerstub) : base(innerstub) {
    rr_sensor_data=new Pipe<SensorData>(innerstub.GetPipe("sensor_data"));
    rr_sensor_value=new Wire<double[]>(innerstub.GetWire("sensor_value"));
    rr_vector2_sensor_value=new Wire<com.robotraconteur.geometry.Vector2>(innerstub.GetWire("vector2_sensor_value"));
    }
    public com.robotraconteur.device.DeviceInfo device_info {
    get {
    return MessageElementUtil.UnpackStructure<com.robotraconteur.device.DeviceInfo>(rr_innerstub.PropertyGet("device_info"));
    }
    }
    public SensorInfo sensor_info {
    get {
    return MessageElementUtil.UnpackStructure<SensorInfo>(rr_innerstub.PropertyGet("sensor_info"));
    }
    }
    public object getf_param(string param_name) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("param_name",param_name));
    using(MessageElement rr_me=rr_innerstub.FunctionCall("getf_param",rr_param))
    {
    return MessageElementUtil.UnpackVarType(rr_me);
    }
    }
    }
    public void setf_param(string param_name, object value_) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("param_name",param_name));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackVarType("value",value_));
    using(MessageElement rr_me=rr_innerstub.FunctionCall("setf_param",rr_param))
    {
    }
    }
    }
    public override void DispatchEvent(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    }
    public Pipe<SensorData> sensor_data {
    get { return rr_sensor_data;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<double[]> sensor_value {
    get { return rr_sensor_value;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<com.robotraconteur.geometry.Vector2> vector2_sensor_value {
    get { return rr_vector2_sensor_value;  }
    set { throw new InvalidOperationException();}
    }
    public override MessageElement CallbackCall(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public virtual async Task<com.robotraconteur.device.DeviceInfo> async_get_device_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("device_info",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<com.robotraconteur.device.DeviceInfo>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<SensorInfo> async_get_sensor_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("sensor_info",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<SensorInfo>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<object> async_getf_param(string param_name,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("param_name",param_name));
    using(var rr_return = await rr_async_FunctionCall("getf_param",rr_param,rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackVarType(rr_return);
    return rr_ret;
    } } }
    public virtual async Task async_setf_param(string param_name, object value_,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("param_name",param_name));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackVarType("value",value_));
    using(var rr_return = await rr_async_FunctionCall("setf_param",rr_param,rr_timeout)) {
    } } }
}
public interface async_Vector3Sensor : async_Sensor, com.robotraconteur.device.async_Device
{
    Task<com.robotraconteur.device.DeviceInfo> async_get_device_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<SensorInfo> async_get_sensor_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<object> async_getf_param(string param_name,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_setf_param(string param_name, object value_,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
}
public class Vector3Sensor_stub : ServiceStub , Vector3Sensor, async_Vector3Sensor{
    private Pipe<SensorData> rr_sensor_data;
    private Wire<double[]> rr_sensor_value;
    private Wire<com.robotraconteur.geometry.Vector3> rr_vector3_sensor_value;
    public Vector3Sensor_stub(WrappedServiceStub innerstub) : base(innerstub) {
    rr_sensor_data=new Pipe<SensorData>(innerstub.GetPipe("sensor_data"));
    rr_sensor_value=new Wire<double[]>(innerstub.GetWire("sensor_value"));
    rr_vector3_sensor_value=new Wire<com.robotraconteur.geometry.Vector3>(innerstub.GetWire("vector3_sensor_value"));
    }
    public com.robotraconteur.device.DeviceInfo device_info {
    get {
    return MessageElementUtil.UnpackStructure<com.robotraconteur.device.DeviceInfo>(rr_innerstub.PropertyGet("device_info"));
    }
    }
    public SensorInfo sensor_info {
    get {
    return MessageElementUtil.UnpackStructure<SensorInfo>(rr_innerstub.PropertyGet("sensor_info"));
    }
    }
    public object getf_param(string param_name) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("param_name",param_name));
    using(MessageElement rr_me=rr_innerstub.FunctionCall("getf_param",rr_param))
    {
    return MessageElementUtil.UnpackVarType(rr_me);
    }
    }
    }
    public void setf_param(string param_name, object value_) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("param_name",param_name));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackVarType("value",value_));
    using(MessageElement rr_me=rr_innerstub.FunctionCall("setf_param",rr_param))
    {
    }
    }
    }
    public override void DispatchEvent(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    }
    public Pipe<SensorData> sensor_data {
    get { return rr_sensor_data;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<double[]> sensor_value {
    get { return rr_sensor_value;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<com.robotraconteur.geometry.Vector3> vector3_sensor_value {
    get { return rr_vector3_sensor_value;  }
    set { throw new InvalidOperationException();}
    }
    public override MessageElement CallbackCall(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public virtual async Task<com.robotraconteur.device.DeviceInfo> async_get_device_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("device_info",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<com.robotraconteur.device.DeviceInfo>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<SensorInfo> async_get_sensor_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("sensor_info",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<SensorInfo>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<object> async_getf_param(string param_name,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("param_name",param_name));
    using(var rr_return = await rr_async_FunctionCall("getf_param",rr_param,rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackVarType(rr_return);
    return rr_ret;
    } } }
    public virtual async Task async_setf_param(string param_name, object value_,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("param_name",param_name));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackVarType("value",value_));
    using(var rr_return = await rr_async_FunctionCall("setf_param",rr_param,rr_timeout)) {
    } } }
}
public interface async_Vector6Sensor : async_Sensor, com.robotraconteur.device.async_Device
{
    Task<com.robotraconteur.device.DeviceInfo> async_get_device_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<SensorInfo> async_get_sensor_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<object> async_getf_param(string param_name,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_setf_param(string param_name, object value_,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
}
public class Vector6Sensor_stub : ServiceStub , Vector6Sensor, async_Vector6Sensor{
    private Pipe<SensorData> rr_sensor_data;
    private Wire<double[]> rr_sensor_value;
    private Wire<com.robotraconteur.geometry.Vector6> rr_vector6_sensor_value;
    public Vector6Sensor_stub(WrappedServiceStub innerstub) : base(innerstub) {
    rr_sensor_data=new Pipe<SensorData>(innerstub.GetPipe("sensor_data"));
    rr_sensor_value=new Wire<double[]>(innerstub.GetWire("sensor_value"));
    rr_vector6_sensor_value=new Wire<com.robotraconteur.geometry.Vector6>(innerstub.GetWire("vector6_sensor_value"));
    }
    public com.robotraconteur.device.DeviceInfo device_info {
    get {
    return MessageElementUtil.UnpackStructure<com.robotraconteur.device.DeviceInfo>(rr_innerstub.PropertyGet("device_info"));
    }
    }
    public SensorInfo sensor_info {
    get {
    return MessageElementUtil.UnpackStructure<SensorInfo>(rr_innerstub.PropertyGet("sensor_info"));
    }
    }
    public object getf_param(string param_name) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("param_name",param_name));
    using(MessageElement rr_me=rr_innerstub.FunctionCall("getf_param",rr_param))
    {
    return MessageElementUtil.UnpackVarType(rr_me);
    }
    }
    }
    public void setf_param(string param_name, object value_) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("param_name",param_name));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackVarType("value",value_));
    using(MessageElement rr_me=rr_innerstub.FunctionCall("setf_param",rr_param))
    {
    }
    }
    }
    public override void DispatchEvent(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    }
    public Pipe<SensorData> sensor_data {
    get { return rr_sensor_data;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<double[]> sensor_value {
    get { return rr_sensor_value;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<com.robotraconteur.geometry.Vector6> vector6_sensor_value {
    get { return rr_vector6_sensor_value;  }
    set { throw new InvalidOperationException();}
    }
    public override MessageElement CallbackCall(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public virtual async Task<com.robotraconteur.device.DeviceInfo> async_get_device_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("device_info",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<com.robotraconteur.device.DeviceInfo>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<SensorInfo> async_get_sensor_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("sensor_info",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<SensorInfo>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<object> async_getf_param(string param_name,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("param_name",param_name));
    using(var rr_return = await rr_async_FunctionCall("getf_param",rr_param,rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackVarType(rr_return);
    return rr_ret;
    } } }
    public virtual async Task async_setf_param(string param_name, object value_,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("param_name",param_name));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackVarType("value",value_));
    using(var rr_return = await rr_async_FunctionCall("setf_param",rr_param,rr_timeout)) {
    } } }
}
public interface async_WrenchSensor : async_Sensor, com.robotraconteur.device.async_Device
{
    Task<com.robotraconteur.device.DeviceInfo> async_get_device_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<SensorInfo> async_get_sensor_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<object> async_getf_param(string param_name,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_setf_param(string param_name, object value_,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
}
public class WrenchSensor_stub : ServiceStub , WrenchSensor, async_WrenchSensor{
    private Pipe<SensorData> rr_sensor_data;
    private Wire<double[]> rr_sensor_value;
    private Wire<com.robotraconteur.geometry.Wrench> rr_wrench_sensor_value;
    public WrenchSensor_stub(WrappedServiceStub innerstub) : base(innerstub) {
    rr_sensor_data=new Pipe<SensorData>(innerstub.GetPipe("sensor_data"));
    rr_sensor_value=new Wire<double[]>(innerstub.GetWire("sensor_value"));
    rr_wrench_sensor_value=new Wire<com.robotraconteur.geometry.Wrench>(innerstub.GetWire("wrench_sensor_value"));
    }
    public com.robotraconteur.device.DeviceInfo device_info {
    get {
    return MessageElementUtil.UnpackStructure<com.robotraconteur.device.DeviceInfo>(rr_innerstub.PropertyGet("device_info"));
    }
    }
    public SensorInfo sensor_info {
    get {
    return MessageElementUtil.UnpackStructure<SensorInfo>(rr_innerstub.PropertyGet("sensor_info"));
    }
    }
    public object getf_param(string param_name) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("param_name",param_name));
    using(MessageElement rr_me=rr_innerstub.FunctionCall("getf_param",rr_param))
    {
    return MessageElementUtil.UnpackVarType(rr_me);
    }
    }
    }
    public void setf_param(string param_name, object value_) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("param_name",param_name));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackVarType("value",value_));
    using(MessageElement rr_me=rr_innerstub.FunctionCall("setf_param",rr_param))
    {
    }
    }
    }
    public override void DispatchEvent(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    }
    public Pipe<SensorData> sensor_data {
    get { return rr_sensor_data;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<double[]> sensor_value {
    get { return rr_sensor_value;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<com.robotraconteur.geometry.Wrench> wrench_sensor_value {
    get { return rr_wrench_sensor_value;  }
    set { throw new InvalidOperationException();}
    }
    public override MessageElement CallbackCall(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public virtual async Task<com.robotraconteur.device.DeviceInfo> async_get_device_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("device_info",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<com.robotraconteur.device.DeviceInfo>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<SensorInfo> async_get_sensor_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("sensor_info",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<SensorInfo>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<object> async_getf_param(string param_name,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("param_name",param_name));
    using(var rr_return = await rr_async_FunctionCall("getf_param",rr_param,rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackVarType(rr_return);
    return rr_ret;
    } } }
    public virtual async Task async_setf_param(string param_name, object value_,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("param_name",param_name));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackVarType("value",value_));
    using(var rr_return = await rr_async_FunctionCall("setf_param",rr_param,rr_timeout)) {
    } } }
}
public interface async_FreeformSensor : async_Sensor, com.robotraconteur.device.async_Device
{
    Task<com.robotraconteur.device.DeviceInfo> async_get_device_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<SensorInfo> async_get_sensor_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<object> async_getf_param(string param_name,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_setf_param(string param_name, object value_,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
}
public class FreeformSensor_stub : ServiceStub , FreeformSensor, async_FreeformSensor{
    private Pipe<SensorData> rr_sensor_data;
    private Wire<double[]> rr_sensor_value;
    private Wire<object> rr_freeform_sensor_value;
    public FreeformSensor_stub(WrappedServiceStub innerstub) : base(innerstub) {
    rr_sensor_data=new Pipe<SensorData>(innerstub.GetPipe("sensor_data"));
    rr_sensor_value=new Wire<double[]>(innerstub.GetWire("sensor_value"));
    rr_freeform_sensor_value=new Wire<object>(innerstub.GetWire("freeform_sensor_value"));
    }
    public com.robotraconteur.device.DeviceInfo device_info {
    get {
    return MessageElementUtil.UnpackStructure<com.robotraconteur.device.DeviceInfo>(rr_innerstub.PropertyGet("device_info"));
    }
    }
    public SensorInfo sensor_info {
    get {
    return MessageElementUtil.UnpackStructure<SensorInfo>(rr_innerstub.PropertyGet("sensor_info"));
    }
    }
    public object getf_param(string param_name) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("param_name",param_name));
    using(MessageElement rr_me=rr_innerstub.FunctionCall("getf_param",rr_param))
    {
    return MessageElementUtil.UnpackVarType(rr_me);
    }
    }
    }
    public void setf_param(string param_name, object value_) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("param_name",param_name));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackVarType("value",value_));
    using(MessageElement rr_me=rr_innerstub.FunctionCall("setf_param",rr_param))
    {
    }
    }
    }
    public override void DispatchEvent(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    }
    public Pipe<SensorData> sensor_data {
    get { return rr_sensor_data;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<double[]> sensor_value {
    get { return rr_sensor_value;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<object> freeform_sensor_value {
    get { return rr_freeform_sensor_value;  }
    set { throw new InvalidOperationException();}
    }
    public override MessageElement CallbackCall(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public virtual async Task<com.robotraconteur.device.DeviceInfo> async_get_device_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("device_info",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<com.robotraconteur.device.DeviceInfo>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<SensorInfo> async_get_sensor_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("sensor_info",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<SensorInfo>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<object> async_getf_param(string param_name,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("param_name",param_name));
    using(var rr_return = await rr_async_FunctionCall("getf_param",rr_param,rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackVarType(rr_return);
    return rr_ret;
    } } }
    public virtual async Task async_setf_param(string param_name, object value_,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("param_name",param_name));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackVarType("value",value_));
    using(var rr_return = await rr_async_FunctionCall("setf_param",rr_param,rr_timeout)) {
    } } }
}
public class Sensor_skel : ServiceSkel {
    protected Sensor obj;
    protected async_Sensor async_obj;
    public Sensor_skel(object o) : base(o)    {
    obj=(Sensor)o;
    async_obj = o as async_Sensor;
    }
    public override void ReleaseCastObject() { 
    obj=null;
    async_obj=null;
    base.ReleaseCastObject();
    }
    public override MessageElement CallGetProperty(string membername, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    case "device_info":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_device_info().ContinueWith(t => async_adapter.EndTask<com.robotraconteur.device.DeviceInfo>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    com.robotraconteur.device.DeviceInfo ret=obj.device_info;
    return MessageElementUtil.PackStructure("return",ret);
    }
    case "sensor_info":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_sensor_info().ContinueWith(t => async_adapter.EndTask<SensorInfo>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    SensorInfo ret=obj.sensor_info;
    return MessageElementUtil.PackStructure("return",ret);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void CallSetProperty(string membername, MessageElement m, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override MessageElement CallFunction(string rr_membername, vectorptr_messageelement rr_m, WrappedServiceSkelAsyncAdapter rr_async_adapter) {
    switch (rr_membername) {
    case "getf_param":
    {
    string param_name=MessageElementUtil.UnpackString(vectorptr_messageelement_util.FindElement(rr_m,"param_name"));
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_getf_param(param_name).ContinueWith(t => rr_async_adapter.EndTask<object>(t,async_ret => MessageElementUtil.PackVarType("return",async_ret)));
    return null;
    }
    object rr_ret=this.obj.getf_param(param_name);
    return MessageElementUtil.PackVarType("return",rr_ret);
    }
    case "setf_param":
    {
    string param_name=MessageElementUtil.UnpackString(vectorptr_messageelement_util.FindElement(rr_m,"param_name"));
    object value_=MessageElementUtil.UnpackVarType(vectorptr_messageelement_util.FindElement(rr_m,"value"));
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_setf_param(param_name, value_).ContinueWith(t => rr_async_adapter.EndTask(t,new MessageElement("return",(int)0)));
    return null;
    }
    this.obj.setf_param(param_name, value_);
    return new MessageElement("return",(int)0);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override object GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(Sensor)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(Sensor)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void InitPipeServers(object rrobj1) {
    obj=(Sensor)rrobj1;
    obj.sensor_data=new Pipe<SensorData>(innerskel.GetPipe("sensor_data"));
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(Sensor)rrobj1;
    }
    public override void InitWireServers(object rrobj1) {
    obj=(Sensor)rrobj1;
    obj.sensor_value=new Wire<double[]>(innerskel.GetWire("sensor_value"));
    }
    public override WrappedArrayMemoryDirector GetArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedMultiDimArrayMemoryDirector GetMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodArrayMemoryDirector GetPodArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodMultiDimArrayMemoryDirector GetPodMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedArrayMemoryDirector GetNamedArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedMultiDimArrayMemoryDirector GetNamedMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override string RRType { get { return "com.robotraconteur.sensor.Sensor"; } }
}
public class Vector2Sensor_skel : ServiceSkel {
    protected Vector2Sensor obj;
    protected async_Vector2Sensor async_obj;
    public Vector2Sensor_skel(object o) : base(o)    {
    obj=(Vector2Sensor)o;
    async_obj = o as async_Vector2Sensor;
    }
    public override void ReleaseCastObject() { 
    obj=null;
    async_obj=null;
    base.ReleaseCastObject();
    }
    public override MessageElement CallGetProperty(string membername, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    case "device_info":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_device_info().ContinueWith(t => async_adapter.EndTask<com.robotraconteur.device.DeviceInfo>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    com.robotraconteur.device.DeviceInfo ret=obj.device_info;
    return MessageElementUtil.PackStructure("return",ret);
    }
    case "sensor_info":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_sensor_info().ContinueWith(t => async_adapter.EndTask<SensorInfo>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    SensorInfo ret=obj.sensor_info;
    return MessageElementUtil.PackStructure("return",ret);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void CallSetProperty(string membername, MessageElement m, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override MessageElement CallFunction(string rr_membername, vectorptr_messageelement rr_m, WrappedServiceSkelAsyncAdapter rr_async_adapter) {
    switch (rr_membername) {
    case "getf_param":
    {
    string param_name=MessageElementUtil.UnpackString(vectorptr_messageelement_util.FindElement(rr_m,"param_name"));
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_getf_param(param_name).ContinueWith(t => rr_async_adapter.EndTask<object>(t,async_ret => MessageElementUtil.PackVarType("return",async_ret)));
    return null;
    }
    object rr_ret=this.obj.getf_param(param_name);
    return MessageElementUtil.PackVarType("return",rr_ret);
    }
    case "setf_param":
    {
    string param_name=MessageElementUtil.UnpackString(vectorptr_messageelement_util.FindElement(rr_m,"param_name"));
    object value_=MessageElementUtil.UnpackVarType(vectorptr_messageelement_util.FindElement(rr_m,"value"));
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_setf_param(param_name, value_).ContinueWith(t => rr_async_adapter.EndTask(t,new MessageElement("return",(int)0)));
    return null;
    }
    this.obj.setf_param(param_name, value_);
    return new MessageElement("return",(int)0);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override object GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(Vector2Sensor)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(Vector2Sensor)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void InitPipeServers(object rrobj1) {
    obj=(Vector2Sensor)rrobj1;
    obj.sensor_data=new Pipe<SensorData>(innerskel.GetPipe("sensor_data"));
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(Vector2Sensor)rrobj1;
    }
    public override void InitWireServers(object rrobj1) {
    obj=(Vector2Sensor)rrobj1;
    obj.sensor_value=new Wire<double[]>(innerskel.GetWire("sensor_value"));
    obj.vector2_sensor_value=new Wire<com.robotraconteur.geometry.Vector2>(innerskel.GetWire("vector2_sensor_value"));
    }
    public override WrappedArrayMemoryDirector GetArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedMultiDimArrayMemoryDirector GetMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodArrayMemoryDirector GetPodArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodMultiDimArrayMemoryDirector GetPodMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedArrayMemoryDirector GetNamedArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedMultiDimArrayMemoryDirector GetNamedMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override string RRType { get { return "com.robotraconteur.sensor.Vector2Sensor"; } }
}
public class Vector3Sensor_skel : ServiceSkel {
    protected Vector3Sensor obj;
    protected async_Vector3Sensor async_obj;
    public Vector3Sensor_skel(object o) : base(o)    {
    obj=(Vector3Sensor)o;
    async_obj = o as async_Vector3Sensor;
    }
    public override void ReleaseCastObject() { 
    obj=null;
    async_obj=null;
    base.ReleaseCastObject();
    }
    public override MessageElement CallGetProperty(string membername, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    case "device_info":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_device_info().ContinueWith(t => async_adapter.EndTask<com.robotraconteur.device.DeviceInfo>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    com.robotraconteur.device.DeviceInfo ret=obj.device_info;
    return MessageElementUtil.PackStructure("return",ret);
    }
    case "sensor_info":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_sensor_info().ContinueWith(t => async_adapter.EndTask<SensorInfo>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    SensorInfo ret=obj.sensor_info;
    return MessageElementUtil.PackStructure("return",ret);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void CallSetProperty(string membername, MessageElement m, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override MessageElement CallFunction(string rr_membername, vectorptr_messageelement rr_m, WrappedServiceSkelAsyncAdapter rr_async_adapter) {
    switch (rr_membername) {
    case "getf_param":
    {
    string param_name=MessageElementUtil.UnpackString(vectorptr_messageelement_util.FindElement(rr_m,"param_name"));
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_getf_param(param_name).ContinueWith(t => rr_async_adapter.EndTask<object>(t,async_ret => MessageElementUtil.PackVarType("return",async_ret)));
    return null;
    }
    object rr_ret=this.obj.getf_param(param_name);
    return MessageElementUtil.PackVarType("return",rr_ret);
    }
    case "setf_param":
    {
    string param_name=MessageElementUtil.UnpackString(vectorptr_messageelement_util.FindElement(rr_m,"param_name"));
    object value_=MessageElementUtil.UnpackVarType(vectorptr_messageelement_util.FindElement(rr_m,"value"));
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_setf_param(param_name, value_).ContinueWith(t => rr_async_adapter.EndTask(t,new MessageElement("return",(int)0)));
    return null;
    }
    this.obj.setf_param(param_name, value_);
    return new MessageElement("return",(int)0);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override object GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(Vector3Sensor)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(Vector3Sensor)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void InitPipeServers(object rrobj1) {
    obj=(Vector3Sensor)rrobj1;
    obj.sensor_data=new Pipe<SensorData>(innerskel.GetPipe("sensor_data"));
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(Vector3Sensor)rrobj1;
    }
    public override void InitWireServers(object rrobj1) {
    obj=(Vector3Sensor)rrobj1;
    obj.sensor_value=new Wire<double[]>(innerskel.GetWire("sensor_value"));
    obj.vector3_sensor_value=new Wire<com.robotraconteur.geometry.Vector3>(innerskel.GetWire("vector3_sensor_value"));
    }
    public override WrappedArrayMemoryDirector GetArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedMultiDimArrayMemoryDirector GetMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodArrayMemoryDirector GetPodArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodMultiDimArrayMemoryDirector GetPodMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedArrayMemoryDirector GetNamedArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedMultiDimArrayMemoryDirector GetNamedMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override string RRType { get { return "com.robotraconteur.sensor.Vector3Sensor"; } }
}
public class Vector6Sensor_skel : ServiceSkel {
    protected Vector6Sensor obj;
    protected async_Vector6Sensor async_obj;
    public Vector6Sensor_skel(object o) : base(o)    {
    obj=(Vector6Sensor)o;
    async_obj = o as async_Vector6Sensor;
    }
    public override void ReleaseCastObject() { 
    obj=null;
    async_obj=null;
    base.ReleaseCastObject();
    }
    public override MessageElement CallGetProperty(string membername, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    case "device_info":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_device_info().ContinueWith(t => async_adapter.EndTask<com.robotraconteur.device.DeviceInfo>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    com.robotraconteur.device.DeviceInfo ret=obj.device_info;
    return MessageElementUtil.PackStructure("return",ret);
    }
    case "sensor_info":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_sensor_info().ContinueWith(t => async_adapter.EndTask<SensorInfo>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    SensorInfo ret=obj.sensor_info;
    return MessageElementUtil.PackStructure("return",ret);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void CallSetProperty(string membername, MessageElement m, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override MessageElement CallFunction(string rr_membername, vectorptr_messageelement rr_m, WrappedServiceSkelAsyncAdapter rr_async_adapter) {
    switch (rr_membername) {
    case "getf_param":
    {
    string param_name=MessageElementUtil.UnpackString(vectorptr_messageelement_util.FindElement(rr_m,"param_name"));
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_getf_param(param_name).ContinueWith(t => rr_async_adapter.EndTask<object>(t,async_ret => MessageElementUtil.PackVarType("return",async_ret)));
    return null;
    }
    object rr_ret=this.obj.getf_param(param_name);
    return MessageElementUtil.PackVarType("return",rr_ret);
    }
    case "setf_param":
    {
    string param_name=MessageElementUtil.UnpackString(vectorptr_messageelement_util.FindElement(rr_m,"param_name"));
    object value_=MessageElementUtil.UnpackVarType(vectorptr_messageelement_util.FindElement(rr_m,"value"));
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_setf_param(param_name, value_).ContinueWith(t => rr_async_adapter.EndTask(t,new MessageElement("return",(int)0)));
    return null;
    }
    this.obj.setf_param(param_name, value_);
    return new MessageElement("return",(int)0);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override object GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(Vector6Sensor)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(Vector6Sensor)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void InitPipeServers(object rrobj1) {
    obj=(Vector6Sensor)rrobj1;
    obj.sensor_data=new Pipe<SensorData>(innerskel.GetPipe("sensor_data"));
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(Vector6Sensor)rrobj1;
    }
    public override void InitWireServers(object rrobj1) {
    obj=(Vector6Sensor)rrobj1;
    obj.sensor_value=new Wire<double[]>(innerskel.GetWire("sensor_value"));
    obj.vector6_sensor_value=new Wire<com.robotraconteur.geometry.Vector6>(innerskel.GetWire("vector6_sensor_value"));
    }
    public override WrappedArrayMemoryDirector GetArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedMultiDimArrayMemoryDirector GetMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodArrayMemoryDirector GetPodArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodMultiDimArrayMemoryDirector GetPodMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedArrayMemoryDirector GetNamedArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedMultiDimArrayMemoryDirector GetNamedMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override string RRType { get { return "com.robotraconteur.sensor.Vector6Sensor"; } }
}
public class WrenchSensor_skel : ServiceSkel {
    protected WrenchSensor obj;
    protected async_WrenchSensor async_obj;
    public WrenchSensor_skel(object o) : base(o)    {
    obj=(WrenchSensor)o;
    async_obj = o as async_WrenchSensor;
    }
    public override void ReleaseCastObject() { 
    obj=null;
    async_obj=null;
    base.ReleaseCastObject();
    }
    public override MessageElement CallGetProperty(string membername, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    case "device_info":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_device_info().ContinueWith(t => async_adapter.EndTask<com.robotraconteur.device.DeviceInfo>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    com.robotraconteur.device.DeviceInfo ret=obj.device_info;
    return MessageElementUtil.PackStructure("return",ret);
    }
    case "sensor_info":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_sensor_info().ContinueWith(t => async_adapter.EndTask<SensorInfo>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    SensorInfo ret=obj.sensor_info;
    return MessageElementUtil.PackStructure("return",ret);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void CallSetProperty(string membername, MessageElement m, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override MessageElement CallFunction(string rr_membername, vectorptr_messageelement rr_m, WrappedServiceSkelAsyncAdapter rr_async_adapter) {
    switch (rr_membername) {
    case "getf_param":
    {
    string param_name=MessageElementUtil.UnpackString(vectorptr_messageelement_util.FindElement(rr_m,"param_name"));
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_getf_param(param_name).ContinueWith(t => rr_async_adapter.EndTask<object>(t,async_ret => MessageElementUtil.PackVarType("return",async_ret)));
    return null;
    }
    object rr_ret=this.obj.getf_param(param_name);
    return MessageElementUtil.PackVarType("return",rr_ret);
    }
    case "setf_param":
    {
    string param_name=MessageElementUtil.UnpackString(vectorptr_messageelement_util.FindElement(rr_m,"param_name"));
    object value_=MessageElementUtil.UnpackVarType(vectorptr_messageelement_util.FindElement(rr_m,"value"));
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_setf_param(param_name, value_).ContinueWith(t => rr_async_adapter.EndTask(t,new MessageElement("return",(int)0)));
    return null;
    }
    this.obj.setf_param(param_name, value_);
    return new MessageElement("return",(int)0);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override object GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(WrenchSensor)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(WrenchSensor)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void InitPipeServers(object rrobj1) {
    obj=(WrenchSensor)rrobj1;
    obj.sensor_data=new Pipe<SensorData>(innerskel.GetPipe("sensor_data"));
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(WrenchSensor)rrobj1;
    }
    public override void InitWireServers(object rrobj1) {
    obj=(WrenchSensor)rrobj1;
    obj.sensor_value=new Wire<double[]>(innerskel.GetWire("sensor_value"));
    obj.wrench_sensor_value=new Wire<com.robotraconteur.geometry.Wrench>(innerskel.GetWire("wrench_sensor_value"));
    }
    public override WrappedArrayMemoryDirector GetArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedMultiDimArrayMemoryDirector GetMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodArrayMemoryDirector GetPodArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodMultiDimArrayMemoryDirector GetPodMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedArrayMemoryDirector GetNamedArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedMultiDimArrayMemoryDirector GetNamedMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override string RRType { get { return "com.robotraconteur.sensor.WrenchSensor"; } }
}
public class FreeformSensor_skel : ServiceSkel {
    protected FreeformSensor obj;
    protected async_FreeformSensor async_obj;
    public FreeformSensor_skel(object o) : base(o)    {
    obj=(FreeformSensor)o;
    async_obj = o as async_FreeformSensor;
    }
    public override void ReleaseCastObject() { 
    obj=null;
    async_obj=null;
    base.ReleaseCastObject();
    }
    public override MessageElement CallGetProperty(string membername, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    case "device_info":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_device_info().ContinueWith(t => async_adapter.EndTask<com.robotraconteur.device.DeviceInfo>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    com.robotraconteur.device.DeviceInfo ret=obj.device_info;
    return MessageElementUtil.PackStructure("return",ret);
    }
    case "sensor_info":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_sensor_info().ContinueWith(t => async_adapter.EndTask<SensorInfo>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    SensorInfo ret=obj.sensor_info;
    return MessageElementUtil.PackStructure("return",ret);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void CallSetProperty(string membername, MessageElement m, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override MessageElement CallFunction(string rr_membername, vectorptr_messageelement rr_m, WrappedServiceSkelAsyncAdapter rr_async_adapter) {
    switch (rr_membername) {
    case "getf_param":
    {
    string param_name=MessageElementUtil.UnpackString(vectorptr_messageelement_util.FindElement(rr_m,"param_name"));
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_getf_param(param_name).ContinueWith(t => rr_async_adapter.EndTask<object>(t,async_ret => MessageElementUtil.PackVarType("return",async_ret)));
    return null;
    }
    object rr_ret=this.obj.getf_param(param_name);
    return MessageElementUtil.PackVarType("return",rr_ret);
    }
    case "setf_param":
    {
    string param_name=MessageElementUtil.UnpackString(vectorptr_messageelement_util.FindElement(rr_m,"param_name"));
    object value_=MessageElementUtil.UnpackVarType(vectorptr_messageelement_util.FindElement(rr_m,"value"));
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_setf_param(param_name, value_).ContinueWith(t => rr_async_adapter.EndTask(t,new MessageElement("return",(int)0)));
    return null;
    }
    this.obj.setf_param(param_name, value_);
    return new MessageElement("return",(int)0);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override object GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(FreeformSensor)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(FreeformSensor)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void InitPipeServers(object rrobj1) {
    obj=(FreeformSensor)rrobj1;
    obj.sensor_data=new Pipe<SensorData>(innerskel.GetPipe("sensor_data"));
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(FreeformSensor)rrobj1;
    }
    public override void InitWireServers(object rrobj1) {
    obj=(FreeformSensor)rrobj1;
    obj.sensor_value=new Wire<double[]>(innerskel.GetWire("sensor_value"));
    obj.freeform_sensor_value=new Wire<object>(innerskel.GetWire("freeform_sensor_value"));
    }
    public override WrappedArrayMemoryDirector GetArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedMultiDimArrayMemoryDirector GetMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodArrayMemoryDirector GetPodArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodMultiDimArrayMemoryDirector GetPodMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedArrayMemoryDirector GetNamedArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedMultiDimArrayMemoryDirector GetNamedMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override string RRType { get { return "com.robotraconteur.sensor.FreeformSensor"; } }
}
public class Sensor_default_impl : Sensor{
    protected PipeBroadcaster<SensorData> rrvar_sensor_data;
    protected WireBroadcaster<double[]> rrvar_sensor_value;
    public virtual com.robotraconteur.device.DeviceInfo device_info {get; set;} = default(com.robotraconteur.device.DeviceInfo);
    public virtual SensorInfo sensor_info {get; set;} = default(SensorInfo);
    public virtual object getf_param(string param_name) {
    throw new NotImplementedException();    }
    public virtual void setf_param(string param_name, object value_) {
    throw new NotImplementedException();    }
    public virtual Pipe<SensorData> sensor_data {
    get { return rrvar_sensor_data.Pipe;  }
    set {
    if (rrvar_sensor_data!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_sensor_data= new PipeBroadcaster<SensorData>(value);
    }
    }
    public virtual Wire<double[]> sensor_value {
    get { return rrvar_sensor_value.Wire;  }
    set {
    if (rrvar_sensor_value!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_sensor_value= new WireBroadcaster<double[]>(value);
    }
    }
}
public class Vector2Sensor_default_impl : Vector2Sensor{
    protected PipeBroadcaster<SensorData> rrvar_sensor_data;
    protected WireBroadcaster<double[]> rrvar_sensor_value;
    protected WireBroadcaster<com.robotraconteur.geometry.Vector2> rrvar_vector2_sensor_value;
    public virtual com.robotraconteur.device.DeviceInfo device_info {get; set;} = default(com.robotraconteur.device.DeviceInfo);
    public virtual SensorInfo sensor_info {get; set;} = default(SensorInfo);
    public virtual object getf_param(string param_name) {
    throw new NotImplementedException();    }
    public virtual void setf_param(string param_name, object value_) {
    throw new NotImplementedException();    }
    public virtual Pipe<SensorData> sensor_data {
    get { return rrvar_sensor_data.Pipe;  }
    set {
    if (rrvar_sensor_data!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_sensor_data= new PipeBroadcaster<SensorData>(value);
    }
    }
    public virtual Wire<double[]> sensor_value {
    get { return rrvar_sensor_value.Wire;  }
    set {
    if (rrvar_sensor_value!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_sensor_value= new WireBroadcaster<double[]>(value);
    }
    }
    public virtual Wire<com.robotraconteur.geometry.Vector2> vector2_sensor_value {
    get { return rrvar_vector2_sensor_value.Wire;  }
    set {
    if (rrvar_vector2_sensor_value!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_vector2_sensor_value= new WireBroadcaster<com.robotraconteur.geometry.Vector2>(value);
    }
    }
}
public class Vector3Sensor_default_impl : Vector3Sensor{
    protected PipeBroadcaster<SensorData> rrvar_sensor_data;
    protected WireBroadcaster<double[]> rrvar_sensor_value;
    protected WireBroadcaster<com.robotraconteur.geometry.Vector3> rrvar_vector3_sensor_value;
    public virtual com.robotraconteur.device.DeviceInfo device_info {get; set;} = default(com.robotraconteur.device.DeviceInfo);
    public virtual SensorInfo sensor_info {get; set;} = default(SensorInfo);
    public virtual object getf_param(string param_name) {
    throw new NotImplementedException();    }
    public virtual void setf_param(string param_name, object value_) {
    throw new NotImplementedException();    }
    public virtual Pipe<SensorData> sensor_data {
    get { return rrvar_sensor_data.Pipe;  }
    set {
    if (rrvar_sensor_data!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_sensor_data= new PipeBroadcaster<SensorData>(value);
    }
    }
    public virtual Wire<double[]> sensor_value {
    get { return rrvar_sensor_value.Wire;  }
    set {
    if (rrvar_sensor_value!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_sensor_value= new WireBroadcaster<double[]>(value);
    }
    }
    public virtual Wire<com.robotraconteur.geometry.Vector3> vector3_sensor_value {
    get { return rrvar_vector3_sensor_value.Wire;  }
    set {
    if (rrvar_vector3_sensor_value!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_vector3_sensor_value= new WireBroadcaster<com.robotraconteur.geometry.Vector3>(value);
    }
    }
}
public class Vector6Sensor_default_impl : Vector6Sensor{
    protected PipeBroadcaster<SensorData> rrvar_sensor_data;
    protected WireBroadcaster<double[]> rrvar_sensor_value;
    protected WireBroadcaster<com.robotraconteur.geometry.Vector6> rrvar_vector6_sensor_value;
    public virtual com.robotraconteur.device.DeviceInfo device_info {get; set;} = default(com.robotraconteur.device.DeviceInfo);
    public virtual SensorInfo sensor_info {get; set;} = default(SensorInfo);
    public virtual object getf_param(string param_name) {
    throw new NotImplementedException();    }
    public virtual void setf_param(string param_name, object value_) {
    throw new NotImplementedException();    }
    public virtual Pipe<SensorData> sensor_data {
    get { return rrvar_sensor_data.Pipe;  }
    set {
    if (rrvar_sensor_data!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_sensor_data= new PipeBroadcaster<SensorData>(value);
    }
    }
    public virtual Wire<double[]> sensor_value {
    get { return rrvar_sensor_value.Wire;  }
    set {
    if (rrvar_sensor_value!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_sensor_value= new WireBroadcaster<double[]>(value);
    }
    }
    public virtual Wire<com.robotraconteur.geometry.Vector6> vector6_sensor_value {
    get { return rrvar_vector6_sensor_value.Wire;  }
    set {
    if (rrvar_vector6_sensor_value!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_vector6_sensor_value= new WireBroadcaster<com.robotraconteur.geometry.Vector6>(value);
    }
    }
}
public class WrenchSensor_default_impl : WrenchSensor{
    protected PipeBroadcaster<SensorData> rrvar_sensor_data;
    protected WireBroadcaster<double[]> rrvar_sensor_value;
    protected WireBroadcaster<com.robotraconteur.geometry.Wrench> rrvar_wrench_sensor_value;
    public virtual com.robotraconteur.device.DeviceInfo device_info {get; set;} = default(com.robotraconteur.device.DeviceInfo);
    public virtual SensorInfo sensor_info {get; set;} = default(SensorInfo);
    public virtual object getf_param(string param_name) {
    throw new NotImplementedException();    }
    public virtual void setf_param(string param_name, object value_) {
    throw new NotImplementedException();    }
    public virtual Pipe<SensorData> sensor_data {
    get { return rrvar_sensor_data.Pipe;  }
    set {
    if (rrvar_sensor_data!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_sensor_data= new PipeBroadcaster<SensorData>(value);
    }
    }
    public virtual Wire<double[]> sensor_value {
    get { return rrvar_sensor_value.Wire;  }
    set {
    if (rrvar_sensor_value!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_sensor_value= new WireBroadcaster<double[]>(value);
    }
    }
    public virtual Wire<com.robotraconteur.geometry.Wrench> wrench_sensor_value {
    get { return rrvar_wrench_sensor_value.Wire;  }
    set {
    if (rrvar_wrench_sensor_value!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_wrench_sensor_value= new WireBroadcaster<com.robotraconteur.geometry.Wrench>(value);
    }
    }
}
public class FreeformSensor_default_impl : FreeformSensor{
    protected PipeBroadcaster<SensorData> rrvar_sensor_data;
    protected WireBroadcaster<double[]> rrvar_sensor_value;
    protected WireBroadcaster<object> rrvar_freeform_sensor_value;
    public virtual com.robotraconteur.device.DeviceInfo device_info {get; set;} = default(com.robotraconteur.device.DeviceInfo);
    public virtual SensorInfo sensor_info {get; set;} = default(SensorInfo);
    public virtual object getf_param(string param_name) {
    throw new NotImplementedException();    }
    public virtual void setf_param(string param_name, object value_) {
    throw new NotImplementedException();    }
    public virtual Pipe<SensorData> sensor_data {
    get { return rrvar_sensor_data.Pipe;  }
    set {
    if (rrvar_sensor_data!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_sensor_data= new PipeBroadcaster<SensorData>(value);
    }
    }
    public virtual Wire<double[]> sensor_value {
    get { return rrvar_sensor_value.Wire;  }
    set {
    if (rrvar_sensor_value!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_sensor_value= new WireBroadcaster<double[]>(value);
    }
    }
    public virtual Wire<object> freeform_sensor_value {
    get { return rrvar_freeform_sensor_value.Wire;  }
    set {
    if (rrvar_freeform_sensor_value!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_freeform_sensor_value= new WireBroadcaster<object>(value);
    }
    }
}
public static class RRExtensions{
}
}
namespace com.robotraconteur.sensordata
{
public class SensorDataHeader
{
    public com.robotraconteur.datetime.TimeSpec2 ts;
    public ulong seqno;
    public SensorDataSourceInfo source_info;
}

public class SensorDataSourceInfo
{
    public com.robotraconteur.identifier.Identifier source;
    public com.robotraconteur.geometry.Pose source_world_pose;
    public string source_config_nonce;
    public Dictionary<string,object> source_params;
    public Dictionary<string,object> extended;
}

}
namespace com.robotraconteur.sensordata
{
public class com__robotraconteur__sensordataFactory : ServiceFactory
{
    public override string DefString()
{
    const string s="service com.robotraconteur.sensordata\n\nstdver 0.10\n\nimport com.robotraconteur.datetime\nimport com.robotraconteur.identifier\nimport com.robotraconteur.geometry\n\nusing com.robotraconteur.datetime.TimeSpec2\nusing com.robotraconteur.identifier.Identifier\nusing com.robotraconteur.geometry.Pose\n\nstruct SensorDataHeader\nfield TimeSpec2 ts\nfield uint64 seqno\nfield SensorDataSourceInfo source_info\nend\n\nstruct SensorDataSourceInfo\nfield Identifier source\nfield Pose source_world_pose\nfield string source_config_nonce\nfield varvalue{string} source_params\nfield varvalue{string} extended\nend\n\n";
    return s;
    }
    public override string GetServiceName() {return "com.robotraconteur.sensordata";}
    public SensorDataHeader_stub SensorDataHeader_stubentry;
    public SensorDataSourceInfo_stub SensorDataSourceInfo_stubentry;
    public com__robotraconteur__sensordataFactory()
{
    SensorDataHeader_stubentry=new SensorDataHeader_stub(this);
    SensorDataSourceInfo_stubentry=new SensorDataSourceInfo_stub(this);
    }
    public override IStructureStub FindStructureStub(string objecttype)
    {
    if (objecttype=="SensorDataHeader")    return SensorDataHeader_stubentry;
    if (objecttype=="SensorDataSourceInfo")    return SensorDataSourceInfo_stubentry;
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public override IPodStub FindPodStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override INamedArrayStub FindNamedArrayStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override ServiceStub CreateStub(WrappedServiceStub innerstub) {
    string objecttype=innerstub.RR_objecttype.GetServiceDefinition().Name + "." + innerstub.RR_objecttype.Name;    string objshort;
    if (CompareNamespace(objecttype, out objshort)) {
    switch (objshort) {
    default:
    break;
    }
    } else {
    string ext_service_type=RobotRaconteurNode.SplitQualifiedName(objecttype).Item1;
    return RobotRaconteurNode.s.GetServiceType(ext_service_type).CreateStub(innerstub);
    }
    throw new ServiceException("Could not create stub");
    }
    public override ServiceSkel CreateSkel(object obj) {
    string objtype = RobotRaconteurNode.GetTypeString(ServiceSkelUtil.FindParentInterface(obj.GetType()));
    string objshort;
    if (CompareNamespace(objtype, out objshort)) {
    switch(objshort) {
    default:
    break;
    }
    } else {
    string ext_service_type=RobotRaconteurNode.SplitQualifiedName(objtype).Item1;
    return RobotRaconteurNode.s.GetServiceFactory(ext_service_type).CreateSkel(obj);
    }
    throw new ServiceException("Could not create skel");
    }
    public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp){
    if (rr_exp==null) return rr_exp;
    string rr_type=rr_exp.Error;
    if (!rr_type.Contains(".")) return rr_exp;
    string rr_stype;
    if (CompareNamespace(rr_type, out rr_stype)) {
    } else {
    return RobotRaconteurNode.s.DownCastException(rr_exp); 
    }
    return rr_exp;
    }
}

public class SensorDataHeader_stub : IStructureStub {
    public SensorDataHeader_stub(com__robotraconteur__sensordataFactory d) {def=d;}
    private com__robotraconteur__sensordataFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    SensorDataHeader s = (SensorDataHeader)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.TimeSpec2>("ts",ref s.ts));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<ulong>("seqno",s.seqno));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("source_info",s.source_info));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.sensordata.SensorDataHeader",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    SensorDataHeader s=new SensorDataHeader();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.ts =MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.TimeSpec2>(MessageElement.FindElement(mm,"ts"));
    s.seqno =(MessageElementUtil.UnpackScalar<ulong>(MessageElement.FindElement(mm,"seqno")));
    s.source_info =MessageElementUtil.UnpackStructure<SensorDataSourceInfo>(MessageElement.FindElement(mm,"source_info"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class SensorDataSourceInfo_stub : IStructureStub {
    public SensorDataSourceInfo_stub(com__robotraconteur__sensordataFactory d) {def=d;}
    private com__robotraconteur__sensordataFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    SensorDataSourceInfo s = (SensorDataSourceInfo)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("source",s.source));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Pose>("source_world_pose",ref s.source_world_pose));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackString("source_config_nonce",s.source_config_nonce));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackMapType<string,object>("source_params",s.source_params));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackMapType<string,object>("extended",s.extended));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.sensordata.SensorDataSourceInfo",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    SensorDataSourceInfo s=new SensorDataSourceInfo();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.source =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(MessageElement.FindElement(mm,"source"));
    s.source_world_pose =MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.Pose>(MessageElement.FindElement(mm,"source_world_pose"));
    s.source_config_nonce =MessageElementUtil.UnpackString(MessageElement.FindElement(mm,"source_config_nonce"));
    s.source_params =MessageElementUtil.UnpackMap<string,object>(MessageElement.FindElement(mm,"source_params"));
    s.extended =MessageElementUtil.UnpackMap<string,object>(MessageElement.FindElement(mm,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public static class RRExtensions{
}
}
namespace com.robotraconteur.servo
{
public class ServoInfo
{
    public com.robotraconteur.device.DeviceInfo device_info;
    public ServoTypeCode servo_type;
    public uint capabilities;
    public uint axis_count;
    public List<com.robotraconteur.robotics.joints.JointPositionUnits> position_units;
    public List<com.robotraconteur.robotics.joints.JointEffortUnits> effort_units;
    public double[] position_min;
    public double[] position_max;
    public double[] velocity_min;
    public double[] velocity_max;
    public double[] acceleration_min;
    public double[] acceleration_max;
    public double[] torque_min;
    public double[] torque_max;
    public double[] gear_ratio;
    public double[] sensor_resolution;
    public double[] effort_command_resolution;
    public List<com.robotraconteur.param.ParameterInfo> parameter_info;
    public List<com.robotraconteur.signal.SignalInfo> signal_info;
    public Dictionary<string,object> extended;
}

public class ServoState
{
    public com.robotraconteur.datetime.TimeSpec3 ts;
    public ulong seqno;
    public uint servo_state_flags;
    public ServoMode mode;
    public double[] position;
    public double[] velocity;
    public double[] acceleration;
    public double[] effort;
    public double[] position_command;
    public double[] velocity_command;
    public double[] effort_command;
}

public class ServoStateSensorData
{
    public com.robotraconteur.sensordata.SensorDataHeader data_header;
    public ServoState servo_state;
    public Dictionary<string,object> extended;
}

public class ServoCommand
{
    public ulong seqno;
    public ulong status_seqno;
    public double[] command;
}

[RobotRaconteurServiceObjectInterface()]
public interface Servo : com.robotraconteur.device.Device, com.robotraconteur.device.clock.DeviceClock, com.robotraconteur.device.isoch.IsochDevice
{
    com.robotraconteur.device.DeviceInfo device_info { get; 	}
    ServoInfo servo_info { get; 	}
    ServoMode mode { get;  set; 	}
    com.robotraconteur.device.isoch.IsochInfo isoch_info { get; 	}
    uint isoch_downsample { get;  set; 	}
    void halt();
    void trapezoidal_move(double[] target_pos, double[] target_vel, double[] vel, double[] accel);
    object getf_signal(string signal_name);
    void setf_signal(string signal_name, object value_);
    object getf_param(string param_name);
    void setf_param(string param_name, object value_);
    Pipe<ServoStateSensorData> servo_state_sensor_data{ get; set; }
    Wire<double[]> position{ get; set; }
    Wire<double[]> velocity{ get; set; }
    Wire<ServoState> servo_state{ get; set; }
    Wire<ServoCommand> position_command{ get; set; }
    Wire<ServoCommand> velocity_command{ get; set; }
    Wire<ServoCommand> effort_command{ get; set; }
    Wire<com.robotraconteur.device.clock.DeviceTime> device_clock_now{ get; set; }
}

public static class com__robotraconteur__servoConstants 
{
}
    public enum ServoTypeCode
    {
    unknown = 0,
    generic_revolute = 1,
    generic_prismatic = 2,
    revolute_electric = 3,
    prismatic_electric = 4,
    rc_servo = 5
    };
    public enum ServoCapabilities
    {
    unknown = 0,
    position_command = 0x1,
    velocity_command = 0x2,
    effort_command = 0x4,
    trapezoidal_command = 0x8,
    signals = 0x1000
    };
    public enum ServoMode
    {
    error = -2,
    disabled = -1,
    halt = 0,
    position_command = 1,
    velocity_command = 2,
    effort_command = 3,
    trapezoidal_command = 4
    };
    public enum ServoStateFlags
    {
    unknown = 0,
    ready = 0x1,
    streaming = 0x2,
    warning = 0x4,
    error = 0x8,
    fatal_error = 0x10,
    e_stop = 0x20,
    homed = 0x40,
    homing_required = 0x80,
    communication_failure = 0x100,
    valid_command = 0x200,
    enabled = 0x400
    };
}
namespace com.robotraconteur.servo
{
public class com__robotraconteur__servoFactory : ServiceFactory
{
    public override string DefString()
{
    const string s="service com.robotraconteur.servo\n\nstdver 0.10\n\nimport com.robotraconteur.sensordata\nimport com.robotraconteur.device\nimport com.robotraconteur.signal\nimport com.robotraconteur.param\nimport com.robotraconteur.robotics.joints\nimport com.robotraconteur.device.isoch\nimport com.robotraconteur.device.clock\nimport com.robotraconteur.datetime\n\nusing com.robotraconteur.sensordata.SensorDataHeader\nusing com.robotraconteur.device.DeviceInfo\nusing com.robotraconteur.device.Device\nusing com.robotraconteur.signal.SignalInfo\nusing com.robotraconteur.param.ParameterInfo\nusing com.robotraconteur.robotics.joints.JointPositionUnits\nusing com.robotraconteur.robotics.joints.JointEffortUnits\nusing com.robotraconteur.device.isoch.IsochDevice\nusing com.robotraconteur.device.isoch.IsochInfo\nusing com.robotraconteur.device.clock.DeviceClock\nusing com.robotraconteur.device.clock.DeviceTime\nusing com.robotraconteur.datetime.TimeSpec3\n\nenum ServoTypeCode\nunknown = 0,\ngeneric_revolute,\ngeneric_prismatic,\nrevolute_electric,\nprismatic_electric,\nrc_servo\nend\n\nenum ServoCapabilities\nunknown = 0,\nposition_command = 0x1,\nvelocity_command = 0x2,\neffort_command = 0x4,\ntrapezoidal_command = 0x8,\nsignals = 0x1000\nend\n\nenum ServoMode\nerror = -2,\ndisabled = -1,\nhalt = 0,\nposition_command,\nvelocity_command,\neffort_command,\ntrapezoidal_command\nend\n\nenum ServoStateFlags\nunknown = 0,\nready = 0x1,\nstreaming = 0x2,\nwarning = 0x4,\nerror = 0x8,\nfatal_error = 0x10,\ne_stop = 0x20,\nhomed = 0x40,\nhoming_required = 0x80,\ncommunication_failure = 0x100,\nvalid_command = 0x200,\nenabled = 0x400\nend\n\nstruct ServoInfo\nfield DeviceInfo device_info\nfield ServoTypeCode servo_type\nfield uint32 capabilities\nfield uint32 axis_count\nfield JointPositionUnits{list} position_units\nfield JointEffortUnits{list} effort_units\nfield double[] position_min\nfield double[] position_max\nfield double[] velocity_min\nfield double[] velocity_max\nfield double[] acceleration_min\nfield double[] acceleration_max\nfield double[] torque_min\nfield double[] torque_max\nfield double[] gear_ratio\nfield double[] sensor_resolution\nfield double[] effort_command_resolution\nfield ParameterInfo{list} parameter_info\nfield SignalInfo{list} signal_info\nfield varvalue{string} extended\nend\n\nstruct ServoState\nfield TimeSpec3 ts\nfield uint64 seqno\nfield uint32 servo_state_flags\nfield ServoMode mode\nfield double[] position\nfield double[] velocity\nfield double[] acceleration\nfield double[] effort\nfield double[] position_command\nfield double[] velocity_command\nfield double[] effort_command\nend\n\nstruct ServoStateSensorData\nfield SensorDataHeader data_header\nfield ServoState servo_state\nfield varvalue{string} extended\nend\n\nstruct ServoCommand\nfield uint64 seqno\nfield uint64 status_seqno\nfield double[] command\nend\n\nobject Servo\nimplements Device\nimplements DeviceClock\nimplements IsochDevice\nproperty DeviceInfo device_info [readonly,nolock]\nfunction void halt() [urgent,nolock]\nproperty ServoInfo servo_info [readonly,nolock]\nproperty ServoMode mode [nolockread]\nwire double[] position [readonly,nolock]\nwire double[] velocity [readonly, nolock]\nwire ServoState servo_state [readonly,nolock]\npipe ServoStateSensorData servo_state_sensor_data [readonly,nolock]\nwire ServoCommand position_command [writeonly]\nwire ServoCommand velocity_command [writeonly]\nwire ServoCommand effort_command [writeonly]\nfunction void trapezoidal_move(double[] target_pos, double[] target_vel, double[] vel, double[] accel)\nproperty IsochInfo isoch_info [readonly,nolock]\nproperty uint32 isoch_downsample [perclient]\nwire DeviceTime device_clock_now [readonly,nolock]\nfunction varvalue getf_signal(string signal_name)\nfunction void setf_signal(string signal_name, varvalue value)\nfunction varvalue getf_param(string param_name)\nfunction void setf_param(string param_name, varvalue value)\nend\n\n";
    return s;
    }
    public override string GetServiceName() {return "com.robotraconteur.servo";}
    public ServoInfo_stub ServoInfo_stubentry;
    public ServoState_stub ServoState_stubentry;
    public ServoStateSensorData_stub ServoStateSensorData_stubentry;
    public ServoCommand_stub ServoCommand_stubentry;
    public com__robotraconteur__servoFactory()
{
    ServoInfo_stubentry=new ServoInfo_stub(this);
    ServoState_stubentry=new ServoState_stub(this);
    ServoStateSensorData_stubentry=new ServoStateSensorData_stub(this);
    ServoCommand_stubentry=new ServoCommand_stub(this);
    }
    public override IStructureStub FindStructureStub(string objecttype)
    {
    if (objecttype=="ServoInfo")    return ServoInfo_stubentry;
    if (objecttype=="ServoState")    return ServoState_stubentry;
    if (objecttype=="ServoStateSensorData")    return ServoStateSensorData_stubentry;
    if (objecttype=="ServoCommand")    return ServoCommand_stubentry;
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public override IPodStub FindPodStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override INamedArrayStub FindNamedArrayStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override ServiceStub CreateStub(WrappedServiceStub innerstub) {
    string objecttype=innerstub.RR_objecttype.GetServiceDefinition().Name + "." + innerstub.RR_objecttype.Name;    string objshort;
    if (CompareNamespace(objecttype, out objshort)) {
    switch (objshort) {
    case "Servo":
    return new Servo_stub(innerstub);
    default:
    break;
    }
    } else {
    string ext_service_type=RobotRaconteurNode.SplitQualifiedName(objecttype).Item1;
    return RobotRaconteurNode.s.GetServiceType(ext_service_type).CreateStub(innerstub);
    }
    throw new ServiceException("Could not create stub");
    }
    public override ServiceSkel CreateSkel(object obj) {
    string objtype = RobotRaconteurNode.GetTypeString(ServiceSkelUtil.FindParentInterface(obj.GetType()));
    string objshort;
    if (CompareNamespace(objtype, out objshort)) {
    switch(objshort) {
    case "Servo":
    return new Servo_skel((Servo)obj);
    default:
    break;
    }
    } else {
    string ext_service_type=RobotRaconteurNode.SplitQualifiedName(objtype).Item1;
    return RobotRaconteurNode.s.GetServiceFactory(ext_service_type).CreateSkel(obj);
    }
    throw new ServiceException("Could not create skel");
    }
    public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp){
    if (rr_exp==null) return rr_exp;
    string rr_type=rr_exp.Error;
    if (!rr_type.Contains(".")) return rr_exp;
    string rr_stype;
    if (CompareNamespace(rr_type, out rr_stype)) {
    } else {
    return RobotRaconteurNode.s.DownCastException(rr_exp); 
    }
    return rr_exp;
    }
}

public class ServoInfo_stub : IStructureStub {
    public ServoInfo_stub(com__robotraconteur__servoFactory d) {def=d;}
    private com__robotraconteur__servoFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    ServoInfo s = (ServoInfo)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("device_info",s.device_info));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackEnum<ServoTypeCode>("servo_type",s.servo_type));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<uint>("capabilities",s.capabilities));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<uint>("axis_count",s.axis_count));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackListType<com.robotraconteur.robotics.joints.JointPositionUnits>("position_units",s.position_units));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackListType<com.robotraconteur.robotics.joints.JointEffortUnits>("effort_units",s.effort_units));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackArray<double>("position_min",s.position_min));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackArray<double>("position_max",s.position_max));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackArray<double>("velocity_min",s.velocity_min));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackArray<double>("velocity_max",s.velocity_max));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackArray<double>("acceleration_min",s.acceleration_min));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackArray<double>("acceleration_max",s.acceleration_max));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackArray<double>("torque_min",s.torque_min));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackArray<double>("torque_max",s.torque_max));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackArray<double>("gear_ratio",s.gear_ratio));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackArray<double>("sensor_resolution",s.sensor_resolution));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackArray<double>("effort_command_resolution",s.effort_command_resolution));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackListType<com.robotraconteur.param.ParameterInfo>("parameter_info",s.parameter_info));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackListType<com.robotraconteur.signal.SignalInfo>("signal_info",s.signal_info));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackMapType<string,object>("extended",s.extended));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.servo.ServoInfo",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    ServoInfo s=new ServoInfo();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.device_info =MessageElementUtil.UnpackStructure<com.robotraconteur.device.DeviceInfo>(MessageElement.FindElement(mm,"device_info"));
    s.servo_type =MessageElementUtil.UnpackEnum<ServoTypeCode>(MessageElement.FindElement(mm,"servo_type"));
    s.capabilities =(MessageElementUtil.UnpackScalar<uint>(MessageElement.FindElement(mm,"capabilities")));
    s.axis_count =(MessageElementUtil.UnpackScalar<uint>(MessageElement.FindElement(mm,"axis_count")));
    s.position_units =MessageElementUtil.UnpackList<com.robotraconteur.robotics.joints.JointPositionUnits>(MessageElement.FindElement(mm,"position_units"));
    s.effort_units =MessageElementUtil.UnpackList<com.robotraconteur.robotics.joints.JointEffortUnits>(MessageElement.FindElement(mm,"effort_units"));
    s.position_min =MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(mm,"position_min"));
    s.position_max =MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(mm,"position_max"));
    s.velocity_min =MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(mm,"velocity_min"));
    s.velocity_max =MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(mm,"velocity_max"));
    s.acceleration_min =MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(mm,"acceleration_min"));
    s.acceleration_max =MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(mm,"acceleration_max"));
    s.torque_min =MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(mm,"torque_min"));
    s.torque_max =MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(mm,"torque_max"));
    s.gear_ratio =MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(mm,"gear_ratio"));
    s.sensor_resolution =MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(mm,"sensor_resolution"));
    s.effort_command_resolution =MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(mm,"effort_command_resolution"));
    s.parameter_info =MessageElementUtil.UnpackList<com.robotraconteur.param.ParameterInfo>(MessageElement.FindElement(mm,"parameter_info"));
    s.signal_info =MessageElementUtil.UnpackList<com.robotraconteur.signal.SignalInfo>(MessageElement.FindElement(mm,"signal_info"));
    s.extended =MessageElementUtil.UnpackMap<string,object>(MessageElement.FindElement(mm,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class ServoState_stub : IStructureStub {
    public ServoState_stub(com__robotraconteur__servoFactory d) {def=d;}
    private com__robotraconteur__servoFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    ServoState s = (ServoState)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.datetime.TimeSpec3>("ts",ref s.ts));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<ulong>("seqno",s.seqno));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<uint>("servo_state_flags",s.servo_state_flags));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackEnum<ServoMode>("mode",s.mode));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackArray<double>("position",s.position));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackArray<double>("velocity",s.velocity));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackArray<double>("acceleration",s.acceleration));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackArray<double>("effort",s.effort));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackArray<double>("position_command",s.position_command));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackArray<double>("velocity_command",s.velocity_command));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackArray<double>("effort_command",s.effort_command));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.servo.ServoState",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    ServoState s=new ServoState();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.ts =MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.datetime.TimeSpec3>(MessageElement.FindElement(mm,"ts"));
    s.seqno =(MessageElementUtil.UnpackScalar<ulong>(MessageElement.FindElement(mm,"seqno")));
    s.servo_state_flags =(MessageElementUtil.UnpackScalar<uint>(MessageElement.FindElement(mm,"servo_state_flags")));
    s.mode =MessageElementUtil.UnpackEnum<ServoMode>(MessageElement.FindElement(mm,"mode"));
    s.position =MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(mm,"position"));
    s.velocity =MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(mm,"velocity"));
    s.acceleration =MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(mm,"acceleration"));
    s.effort =MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(mm,"effort"));
    s.position_command =MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(mm,"position_command"));
    s.velocity_command =MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(mm,"velocity_command"));
    s.effort_command =MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(mm,"effort_command"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class ServoStateSensorData_stub : IStructureStub {
    public ServoStateSensorData_stub(com__robotraconteur__servoFactory d) {def=d;}
    private com__robotraconteur__servoFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    ServoStateSensorData s = (ServoStateSensorData)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("data_header",s.data_header));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("servo_state",s.servo_state));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackMapType<string,object>("extended",s.extended));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.servo.ServoStateSensorData",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    ServoStateSensorData s=new ServoStateSensorData();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.data_header =MessageElementUtil.UnpackStructure<com.robotraconteur.sensordata.SensorDataHeader>(MessageElement.FindElement(mm,"data_header"));
    s.servo_state =MessageElementUtil.UnpackStructure<ServoState>(MessageElement.FindElement(mm,"servo_state"));
    s.extended =MessageElementUtil.UnpackMap<string,object>(MessageElement.FindElement(mm,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class ServoCommand_stub : IStructureStub {
    public ServoCommand_stub(com__robotraconteur__servoFactory d) {def=d;}
    private com__robotraconteur__servoFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    ServoCommand s = (ServoCommand)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<ulong>("seqno",s.seqno));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<ulong>("status_seqno",s.status_seqno));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackArray<double>("command",s.command));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.servo.ServoCommand",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    ServoCommand s=new ServoCommand();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.seqno =(MessageElementUtil.UnpackScalar<ulong>(MessageElement.FindElement(mm,"seqno")));
    s.status_seqno =(MessageElementUtil.UnpackScalar<ulong>(MessageElement.FindElement(mm,"status_seqno")));
    s.command =MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(mm,"command"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public interface async_Servo : com.robotraconteur.device.async_Device, com.robotraconteur.device.clock.async_DeviceClock, com.robotraconteur.device.isoch.async_IsochDevice
{
    Task<com.robotraconteur.device.DeviceInfo> async_get_device_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<ServoInfo> async_get_servo_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<ServoMode> async_get_mode(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_mode(ServoMode value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<com.robotraconteur.device.isoch.IsochInfo> async_get_isoch_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<uint> async_get_isoch_downsample(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_isoch_downsample(uint value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_halt(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_trapezoidal_move(double[] target_pos, double[] target_vel, double[] vel, double[] accel,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<object> async_getf_signal(string signal_name,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_setf_signal(string signal_name, object value_,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<object> async_getf_param(string param_name,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_setf_param(string param_name, object value_,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
}
public class Servo_stub : ServiceStub , Servo, async_Servo{
    private Pipe<ServoStateSensorData> rr_servo_state_sensor_data;
    private Wire<double[]> rr_position;
    private Wire<double[]> rr_velocity;
    private Wire<ServoState> rr_servo_state;
    private Wire<ServoCommand> rr_position_command;
    private Wire<ServoCommand> rr_velocity_command;
    private Wire<ServoCommand> rr_effort_command;
    private Wire<com.robotraconteur.device.clock.DeviceTime> rr_device_clock_now;
    public Servo_stub(WrappedServiceStub innerstub) : base(innerstub) {
    rr_servo_state_sensor_data=new Pipe<ServoStateSensorData>(innerstub.GetPipe("servo_state_sensor_data"));
    rr_position=new Wire<double[]>(innerstub.GetWire("position"));
    rr_velocity=new Wire<double[]>(innerstub.GetWire("velocity"));
    rr_servo_state=new Wire<ServoState>(innerstub.GetWire("servo_state"));
    rr_position_command=new Wire<ServoCommand>(innerstub.GetWire("position_command"));
    rr_velocity_command=new Wire<ServoCommand>(innerstub.GetWire("velocity_command"));
    rr_effort_command=new Wire<ServoCommand>(innerstub.GetWire("effort_command"));
    rr_device_clock_now=new Wire<com.robotraconteur.device.clock.DeviceTime>(innerstub.GetWire("device_clock_now"));
    }
    public com.robotraconteur.device.DeviceInfo device_info {
    get {
    return MessageElementUtil.UnpackStructure<com.robotraconteur.device.DeviceInfo>(rr_innerstub.PropertyGet("device_info"));
    }
    }
    public ServoInfo servo_info {
    get {
    return MessageElementUtil.UnpackStructure<ServoInfo>(rr_innerstub.PropertyGet("servo_info"));
    }
    }
    public ServoMode mode {
    get {
    return MessageElementUtil.UnpackEnum<ServoMode>(rr_innerstub.PropertyGet("mode"));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackEnum<ServoMode>("value",value))
    {
    rr_innerstub.PropertySet("mode", m);
    }
    }
    }
    public com.robotraconteur.device.isoch.IsochInfo isoch_info {
    get {
    return MessageElementUtil.UnpackStructure<com.robotraconteur.device.isoch.IsochInfo>(rr_innerstub.PropertyGet("isoch_info"));
    }
    }
    public uint isoch_downsample {
    get {
    return (MessageElementUtil.UnpackScalar<uint>(rr_innerstub.PropertyGet("isoch_downsample")));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackScalar<uint>("value",value))
    {
    rr_innerstub.PropertySet("isoch_downsample", m);
    }
    }
    }
    public void halt() {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    using(MessageElement rr_me=rr_innerstub.FunctionCall("halt",rr_param))
    {
    }
    }
    }
    public void trapezoidal_move(double[] target_pos, double[] target_vel, double[] vel, double[] accel) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackArray<double>("target_pos",target_pos));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackArray<double>("target_vel",target_vel));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackArray<double>("vel",vel));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackArray<double>("accel",accel));
    using(MessageElement rr_me=rr_innerstub.FunctionCall("trapezoidal_move",rr_param))
    {
    }
    }
    }
    public object getf_signal(string signal_name) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("signal_name",signal_name));
    using(MessageElement rr_me=rr_innerstub.FunctionCall("getf_signal",rr_param))
    {
    return MessageElementUtil.UnpackVarType(rr_me);
    }
    }
    }
    public void setf_signal(string signal_name, object value_) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("signal_name",signal_name));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackVarType("value",value_));
    using(MessageElement rr_me=rr_innerstub.FunctionCall("setf_signal",rr_param))
    {
    }
    }
    }
    public object getf_param(string param_name) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("param_name",param_name));
    using(MessageElement rr_me=rr_innerstub.FunctionCall("getf_param",rr_param))
    {
    return MessageElementUtil.UnpackVarType(rr_me);
    }
    }
    }
    public void setf_param(string param_name, object value_) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("param_name",param_name));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackVarType("value",value_));
    using(MessageElement rr_me=rr_innerstub.FunctionCall("setf_param",rr_param))
    {
    }
    }
    }
    public override void DispatchEvent(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    }
    public Pipe<ServoStateSensorData> servo_state_sensor_data {
    get { return rr_servo_state_sensor_data;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<double[]> position {
    get { return rr_position;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<double[]> velocity {
    get { return rr_velocity;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<ServoState> servo_state {
    get { return rr_servo_state;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<ServoCommand> position_command {
    get { return rr_position_command;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<ServoCommand> velocity_command {
    get { return rr_velocity_command;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<ServoCommand> effort_command {
    get { return rr_effort_command;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<com.robotraconteur.device.clock.DeviceTime> device_clock_now {
    get { return rr_device_clock_now;  }
    set { throw new InvalidOperationException();}
    }
    public override MessageElement CallbackCall(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public virtual async Task<com.robotraconteur.device.DeviceInfo> async_get_device_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("device_info",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<com.robotraconteur.device.DeviceInfo>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<ServoInfo> async_get_servo_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("servo_info",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<ServoInfo>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<ServoMode> async_get_mode(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("mode",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackEnum<ServoMode>(rr_value);
    return rr_ret;
    } }
    public virtual async Task async_set_mode(ServoMode value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackEnum<ServoMode>("value",value))
    {
    await rr_async_PropertySet("mode",mm,rr_timeout);
    }
    }
    public virtual async Task<com.robotraconteur.device.isoch.IsochInfo> async_get_isoch_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("isoch_info",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<com.robotraconteur.device.isoch.IsochInfo>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<uint> async_get_isoch_downsample(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("isoch_downsample",rr_timeout)) {
    var rr_ret=(MessageElementUtil.UnpackScalar<uint>(rr_value));
    return rr_ret;
    } }
    public virtual async Task async_set_isoch_downsample(uint value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackScalar<uint>("value",value))
    {
    await rr_async_PropertySet("isoch_downsample",mm,rr_timeout);
    }
    }
    public virtual async Task async_halt(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    using(var rr_return = await rr_async_FunctionCall("halt",rr_param,rr_timeout)) {
    } } }
    public virtual async Task async_trapezoidal_move(double[] target_pos, double[] target_vel, double[] vel, double[] accel,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackArray<double>("target_pos",target_pos));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackArray<double>("target_vel",target_vel));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackArray<double>("vel",vel));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackArray<double>("accel",accel));
    using(var rr_return = await rr_async_FunctionCall("trapezoidal_move",rr_param,rr_timeout)) {
    } } }
    public virtual async Task<object> async_getf_signal(string signal_name,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("signal_name",signal_name));
    using(var rr_return = await rr_async_FunctionCall("getf_signal",rr_param,rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackVarType(rr_return);
    return rr_ret;
    } } }
    public virtual async Task async_setf_signal(string signal_name, object value_,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("signal_name",signal_name));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackVarType("value",value_));
    using(var rr_return = await rr_async_FunctionCall("setf_signal",rr_param,rr_timeout)) {
    } } }
    public virtual async Task<object> async_getf_param(string param_name,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("param_name",param_name));
    using(var rr_return = await rr_async_FunctionCall("getf_param",rr_param,rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackVarType(rr_return);
    return rr_ret;
    } } }
    public virtual async Task async_setf_param(string param_name, object value_,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackString("param_name",param_name));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackVarType("value",value_));
    using(var rr_return = await rr_async_FunctionCall("setf_param",rr_param,rr_timeout)) {
    } } }
}
public class Servo_skel : ServiceSkel {
    protected Servo obj;
    protected async_Servo async_obj;
    public Servo_skel(object o) : base(o)    {
    obj=(Servo)o;
    async_obj = o as async_Servo;
    }
    public override void ReleaseCastObject() { 
    obj=null;
    async_obj=null;
    base.ReleaseCastObject();
    }
    public override MessageElement CallGetProperty(string membername, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    case "device_info":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_device_info().ContinueWith(t => async_adapter.EndTask<com.robotraconteur.device.DeviceInfo>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    com.robotraconteur.device.DeviceInfo ret=obj.device_info;
    return MessageElementUtil.PackStructure("return",ret);
    }
    case "servo_info":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_servo_info().ContinueWith(t => async_adapter.EndTask<ServoInfo>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    ServoInfo ret=obj.servo_info;
    return MessageElementUtil.PackStructure("return",ret);
    }
    case "mode":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_mode().ContinueWith(t => async_adapter.EndTask<ServoMode>(t,async_ret => MessageElementUtil.PackEnum<ServoMode>("return",async_ret)));
    return null;
    }
    ServoMode ret=obj.mode;
    return MessageElementUtil.PackEnum<ServoMode>("return",ret);
    }
    case "isoch_info":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_isoch_info().ContinueWith(t => async_adapter.EndTask<com.robotraconteur.device.isoch.IsochInfo>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    com.robotraconteur.device.isoch.IsochInfo ret=obj.isoch_info;
    return MessageElementUtil.PackStructure("return",ret);
    }
    case "isoch_downsample":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_isoch_downsample().ContinueWith(t => async_adapter.EndTask<uint>(t,async_ret => MessageElementUtil.PackScalar<uint>("return",async_ret)));
    return null;
    }
    uint ret=obj.isoch_downsample;
    return MessageElementUtil.PackScalar<uint>("return",ret);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void CallSetProperty(string membername, MessageElement m, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    case "mode":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_mode(MessageElementUtil.UnpackEnum<ServoMode>(m)).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.mode=MessageElementUtil.UnpackEnum<ServoMode>(m);
    return;
    }
    case "isoch_downsample":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_isoch_downsample((MessageElementUtil.UnpackScalar<uint>(m))).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.isoch_downsample=(MessageElementUtil.UnpackScalar<uint>(m));
    return;
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override MessageElement CallFunction(string rr_membername, vectorptr_messageelement rr_m, WrappedServiceSkelAsyncAdapter rr_async_adapter) {
    switch (rr_membername) {
    case "halt":
    {
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_halt().ContinueWith(t => rr_async_adapter.EndTask(t,new MessageElement("return",(int)0)));
    return null;
    }
    this.obj.halt();
    return new MessageElement("return",(int)0);
    }
    case "trapezoidal_move":
    {
    double[] target_pos=MessageElementUtil.UnpackArray<double>(vectorptr_messageelement_util.FindElement(rr_m,"target_pos"));
    double[] target_vel=MessageElementUtil.UnpackArray<double>(vectorptr_messageelement_util.FindElement(rr_m,"target_vel"));
    double[] vel=MessageElementUtil.UnpackArray<double>(vectorptr_messageelement_util.FindElement(rr_m,"vel"));
    double[] accel=MessageElementUtil.UnpackArray<double>(vectorptr_messageelement_util.FindElement(rr_m,"accel"));
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_trapezoidal_move(target_pos, target_vel, vel, accel).ContinueWith(t => rr_async_adapter.EndTask(t,new MessageElement("return",(int)0)));
    return null;
    }
    this.obj.trapezoidal_move(target_pos, target_vel, vel, accel);
    return new MessageElement("return",(int)0);
    }
    case "getf_signal":
    {
    string signal_name=MessageElementUtil.UnpackString(vectorptr_messageelement_util.FindElement(rr_m,"signal_name"));
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_getf_signal(signal_name).ContinueWith(t => rr_async_adapter.EndTask<object>(t,async_ret => MessageElementUtil.PackVarType("return",async_ret)));
    return null;
    }
    object rr_ret=this.obj.getf_signal(signal_name);
    return MessageElementUtil.PackVarType("return",rr_ret);
    }
    case "setf_signal":
    {
    string signal_name=MessageElementUtil.UnpackString(vectorptr_messageelement_util.FindElement(rr_m,"signal_name"));
    object value_=MessageElementUtil.UnpackVarType(vectorptr_messageelement_util.FindElement(rr_m,"value"));
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_setf_signal(signal_name, value_).ContinueWith(t => rr_async_adapter.EndTask(t,new MessageElement("return",(int)0)));
    return null;
    }
    this.obj.setf_signal(signal_name, value_);
    return new MessageElement("return",(int)0);
    }
    case "getf_param":
    {
    string param_name=MessageElementUtil.UnpackString(vectorptr_messageelement_util.FindElement(rr_m,"param_name"));
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_getf_param(param_name).ContinueWith(t => rr_async_adapter.EndTask<object>(t,async_ret => MessageElementUtil.PackVarType("return",async_ret)));
    return null;
    }
    object rr_ret=this.obj.getf_param(param_name);
    return MessageElementUtil.PackVarType("return",rr_ret);
    }
    case "setf_param":
    {
    string param_name=MessageElementUtil.UnpackString(vectorptr_messageelement_util.FindElement(rr_m,"param_name"));
    object value_=MessageElementUtil.UnpackVarType(vectorptr_messageelement_util.FindElement(rr_m,"value"));
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_setf_param(param_name, value_).ContinueWith(t => rr_async_adapter.EndTask(t,new MessageElement("return",(int)0)));
    return null;
    }
    this.obj.setf_param(param_name, value_);
    return new MessageElement("return",(int)0);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override object GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(Servo)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(Servo)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void InitPipeServers(object rrobj1) {
    obj=(Servo)rrobj1;
    obj.servo_state_sensor_data=new Pipe<ServoStateSensorData>(innerskel.GetPipe("servo_state_sensor_data"));
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(Servo)rrobj1;
    }
    public override void InitWireServers(object rrobj1) {
    obj=(Servo)rrobj1;
    obj.position=new Wire<double[]>(innerskel.GetWire("position"));
    obj.velocity=new Wire<double[]>(innerskel.GetWire("velocity"));
    obj.servo_state=new Wire<ServoState>(innerskel.GetWire("servo_state"));
    obj.position_command=new Wire<ServoCommand>(innerskel.GetWire("position_command"));
    obj.velocity_command=new Wire<ServoCommand>(innerskel.GetWire("velocity_command"));
    obj.effort_command=new Wire<ServoCommand>(innerskel.GetWire("effort_command"));
    obj.device_clock_now=new Wire<com.robotraconteur.device.clock.DeviceTime>(innerskel.GetWire("device_clock_now"));
    }
    public override WrappedArrayMemoryDirector GetArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedMultiDimArrayMemoryDirector GetMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodArrayMemoryDirector GetPodArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodMultiDimArrayMemoryDirector GetPodMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedArrayMemoryDirector GetNamedArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedMultiDimArrayMemoryDirector GetNamedMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override string RRType { get { return "com.robotraconteur.servo.Servo"; } }
}
public class Servo_default_impl : Servo{
    protected PipeBroadcaster<ServoStateSensorData> rrvar_servo_state_sensor_data;
    protected WireBroadcaster<double[]> rrvar_position;
    protected WireBroadcaster<double[]> rrvar_velocity;
    protected WireBroadcaster<ServoState> rrvar_servo_state;
    protected WireUnicastReceiver<ServoCommand> rrvar_position_command;
    protected WireUnicastReceiver<ServoCommand> rrvar_velocity_command;
    protected WireUnicastReceiver<ServoCommand> rrvar_effort_command;
    protected WireBroadcaster<com.robotraconteur.device.clock.DeviceTime> rrvar_device_clock_now;
    public virtual com.robotraconteur.device.DeviceInfo device_info {get; set;} = default(com.robotraconteur.device.DeviceInfo);
    public virtual ServoInfo servo_info {get; set;} = default(ServoInfo);
    public virtual ServoMode mode {get; set;} = default(ServoMode);
    public virtual com.robotraconteur.device.isoch.IsochInfo isoch_info {get; set;} = default(com.robotraconteur.device.isoch.IsochInfo);
    public virtual uint isoch_downsample {get; set;} = default(uint);
    public virtual void halt() {
    throw new NotImplementedException();    }
    public virtual void trapezoidal_move(double[] target_pos, double[] target_vel, double[] vel, double[] accel) {
    throw new NotImplementedException();    }
    public virtual object getf_signal(string signal_name) {
    throw new NotImplementedException();    }
    public virtual void setf_signal(string signal_name, object value_) {
    throw new NotImplementedException();    }
    public virtual object getf_param(string param_name) {
    throw new NotImplementedException();    }
    public virtual void setf_param(string param_name, object value_) {
    throw new NotImplementedException();    }
    public virtual Pipe<ServoStateSensorData> servo_state_sensor_data {
    get { return rrvar_servo_state_sensor_data.Pipe;  }
    set {
    if (rrvar_servo_state_sensor_data!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_servo_state_sensor_data= new PipeBroadcaster<ServoStateSensorData>(value);
    }
    }
    public virtual Wire<double[]> position {
    get { return rrvar_position.Wire;  }
    set {
    if (rrvar_position!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_position= new WireBroadcaster<double[]>(value);
    }
    }
    public virtual Wire<double[]> velocity {
    get { return rrvar_velocity.Wire;  }
    set {
    if (rrvar_velocity!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_velocity= new WireBroadcaster<double[]>(value);
    }
    }
    public virtual Wire<ServoState> servo_state {
    get { return rrvar_servo_state.Wire;  }
    set {
    if (rrvar_servo_state!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_servo_state= new WireBroadcaster<ServoState>(value);
    }
    }
    public virtual Wire<ServoCommand> position_command {
    get { return rrvar_position_command.Wire;  }
    set {
    if (rrvar_position_command!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_position_command= new WireUnicastReceiver<ServoCommand>(value);
    }
    }
    public virtual Wire<ServoCommand> velocity_command {
    get { return rrvar_velocity_command.Wire;  }
    set {
    if (rrvar_velocity_command!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_velocity_command= new WireUnicastReceiver<ServoCommand>(value);
    }
    }
    public virtual Wire<ServoCommand> effort_command {
    get { return rrvar_effort_command.Wire;  }
    set {
    if (rrvar_effort_command!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_effort_command= new WireUnicastReceiver<ServoCommand>(value);
    }
    }
    public virtual Wire<com.robotraconteur.device.clock.DeviceTime> device_clock_now {
    get { return rrvar_device_clock_now.Wire;  }
    set {
    if (rrvar_device_clock_now!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_device_clock_now= new WireBroadcaster<com.robotraconteur.device.clock.DeviceTime>(value);
    }
    }
}
public static class RRExtensions{
}
}
namespace com.robotraconteur.signal
{
public class SignalInfo
{
    public com.robotraconteur.identifier.Identifier signal_identifier;
    public com.robotraconteur.device.DeviceClass signal_class;
    public List<com.robotraconteur.units.SIUnit> units;
    public com.robotraconteur.datatype.DataType data_type;
    public SignalType signal_type;
    public SignalAccessLevel access_level;
    public uint[] address;
    public string user_description;
    public object min_value;
    public object max_value;
    public Dictionary<string,object> extended;
}

public class SignalDeviceState
{
    public com.robotraconteur.datetime.TimeSpec3 ts;
    public ulong seqno;
    public uint signal_device_state_flags;
}

public class SignalGroupInfo
{
    public com.robotraconteur.identifier.Identifier signal_group_identifier;
    public string description;
}

[RobotRaconteurServiceObjectInterface()]
public interface Signal : com.robotraconteur.device.isoch.IsochDevice
{
    SignalInfo signal_info { get; 	}
    com.robotraconteur.device.isoch.IsochInfo isoch_info { get; 	}
    uint isoch_downsample { get;  set; 	}
    Wire<object> signal_value{ get; set; }
    Wire<object> signal_command{ get; set; }
    Wire<double[]> signal_value_vec{ get; set; }
    Wire<double[]> signal_command_vec{ get; set; }
}

[RobotRaconteurServiceObjectInterface()]
public interface SignalGroup
{
    List<SignalInfo> signal_info { get; 	}
    Signal get_signals(int ind);
}

[RobotRaconteurServiceObjectInterface()]
public interface SignalDevice : com.robotraconteur.device.Device
{
    com.robotraconteur.device.DeviceInfo device_info { get; 	}
    List<SignalGroupInfo> signal_group_info { get; 	}
    SignalGroup get_signal_groups(string ind);
}

public static class com__robotraconteur__signalConstants 
{
}
    public enum SignalType
    {
    unknown = 0,
    digital = 1,
    analog = 2,
    digital_port = 3,
    analog_port = 4,
    vector3 = 5,
    vector6 = 6,
    wrench = 7,
    pose = 8,
    transform = 9,
    other = 10
    };
    public enum SignalAccessLevel
    {
    undefined = 0,
    internal_ = 1,
    restricted = 2,
    readonly_ = 3,
    all = 4
    };
    public enum SignalDeviceStateFlags
    {
    unknown = 0,
    ready = 0x1,
    streaming = 0x2,
    warning = 0x4,
    error = 0x8,
    fatal_error = 0x10,
    calibrated = 0x20,
    calibration_required = 0x40,
    communication_failure = 0x80
    };
}
namespace com.robotraconteur.signal
{
public class com__robotraconteur__signalFactory : ServiceFactory
{
    public override string DefString()
{
    const string s="service com.robotraconteur.signal\n\nstdver 0.10\n\nimport com.robotraconteur.identifier\nimport com.robotraconteur.datatype\nimport com.robotraconteur.device\nimport com.robotraconteur.units\nimport com.robotraconteur.device\nimport com.robotraconteur.device.isoch\nimport com.robotraconteur.datetime\n\nusing com.robotraconteur.identifier.Identifier\nusing com.robotraconteur.datatype.DataType\nusing com.robotraconteur.device.DeviceInfo\nusing com.robotraconteur.device.DeviceClass\nusing com.robotraconteur.units.SIUnit\nusing com.robotraconteur.device.Device\nusing com.robotraconteur.device.isoch.IsochDevice\nusing com.robotraconteur.device.isoch.IsochInfo\nusing com.robotraconteur.datetime.TimeSpec3\n\nenum SignalType\nunknown = 0,\ndigital = 1,\nanalog,\ndigital_port,\nanalog_port,\nvector3,\nvector6,\nwrench,\npose,\ntransform,\nother\nend\n\nenum SignalAccessLevel\nundefined = 0,\ninternal,\nrestricted,\nreadonly,\nall\nend\n\nenum SignalDeviceStateFlags\nunknown = 0,\nready = 0x1,\nstreaming = 0x2,\nwarning = 0x4,\nerror = 0x8,\nfatal_error = 0x10,\ncalibrated = 0x20,\ncalibration_required = 0x40,\ncommunication_failure = 0x80\nend\n\nstruct SignalInfo\nfield Identifier signal_identifier\nfield DeviceClass signal_class\nfield SIUnit{list} units\nfield DataType data_type\nfield SignalType signal_type\nfield SignalAccessLevel access_level\nfield uint32[] address\nfield string user_description\nfield varvalue min_value\nfield varvalue max_value\nfield varvalue{string} extended\nend\n\nstruct SignalDeviceState\nfield TimeSpec3 ts\nfield uint64 seqno\nfield uint32 signal_device_state_flags\nend\n\nstruct SignalGroupInfo\nfield Identifier signal_group_identifier\nfield string description\nend\n\nobject Signal\nimplements IsochDevice\nproperty SignalInfo signal_info [readonly,nolock]\nwire varvalue signal_value [readonly]\nwire varvalue signal_command [writeonly]\nwire double[] signal_value_vec [readonly]\nwire double[] signal_command_vec [writeonly]\nproperty IsochInfo isoch_info [readonly,nolock]\nproperty uint32 isoch_downsample [perclient]\nend\n\nobject SignalGroup\nproperty SignalInfo{list} signal_info [readonly,nolock]\nobjref Signal{int32} signals\nend\n\nobject SignalDevice\nimplements Device\nproperty DeviceInfo device_info [readonly,nolock]\nproperty SignalGroupInfo{list} signal_group_info [readonly,nolock]\nobjref SignalGroup{string} signal_groups\nend\n\n";
    return s;
    }
    public override string GetServiceName() {return "com.robotraconteur.signal";}
    public SignalInfo_stub SignalInfo_stubentry;
    public SignalDeviceState_stub SignalDeviceState_stubentry;
    public SignalGroupInfo_stub SignalGroupInfo_stubentry;
    public com__robotraconteur__signalFactory()
{
    SignalInfo_stubentry=new SignalInfo_stub(this);
    SignalDeviceState_stubentry=new SignalDeviceState_stub(this);
    SignalGroupInfo_stubentry=new SignalGroupInfo_stub(this);
    }
    public override IStructureStub FindStructureStub(string objecttype)
    {
    if (objecttype=="SignalInfo")    return SignalInfo_stubentry;
    if (objecttype=="SignalDeviceState")    return SignalDeviceState_stubentry;
    if (objecttype=="SignalGroupInfo")    return SignalGroupInfo_stubentry;
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public override IPodStub FindPodStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override INamedArrayStub FindNamedArrayStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override ServiceStub CreateStub(WrappedServiceStub innerstub) {
    string objecttype=innerstub.RR_objecttype.GetServiceDefinition().Name + "." + innerstub.RR_objecttype.Name;    string objshort;
    if (CompareNamespace(objecttype, out objshort)) {
    switch (objshort) {
    case "Signal":
    return new Signal_stub(innerstub);
    case "SignalGroup":
    return new SignalGroup_stub(innerstub);
    case "SignalDevice":
    return new SignalDevice_stub(innerstub);
    default:
    break;
    }
    } else {
    string ext_service_type=RobotRaconteurNode.SplitQualifiedName(objecttype).Item1;
    return RobotRaconteurNode.s.GetServiceType(ext_service_type).CreateStub(innerstub);
    }
    throw new ServiceException("Could not create stub");
    }
    public override ServiceSkel CreateSkel(object obj) {
    string objtype = RobotRaconteurNode.GetTypeString(ServiceSkelUtil.FindParentInterface(obj.GetType()));
    string objshort;
    if (CompareNamespace(objtype, out objshort)) {
    switch(objshort) {
    case "Signal":
    return new Signal_skel((Signal)obj);
    case "SignalGroup":
    return new SignalGroup_skel((SignalGroup)obj);
    case "SignalDevice":
    return new SignalDevice_skel((SignalDevice)obj);
    default:
    break;
    }
    } else {
    string ext_service_type=RobotRaconteurNode.SplitQualifiedName(objtype).Item1;
    return RobotRaconteurNode.s.GetServiceFactory(ext_service_type).CreateSkel(obj);
    }
    throw new ServiceException("Could not create skel");
    }
    public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp){
    if (rr_exp==null) return rr_exp;
    string rr_type=rr_exp.Error;
    if (!rr_type.Contains(".")) return rr_exp;
    string rr_stype;
    if (CompareNamespace(rr_type, out rr_stype)) {
    } else {
    return RobotRaconteurNode.s.DownCastException(rr_exp); 
    }
    return rr_exp;
    }
}

public class SignalInfo_stub : IStructureStub {
    public SignalInfo_stub(com__robotraconteur__signalFactory d) {def=d;}
    private com__robotraconteur__signalFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    SignalInfo s = (SignalInfo)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("signal_identifier",s.signal_identifier));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("signal_class",s.signal_class));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackListType<com.robotraconteur.units.SIUnit>("units",s.units));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("data_type",s.data_type));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackEnum<SignalType>("signal_type",s.signal_type));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackEnum<SignalAccessLevel>("access_level",s.access_level));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackArray<uint>("address",s.address));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackString("user_description",s.user_description));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackVarType("min_value",s.min_value));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackVarType("max_value",s.max_value));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackMapType<string,object>("extended",s.extended));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.signal.SignalInfo",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    SignalInfo s=new SignalInfo();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.signal_identifier =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(MessageElement.FindElement(mm,"signal_identifier"));
    s.signal_class =MessageElementUtil.UnpackStructure<com.robotraconteur.device.DeviceClass>(MessageElement.FindElement(mm,"signal_class"));
    s.units =MessageElementUtil.UnpackList<com.robotraconteur.units.SIUnit>(MessageElement.FindElement(mm,"units"));
    s.data_type =MessageElementUtil.UnpackStructure<com.robotraconteur.datatype.DataType>(MessageElement.FindElement(mm,"data_type"));
    s.signal_type =MessageElementUtil.UnpackEnum<SignalType>(MessageElement.FindElement(mm,"signal_type"));
    s.access_level =MessageElementUtil.UnpackEnum<SignalAccessLevel>(MessageElement.FindElement(mm,"access_level"));
    s.address =MessageElementUtil.UnpackArray<uint>(MessageElement.FindElement(mm,"address"));
    s.user_description =MessageElementUtil.UnpackString(MessageElement.FindElement(mm,"user_description"));
    s.min_value =MessageElementUtil.UnpackVarType(MessageElement.FindElement(mm,"min_value"));
    s.max_value =MessageElementUtil.UnpackVarType(MessageElement.FindElement(mm,"max_value"));
    s.extended =MessageElementUtil.UnpackMap<string,object>(MessageElement.FindElement(mm,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class SignalDeviceState_stub : IStructureStub {
    public SignalDeviceState_stub(com__robotraconteur__signalFactory d) {def=d;}
    private com__robotraconteur__signalFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    SignalDeviceState s = (SignalDeviceState)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.datetime.TimeSpec3>("ts",ref s.ts));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<ulong>("seqno",s.seqno));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<uint>("signal_device_state_flags",s.signal_device_state_flags));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.signal.SignalDeviceState",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    SignalDeviceState s=new SignalDeviceState();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.ts =MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.datetime.TimeSpec3>(MessageElement.FindElement(mm,"ts"));
    s.seqno =(MessageElementUtil.UnpackScalar<ulong>(MessageElement.FindElement(mm,"seqno")));
    s.signal_device_state_flags =(MessageElementUtil.UnpackScalar<uint>(MessageElement.FindElement(mm,"signal_device_state_flags")));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class SignalGroupInfo_stub : IStructureStub {
    public SignalGroupInfo_stub(com__robotraconteur__signalFactory d) {def=d;}
    private com__robotraconteur__signalFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    SignalGroupInfo s = (SignalGroupInfo)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("signal_group_identifier",s.signal_group_identifier));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackString("description",s.description));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.signal.SignalGroupInfo",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    SignalGroupInfo s=new SignalGroupInfo();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.signal_group_identifier =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(MessageElement.FindElement(mm,"signal_group_identifier"));
    s.description =MessageElementUtil.UnpackString(MessageElement.FindElement(mm,"description"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public interface async_Signal : com.robotraconteur.device.isoch.async_IsochDevice
{
    Task<SignalInfo> async_get_signal_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<com.robotraconteur.device.isoch.IsochInfo> async_get_isoch_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<uint> async_get_isoch_downsample(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_isoch_downsample(uint value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
}
public class Signal_stub : ServiceStub , Signal, async_Signal{
    private Wire<object> rr_signal_value;
    private Wire<object> rr_signal_command;
    private Wire<double[]> rr_signal_value_vec;
    private Wire<double[]> rr_signal_command_vec;
    public Signal_stub(WrappedServiceStub innerstub) : base(innerstub) {
    rr_signal_value=new Wire<object>(innerstub.GetWire("signal_value"));
    rr_signal_command=new Wire<object>(innerstub.GetWire("signal_command"));
    rr_signal_value_vec=new Wire<double[]>(innerstub.GetWire("signal_value_vec"));
    rr_signal_command_vec=new Wire<double[]>(innerstub.GetWire("signal_command_vec"));
    }
    public SignalInfo signal_info {
    get {
    return MessageElementUtil.UnpackStructure<SignalInfo>(rr_innerstub.PropertyGet("signal_info"));
    }
    }
    public com.robotraconteur.device.isoch.IsochInfo isoch_info {
    get {
    return MessageElementUtil.UnpackStructure<com.robotraconteur.device.isoch.IsochInfo>(rr_innerstub.PropertyGet("isoch_info"));
    }
    }
    public uint isoch_downsample {
    get {
    return (MessageElementUtil.UnpackScalar<uint>(rr_innerstub.PropertyGet("isoch_downsample")));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackScalar<uint>("value",value))
    {
    rr_innerstub.PropertySet("isoch_downsample", m);
    }
    }
    }
    public override void DispatchEvent(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    }
    public Wire<object> signal_value {
    get { return rr_signal_value;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<object> signal_command {
    get { return rr_signal_command;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<double[]> signal_value_vec {
    get { return rr_signal_value_vec;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<double[]> signal_command_vec {
    get { return rr_signal_command_vec;  }
    set { throw new InvalidOperationException();}
    }
    public override MessageElement CallbackCall(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public virtual async Task<SignalInfo> async_get_signal_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("signal_info",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<SignalInfo>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<com.robotraconteur.device.isoch.IsochInfo> async_get_isoch_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("isoch_info",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<com.robotraconteur.device.isoch.IsochInfo>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<uint> async_get_isoch_downsample(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("isoch_downsample",rr_timeout)) {
    var rr_ret=(MessageElementUtil.UnpackScalar<uint>(rr_value));
    return rr_ret;
    } }
    public virtual async Task async_set_isoch_downsample(uint value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackScalar<uint>("value",value))
    {
    await rr_async_PropertySet("isoch_downsample",mm,rr_timeout);
    }
    }
}
public interface async_SignalGroup
{
    Task<List<SignalInfo>> async_get_signal_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<Signal> async_get_signals(int ind, int timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
}
public class SignalGroup_stub : ServiceStub , SignalGroup, async_SignalGroup{
    public SignalGroup_stub(WrappedServiceStub innerstub) : base(innerstub) {
    }
    public List<SignalInfo> signal_info {
    get {
    return MessageElementUtil.UnpackList<SignalInfo>(rr_innerstub.PropertyGet("signal_info"));
    }
    }
    public override void DispatchEvent(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    }
    public Signal get_signals(int ind) {
    return (Signal)FindObjRefTyped("signals",ind.ToString(),"com.robotraconteur.signal.Signal");
    }
    public override MessageElement CallbackCall(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public virtual async Task<List<SignalInfo>> async_get_signal_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("signal_info",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackList<SignalInfo>(rr_value);
    return rr_ret;
    } }
    public Task<Signal>  async_get_signals(int ind, int timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    return AsyncFindObjRefTyped<Signal>("signals",ind.ToString(),"com.robotraconteur.signal.Signal",timeout);
    }
}
public interface async_SignalDevice : com.robotraconteur.device.async_Device
{
    Task<com.robotraconteur.device.DeviceInfo> async_get_device_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<List<SignalGroupInfo>> async_get_signal_group_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<SignalGroup> async_get_signal_groups(string ind, int timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
}
public class SignalDevice_stub : ServiceStub , SignalDevice, async_SignalDevice{
    public SignalDevice_stub(WrappedServiceStub innerstub) : base(innerstub) {
    }
    public com.robotraconteur.device.DeviceInfo device_info {
    get {
    return MessageElementUtil.UnpackStructure<com.robotraconteur.device.DeviceInfo>(rr_innerstub.PropertyGet("device_info"));
    }
    }
    public List<SignalGroupInfo> signal_group_info {
    get {
    return MessageElementUtil.UnpackList<SignalGroupInfo>(rr_innerstub.PropertyGet("signal_group_info"));
    }
    }
    public override void DispatchEvent(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    }
    public SignalGroup get_signal_groups(string ind) {
    return (SignalGroup)FindObjRefTyped("signal_groups",ind.ToString(),"com.robotraconteur.signal.SignalGroup");
    }
    public override MessageElement CallbackCall(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public virtual async Task<com.robotraconteur.device.DeviceInfo> async_get_device_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("device_info",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<com.robotraconteur.device.DeviceInfo>(rr_value);
    return rr_ret;
    } }
    public virtual async Task<List<SignalGroupInfo>> async_get_signal_group_info(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("signal_group_info",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackList<SignalGroupInfo>(rr_value);
    return rr_ret;
    } }
    public Task<SignalGroup>  async_get_signal_groups(string ind, int timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    return AsyncFindObjRefTyped<SignalGroup>("signal_groups",ind.ToString(),"com.robotraconteur.signal.SignalGroup",timeout);
    }
}
public class Signal_skel : ServiceSkel {
    protected Signal obj;
    protected async_Signal async_obj;
    public Signal_skel(object o) : base(o)    {
    obj=(Signal)o;
    async_obj = o as async_Signal;
    }
    public override void ReleaseCastObject() { 
    obj=null;
    async_obj=null;
    base.ReleaseCastObject();
    }
    public override MessageElement CallGetProperty(string membername, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    case "signal_info":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_signal_info().ContinueWith(t => async_adapter.EndTask<SignalInfo>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    SignalInfo ret=obj.signal_info;
    return MessageElementUtil.PackStructure("return",ret);
    }
    case "isoch_info":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_isoch_info().ContinueWith(t => async_adapter.EndTask<com.robotraconteur.device.isoch.IsochInfo>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    com.robotraconteur.device.isoch.IsochInfo ret=obj.isoch_info;
    return MessageElementUtil.PackStructure("return",ret);
    }
    case "isoch_downsample":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_isoch_downsample().ContinueWith(t => async_adapter.EndTask<uint>(t,async_ret => MessageElementUtil.PackScalar<uint>("return",async_ret)));
    return null;
    }
    uint ret=obj.isoch_downsample;
    return MessageElementUtil.PackScalar<uint>("return",ret);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void CallSetProperty(string membername, MessageElement m, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    case "isoch_downsample":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_isoch_downsample((MessageElementUtil.UnpackScalar<uint>(m))).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.isoch_downsample=(MessageElementUtil.UnpackScalar<uint>(m));
    return;
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override MessageElement CallFunction(string rr_membername, vectorptr_messageelement rr_m, WrappedServiceSkelAsyncAdapter rr_async_adapter) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override object GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(Signal)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(Signal)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void InitPipeServers(object rrobj1) {
    obj=(Signal)rrobj1;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(Signal)rrobj1;
    }
    public override void InitWireServers(object rrobj1) {
    obj=(Signal)rrobj1;
    obj.signal_value=new Wire<object>(innerskel.GetWire("signal_value"));
    obj.signal_command=new Wire<object>(innerskel.GetWire("signal_command"));
    obj.signal_value_vec=new Wire<double[]>(innerskel.GetWire("signal_value_vec"));
    obj.signal_command_vec=new Wire<double[]>(innerskel.GetWire("signal_command_vec"));
    }
    public override WrappedArrayMemoryDirector GetArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedMultiDimArrayMemoryDirector GetMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodArrayMemoryDirector GetPodArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodMultiDimArrayMemoryDirector GetPodMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedArrayMemoryDirector GetNamedArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedMultiDimArrayMemoryDirector GetNamedMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override string RRType { get { return "com.robotraconteur.signal.Signal"; } }
}
public class SignalGroup_skel : ServiceSkel {
    protected SignalGroup obj;
    protected async_SignalGroup async_obj;
    public SignalGroup_skel(object o) : base(o)    {
    obj=(SignalGroup)o;
    async_obj = o as async_SignalGroup;
    }
    public override void ReleaseCastObject() { 
    obj=null;
    async_obj=null;
    base.ReleaseCastObject();
    }
    public override MessageElement CallGetProperty(string membername, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    case "signal_info":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_signal_info().ContinueWith(t => async_adapter.EndTask<List<SignalInfo>>(t,async_ret => MessageElementUtil.PackListType<SignalInfo>("return",async_ret)));
    return null;
    }
    List<SignalInfo> ret=obj.signal_info;
    return MessageElementUtil.PackListType<SignalInfo>("return",ret);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void CallSetProperty(string membername, MessageElement m, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override MessageElement CallFunction(string rr_membername, vectorptr_messageelement rr_m, WrappedServiceSkelAsyncAdapter rr_async_adapter) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override object GetSubObj(string name, string ind) {
    switch (name) {
    case "signals": {
    return obj.get_signals(Int32.Parse(ind));
    }
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(SignalGroup)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(SignalGroup)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void InitPipeServers(object rrobj1) {
    obj=(SignalGroup)rrobj1;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(SignalGroup)rrobj1;
    }
    public override void InitWireServers(object rrobj1) {
    obj=(SignalGroup)rrobj1;
    }
    public override WrappedArrayMemoryDirector GetArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedMultiDimArrayMemoryDirector GetMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodArrayMemoryDirector GetPodArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodMultiDimArrayMemoryDirector GetPodMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedArrayMemoryDirector GetNamedArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedMultiDimArrayMemoryDirector GetNamedMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override string RRType { get { return "com.robotraconteur.signal.SignalGroup"; } }
}
public class SignalDevice_skel : ServiceSkel {
    protected SignalDevice obj;
    protected async_SignalDevice async_obj;
    public SignalDevice_skel(object o) : base(o)    {
    obj=(SignalDevice)o;
    async_obj = o as async_SignalDevice;
    }
    public override void ReleaseCastObject() { 
    obj=null;
    async_obj=null;
    base.ReleaseCastObject();
    }
    public override MessageElement CallGetProperty(string membername, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    case "device_info":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_device_info().ContinueWith(t => async_adapter.EndTask<com.robotraconteur.device.DeviceInfo>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    com.robotraconteur.device.DeviceInfo ret=obj.device_info;
    return MessageElementUtil.PackStructure("return",ret);
    }
    case "signal_group_info":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_signal_group_info().ContinueWith(t => async_adapter.EndTask<List<SignalGroupInfo>>(t,async_ret => MessageElementUtil.PackListType<SignalGroupInfo>("return",async_ret)));
    return null;
    }
    List<SignalGroupInfo> ret=obj.signal_group_info;
    return MessageElementUtil.PackListType<SignalGroupInfo>("return",ret);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void CallSetProperty(string membername, MessageElement m, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override MessageElement CallFunction(string rr_membername, vectorptr_messageelement rr_m, WrappedServiceSkelAsyncAdapter rr_async_adapter) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override object GetSubObj(string name, string ind) {
    switch (name) {
    case "signal_groups": {
    return obj.get_signal_groups(ind);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(SignalDevice)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(SignalDevice)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void InitPipeServers(object rrobj1) {
    obj=(SignalDevice)rrobj1;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(SignalDevice)rrobj1;
    }
    public override void InitWireServers(object rrobj1) {
    obj=(SignalDevice)rrobj1;
    }
    public override WrappedArrayMemoryDirector GetArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedMultiDimArrayMemoryDirector GetMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodArrayMemoryDirector GetPodArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodMultiDimArrayMemoryDirector GetPodMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedArrayMemoryDirector GetNamedArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedMultiDimArrayMemoryDirector GetNamedMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override string RRType { get { return "com.robotraconteur.signal.SignalDevice"; } }
}
public class Signal_default_impl : Signal{
    protected WireBroadcaster<object> rrvar_signal_value;
    protected WireUnicastReceiver<object> rrvar_signal_command;
    protected WireBroadcaster<double[]> rrvar_signal_value_vec;
    protected WireUnicastReceiver<double[]> rrvar_signal_command_vec;
    public virtual SignalInfo signal_info {get; set;} = default(SignalInfo);
    public virtual com.robotraconteur.device.isoch.IsochInfo isoch_info {get; set;} = default(com.robotraconteur.device.isoch.IsochInfo);
    public virtual uint isoch_downsample {get; set;} = default(uint);
    public virtual Wire<object> signal_value {
    get { return rrvar_signal_value.Wire;  }
    set {
    if (rrvar_signal_value!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_signal_value= new WireBroadcaster<object>(value);
    }
    }
    public virtual Wire<object> signal_command {
    get { return rrvar_signal_command.Wire;  }
    set {
    if (rrvar_signal_command!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_signal_command= new WireUnicastReceiver<object>(value);
    }
    }
    public virtual Wire<double[]> signal_value_vec {
    get { return rrvar_signal_value_vec.Wire;  }
    set {
    if (rrvar_signal_value_vec!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_signal_value_vec= new WireBroadcaster<double[]>(value);
    }
    }
    public virtual Wire<double[]> signal_command_vec {
    get { return rrvar_signal_command_vec.Wire;  }
    set {
    if (rrvar_signal_command_vec!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_signal_command_vec= new WireUnicastReceiver<double[]>(value);
    }
    }
}
public class SignalGroup_default_impl : SignalGroup{
    public virtual List<SignalInfo> signal_info {get; set;} = default(List<SignalInfo>);
    public virtual Signal get_signals(int ind) {
    throw new NotImplementedException();
    }
}
public class SignalDevice_default_impl : SignalDevice{
    public virtual com.robotraconteur.device.DeviceInfo device_info {get; set;} = default(com.robotraconteur.device.DeviceInfo);
    public virtual List<SignalGroupInfo> signal_group_info {get; set;} = default(List<SignalGroupInfo>);
    public virtual SignalGroup get_signal_groups(string ind) {
    throw new NotImplementedException();
    }
}
public static class RRExtensions{
}
}
namespace com.robotraconteur.units
{
public class SIUnit
{
    public string display_units;
    public string encoded_units;
}

}
namespace com.robotraconteur.units
{
public class com__robotraconteur__unitsFactory : ServiceFactory
{
    public override string DefString()
{
    const string s="service com.robotraconteur.units\n\nstdver 0.10\n\nstruct SIUnit\nfield string display_units\nfield string encoded_units\nend\n\n";
    return s;
    }
    public override string GetServiceName() {return "com.robotraconteur.units";}
    public SIUnit_stub SIUnit_stubentry;
    public com__robotraconteur__unitsFactory()
{
    SIUnit_stubentry=new SIUnit_stub(this);
    }
    public override IStructureStub FindStructureStub(string objecttype)
    {
    if (objecttype=="SIUnit")    return SIUnit_stubentry;
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public override IPodStub FindPodStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override INamedArrayStub FindNamedArrayStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override ServiceStub CreateStub(WrappedServiceStub innerstub) {
    string objecttype=innerstub.RR_objecttype.GetServiceDefinition().Name + "." + innerstub.RR_objecttype.Name;    string objshort;
    if (CompareNamespace(objecttype, out objshort)) {
    switch (objshort) {
    default:
    break;
    }
    } else {
    string ext_service_type=RobotRaconteurNode.SplitQualifiedName(objecttype).Item1;
    return RobotRaconteurNode.s.GetServiceType(ext_service_type).CreateStub(innerstub);
    }
    throw new ServiceException("Could not create stub");
    }
    public override ServiceSkel CreateSkel(object obj) {
    string objtype = RobotRaconteurNode.GetTypeString(ServiceSkelUtil.FindParentInterface(obj.GetType()));
    string objshort;
    if (CompareNamespace(objtype, out objshort)) {
    switch(objshort) {
    default:
    break;
    }
    } else {
    string ext_service_type=RobotRaconteurNode.SplitQualifiedName(objtype).Item1;
    return RobotRaconteurNode.s.GetServiceFactory(ext_service_type).CreateSkel(obj);
    }
    throw new ServiceException("Could not create skel");
    }
    public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp){
    if (rr_exp==null) return rr_exp;
    string rr_type=rr_exp.Error;
    if (!rr_type.Contains(".")) return rr_exp;
    string rr_stype;
    if (CompareNamespace(rr_type, out rr_stype)) {
    } else {
    return RobotRaconteurNode.s.DownCastException(rr_exp); 
    }
    return rr_exp;
    }
}

public class SIUnit_stub : IStructureStub {
    public SIUnit_stub(com__robotraconteur__unitsFactory d) {def=d;}
    private com__robotraconteur__unitsFactory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    SIUnit s = (SIUnit)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackString("display_units",s.display_units));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackString("encoded_units",s.encoded_units));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.units.SIUnit",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    SIUnit s=new SIUnit();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.display_units =MessageElementUtil.UnpackString(MessageElement.FindElement(mm,"display_units"));
    s.encoded_units =MessageElementUtil.UnpackString(MessageElement.FindElement(mm,"encoded_units"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public static class RRExtensions{
}
}
namespace com.robotraconteur.uuid
{
[NamedArrayElementTypeAndCount(typeof(byte), 16)]
public struct UUID
{
    public byte[] uuid_bytes;
    public byte[] GetNumericArray()
    {
    var a=new ArraySegment<byte>(new byte[16]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<byte> rr_a)
    {
    if(rr_a.Count < 16) throw new ArgumentException("ArraySegment invalid length");
    Array.Copy(uuid_bytes, 0, rr_a.Array, rr_a.Offset + 0, 16);
    }
    public void AssignFromNumericArray(ref ArraySegment<byte> rr_a)
    {
    if(rr_a.Count < 16) throw new ArgumentException("ArraySegment invalid length");
    Array.Copy(rr_a.Array, rr_a.Offset + 0, uuid_bytes, 0, 16);
    }
}

}
namespace com.robotraconteur.uuid
{
public class com__robotraconteur__uuidFactory : ServiceFactory
{
    public override string DefString()
{
    const string s="service com.robotraconteur.uuid\n\nstdver 0.10\n\nnamedarray UUID\nfield uint8[16] uuid_bytes\nend\n\n";
    return s;
    }
    public override string GetServiceName() {return "com.robotraconteur.uuid";}
    public UUID_stub UUID_stubentry;
    public com__robotraconteur__uuidFactory()
{
    UUID_stubentry=new UUID_stub();
    }
    public override IStructureStub FindStructureStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public override IPodStub FindPodStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override INamedArrayStub FindNamedArrayStub(string objecttype)
    {
    if (objecttype=="UUID")    return UUID_stubentry;
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override ServiceStub CreateStub(WrappedServiceStub innerstub) {
    string objecttype=innerstub.RR_objecttype.GetServiceDefinition().Name + "." + innerstub.RR_objecttype.Name;    string objshort;
    if (CompareNamespace(objecttype, out objshort)) {
    switch (objshort) {
    default:
    break;
    }
    } else {
    string ext_service_type=RobotRaconteurNode.SplitQualifiedName(objecttype).Item1;
    return RobotRaconteurNode.s.GetServiceType(ext_service_type).CreateStub(innerstub);
    }
    throw new ServiceException("Could not create stub");
    }
    public override ServiceSkel CreateSkel(object obj) {
    string objtype = RobotRaconteurNode.GetTypeString(ServiceSkelUtil.FindParentInterface(obj.GetType()));
    string objshort;
    if (CompareNamespace(objtype, out objshort)) {
    switch(objshort) {
    default:
    break;
    }
    } else {
    string ext_service_type=RobotRaconteurNode.SplitQualifiedName(objtype).Item1;
    return RobotRaconteurNode.s.GetServiceFactory(ext_service_type).CreateSkel(obj);
    }
    throw new ServiceException("Could not create skel");
    }
    public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp){
    if (rr_exp==null) return rr_exp;
    string rr_type=rr_exp.Error;
    if (!rr_type.Contains(".")) return rr_exp;
    string rr_stype;
    if (CompareNamespace(rr_type, out rr_stype)) {
    } else {
    return RobotRaconteurNode.s.DownCastException(rr_exp); 
    }
    return rr_exp;
    }
}

public class UUID_stub : NamedArrayStub<UUID,byte> {
    public override byte[] GetNumericArrayFromNamedArrayStruct(ref UUID s) {
    return s.GetNumericArray();
    }
    public override UUID GetNamedArrayStructFromNumericArray(byte[] m) {
    if (m.Length != 16) throw new DataTypeException("Invalid namedarray array");
    var s = new UUID();
    var a = new ArraySegment<byte>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override byte[] GetNumericArrayFromNamedArray(UUID[] s) {
    return s.GetNumericArray();
    }
    public override UUID[] GetNamedArrayFromNumericArray(byte[] m) {
    if (m.Length % 16 != 0) throw new DataTypeException("Invalid namedarray array");
    UUID[] s = new UUID[m.Length / 16];
    var a = new ArraySegment<byte>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.uuid.UUID"; } }}

public static class RRExtensions{
    public static byte[] GetNumericArray(this UUID[] s)
    {
    var a=new ArraySegment<byte>(new byte[16 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this UUID[] s, ref ArraySegment<byte> a)
    {
    if(a.Count < 16 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<byte>(a.Array, a.Offset + 16*i,16);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this UUID[] s, ref ArraySegment<byte> a)
    {
    if(a.Count < 16 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<byte>(a.Array, a.Offset + 16*i,16);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
}
}
